var home=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){e.exports=function(e){function t(e){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",e)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(e):"undefined"!=typeof eval?eval.call(null,e):t("EvalError: No eval function available")}catch(e){t(e)}}},function(e,t,n){var r,i;r=[n,t,n(2),n(4),n(6),n(8)],void 0===(i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=Microsoft.Msagl.Core;n.Geometry,n.Layout.ProximityOverlapRemoval}.apply(t,r))||(e.exports=i)},function(e,t,n){n(0)(n(3))},function(e,t){e.exports='/* jsclr expects "window" and "document" to exist (even if just for namespacing). In a web worker that is not true, so I\'m creating dummy\r\nvariables with those names. */\r\nif (typeof window === "undefined") {\r\n    var window = this;\r\n    window.document = {};\r\n}\r\nif (typeof document === "undefined") {\r\n    var document = window.document;\r\n}'},function(e,t,n){n(0)(n(5))},function(e,t){e.exports='/* Generated by SharpKit 5 v5.5.0 */\r\nif (typeof($CreateException)==\'undefined\') \r\n{\r\n    var $CreateException = function(ex, error) \r\n    {\r\n        if(error==null)\r\n            error = new Error();\r\n        if(ex==null)\r\n            ex = new System.Exception.ctor();       \r\n        error.message = ex.message;\r\n        for (var p in ex)\r\n           error[p] = ex[p];\r\n        return error;\r\n    }\r\n}\r\n\r\nfunction $CombineDelegates(del1,del2)\r\n{\r\n    if(del1 == null)\r\n        return del2;\r\n    if(del2 == null)\r\n        return del1;\r\n    var del=$CreateMulticastDelegateFunction();\r\n    del.delegates = [];\r\n    if(del1.isMulticastDelegate)\r\n    {\r\n        for(var i=0;i < del1.delegates.length;i++)\r\n            del.delegates.push(del1.delegates[i]);\r\n    }\r\n    else\r\n    {\r\n        del.delegates.push(del1);\r\n    }\r\n    if(del2.isMulticastDelegate)\r\n    {\r\n        for(var i=0;i < del2.delegates.length;i++)\r\n            del.delegates.push(del2.delegates[i]);\r\n    }\r\n    else\r\n    {\r\n        del.delegates.push(del2);\r\n    }\r\n    return del;\r\n};\r\n\r\nfunction $CreateMulticastDelegateFunction()\r\n{\r\n    var del2 = null;\r\n    \r\n    var del=function()\r\n    {\r\n        var x=undefined;\r\n        for(var i=0;i < del2.delegates.length;i++)\r\n        {\r\n            var del3=del2.delegates[i];\r\n            x = del3.apply(null,arguments);\r\n        }\r\n        return x;\r\n    };\r\n    del.isMulticastDelegate = true;\r\n    del2 = del;   \r\n    \r\n    return del;\r\n};\r\n\r\nfunction $RemoveDelegate(delOriginal,delToRemove)\r\n{\r\n    if(delToRemove == null || delOriginal == null)\r\n        return delOriginal;\r\n    if(delOriginal.isMulticastDelegate)\r\n    {\r\n        if(delToRemove.isMulticastDelegate)\r\n            throw new Error("Multicast to multicast delegate removal is not implemented yet");\r\n        var del=$CreateMulticastDelegateFunction();\r\n        for(var i=0;i < delOriginal.delegates.length;i++)\r\n        {\r\n            var del2=delOriginal.delegates[i];\r\n            if(del2 != delToRemove)\r\n            {\r\n                if(del.delegates == null)\r\n                    del.delegates = [];\r\n                del.delegates.push(del2);\r\n            }\r\n        }\r\n        if(del.delegates == null)\r\n            return null;\r\n        if(del.delegates.length == 1)\r\n            return del.delegates[0];\r\n        return del;\r\n    }\r\n    else\r\n    {\r\n        if(delToRemove.isMulticastDelegate)\r\n            throw new Error("single to multicast delegate removal is not supported");\r\n        if(delOriginal == delToRemove)\r\n            return null;\r\n        return delOriginal;\r\n    }\r\n};\r\n\r\nif (typeof($CreateDelegate)==\'undefined\'){\r\n    if(typeof($iKey)==\'undefined\') var $iKey = 0;\r\n    if(typeof($pKey)==\'undefined\') var $pKey = String.fromCharCode(1);\r\n    var $CreateDelegate = function(target, func){\r\n        if (target == null || func == null) \r\n            return func;\r\n        if(func.target==target && func.func==func)\r\n            return func;\r\n        if (target.$delegateCache == null)\r\n            target.$delegateCache = {};\r\n        if (func.$key == null)\r\n            func.$key = $pKey + String(++$iKey);\r\n        var delegate;\r\n        if(target.$delegateCache!=null)\r\n            delegate = target.$delegateCache[func.$key];\r\n        if (delegate == null){\r\n            delegate = function(){\r\n                return func.apply(target, arguments);\r\n            };\r\n            delegate.func = func;\r\n            delegate.target = target;\r\n            delegate.isDelegate = true;\r\n            if(target.$delegateCache!=null)\r\n                target.$delegateCache[func.$key] = delegate;\r\n        }\r\n        return delegate;\r\n    }\r\n}\r\n\r\nif (typeof ($CreateAnonymousDelegate) == \'undefined\') {\r\n    var $CreateAnonymousDelegate = function (target, func) {\r\n        if (target == null || func == null)\r\n            return func;\r\n        var delegate = function () {\r\n            return func.apply(target, arguments);\r\n        };\r\n        delegate.func = func;\r\n        delegate.target = target;\r\n        delegate.isDelegate = true;\r\n        return delegate;\r\n    }\r\n}\r\n\r\nif (typeof(Float64Array) == "undefined")\r\n    var Float64Array = Array;\r\nif (typeof(Int32Array) == "undefined")\r\n    var Int32Array = Array;\r\n\r\nif (typeof(JsTypes) == "undefined")\r\n    var JsTypes = [];\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$MinimumSpanningTree$GTreeOverlapRemoval = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        RemoveOverlaps$$Node$Array$$Double: function (nodes, nodeSeparation){\r\n            var settings = (function (){\r\n                var $v1 = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.OverlapRemovalSettings.ctor();\r\n                $v1.set_RandomizeAllPointsOnStart(true);\r\n                $v1.set_NodeSeparation(nodeSeparation);\r\n                return $v1;\r\n            })();\r\n            var mst = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.ctor$$OverlapRemovalSettings$$Node$Array(settings, nodes);\r\n            mst.RemoveOverlaps();\r\n        },\r\n        AvgEdgeLength: function (nodes){\r\n            var i = 0;\r\n            var avgEdgeLength = 0;\r\n            var $it1 = System.Linq.Enumerable.SelectMany$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Layout.Node.ctor, Microsoft.Msagl.Core.Layout.Edge.ctor, nodes, function (n){\r\n                return n.get_OutEdges();\r\n            }).GetEnumerator();\r\n            while ($it1.MoveNext()){\r\n                var edge = $it1.get_Current();\r\n                var sPoint = edge.get_Source().get_Center();\r\n                var tPoint = edge.get_Target().get_Center();\r\n                var euclid = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(sPoint, tPoint)).get_Length();\r\n                avgEdgeLength += euclid;\r\n                i++;\r\n            }\r\n            if (i == 0)\r\n                return 1;\r\n            avgEdgeLength /= i;\r\n            return avgEdgeLength;\r\n        },\r\n        GetIdealEdgeLength$$Int32$$Int32$$Point$$Point$$Size$Array$$Boolean: function (nodeId1, nodeId2, point1, point2, nodeSizes, forLayers){\r\n            var t;\r\n            var idealDist = (function (){\r\n                var $1 = {\r\n                    Value: t\r\n                };\r\n                var $res = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.GetIdealEdgeLength$$Int32$$Int32$$Point$$Point$$Size$Array$$Double(nodeId1, nodeId2, point1, point2, nodeSizes, $1);\r\n                t = $1.Value;\r\n                return $res;\r\n            })();\r\n            var length = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(point1, point2)).get_Length();\r\n            var box1,box2;\r\n            if (forLayers){\r\n                var maxId = System.Math.Max$$Int32$$Int32(nodeId1, nodeId2);\r\n                box1 = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Size$$Point(nodeSizes[maxId], point1);\r\n                box2 = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Size$$Point(nodeSizes[maxId], point2);\r\n            }\r\n            else {\r\n                box1 = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Size$$Point(nodeSizes[nodeId1], point1);\r\n                box2 = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Size$$Point(nodeSizes[nodeId2], point2);\r\n            }\r\n            var distBox = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.GetDistanceRects(box1, box2);\r\n            var weight;\r\n            if (t > 1)\r\n                weight = -(idealDist - length);\r\n            else\r\n                weight = distBox;\r\n            var smallId = nodeId1;\r\n            var bigId = nodeId2;\r\n            if (nodeId1 > nodeId2){\r\n                smallId = nodeId2;\r\n                bigId = nodeId1;\r\n            }\r\n            return System.Tuple.Create$5$$T1$$T2$$T3$$T4$$T5(System.Int32.ctor, System.Int32.ctor, System.Double.ctor, System.Double.ctor, System.Double.ctor, smallId, bigId, t, idealDist, weight);\r\n        },\r\n        GetIdealEdgeLength$$Int32$$Int32$$Point$$Point$$Size$Array$$Double: function (nodeId1, nodeId2, point1, point2, nodeBoxes, tRes){\r\n            if (nodeBoxes == null)\r\n                throw $CreateException(new System.ArgumentNullException.ctor$$String("nodeBoxes"), new Error());\r\n            var expandMax = 1.5;\r\n            var expandMin = 1;\r\n            var machineAcc = 1E-16;\r\n            var dist = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(point1, point2)).get_Length();\r\n            var dx = System.Math.Abs$$Double(point1.get_X() - point2.get_X());\r\n            var dy = System.Math.Abs$$Double(point1.get_Y() - point2.get_Y());\r\n            var wx = (nodeBoxes[nodeId1].get_Width() / 2 + nodeBoxes[nodeId2].get_Width() / 2);\r\n            var wy = (nodeBoxes[nodeId1].get_Height() / 2 + nodeBoxes[nodeId2].get_Height() / 2);\r\n            var t;\r\n            if (dx < machineAcc * wx){\r\n                t = wy / dy;\r\n            }\r\n            else if (dy < machineAcc * wy){\r\n                t = wx / dx;\r\n            }\r\n            else {\r\n                t = System.Math.Min$$Double$$Double(wx / dx, wy / dy);\r\n            }\r\n            if (t > 1)\r\n                t = System.Math.Max$$Double$$Double(t, 1.001);\r\n            t = System.Math.Min$$Double$$Double(expandMax, t);\r\n            t = System.Math.Max$$Double$$Double(expandMin, t);\r\n            tRes.Value = t;\r\n            return t * dist;\r\n        },\r\n        GetDistanceRects: function (a, b){\r\n            if (a.Intersects(b))\r\n                return 0;\r\n            var dx = 0,dy = 0;\r\n            if (a.get_Right() < b.get_Left()){\r\n                dx = a.get_Left() - b.get_Right();\r\n            }\r\n            else if (b.get_Right() < a.get_Left()){\r\n                dx = a.get_Left() - b.get_Right();\r\n            }\r\n            if (a.get_Top() < b.get_Bottom()){\r\n                dy = b.get_Bottom() - a.get_Top();\r\n            }\r\n            else if (b.get_Top() < a.get_Bottom()){\r\n                dy = a.get_Bottom() - b.get_Top();\r\n            }\r\n            var euclid = System.Math.Sqrt(dx * dx + dy * dy);\r\n            return euclid;\r\n        },\r\n        MoveNodePositions: function (treeEdges, nodePositions, rootNodeId){\r\n            var posOld = nodePositions.Clone() instanceof Array || nodePositions.Clone() == null ? nodePositions.Clone() : (function (){\r\n                throw new Error("InvalidCastException");\r\n            }\r\n            ());\r\n            var visited = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.Int32.ctor);\r\n            visited.Insert(rootNodeId);\r\n            for (var i = 0; i < treeEdges.get_Count(); i++){\r\n                var tupleEdge = treeEdges.get_Item$$Int32(i);\r\n                if (visited.Contains$$T(tupleEdge.get_Item1()))\r\n                    Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.MoveUpperSite(tupleEdge, nodePositions, posOld, visited);\r\n                else {\r\n                    Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.MoveLowerSite(tupleEdge, nodePositions, posOld, visited);\r\n                }\r\n            }\r\n        },\r\n        MoveUpperSite: function (edge, posNew, oldPos, visited){\r\n            var idealLen = edge.get_Item4();\r\n            var dir = Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(oldPos[edge.get_Item2()], oldPos[edge.get_Item1()]);\r\n            var len = dir.get_Length();\r\n            dir = Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Point$$Double(dir, (idealLen / len + 0.01));\r\n            var standingNode = edge.get_Item1();\r\n            var movedNode = edge.get_Item2();\r\n            posNew[movedNode] = Microsoft.Msagl.Core.Geometry.Point.op_Addition(posNew[standingNode], dir);\r\n            visited.Insert(movedNode);\r\n        },\r\n        MoveLowerSite: function (edge, posNew, oldPos, visited){\r\n            var idealLen = edge.get_Item4();\r\n            var dir = Microsoft.Msagl.Core.Geometry.Point.op_Addition(Microsoft.Msagl.Core.Geometry.Point.op_UnaryNegation(oldPos[edge.get_Item2()]), oldPos[edge.get_Item1()]);\r\n            var len = dir.get_Length();\r\n            dir = Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Point$$Double(dir, (idealLen / len + 0.01));\r\n            var standingNode = edge.get_Item2();\r\n            var movedNode = edge.get_Item1();\r\n            posNew[movedNode] = Microsoft.Msagl.Core.Geometry.Point.op_Addition(posNew[standingNode], dir);\r\n            visited.Insert(movedNode);\r\n        },\r\n        RemoveOverlapsForLayers: function (nodes, sizesOnLayers){\r\n            var settings = (function (){\r\n                var $v2 = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.OverlapRemovalSettings.ctor();\r\n                $v2.set_RandomizeAllPointsOnStart(true);\r\n                return $v2;\r\n            })();\r\n            var mst = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.ctor$$OverlapRemovalSettings$$Node$Array$$Size$Array(settings, nodes, sizesOnLayers);\r\n            mst.RemoveOverlaps();\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.IOverlapRemoval"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$OverlapRemovalSettings$$Node$Array: function (settings, nodes){\r\n            this._settings = null;\r\n            this._sizes = null;\r\n            this._overlapForLayers = false;\r\n            this.lastRunNumberIterations = 0;\r\n            this._nodes = null;\r\n            System.Object.ctor.call(this);\r\n            this._settings = settings;\r\n            this._nodes = nodes;\r\n        },\r\n        ctor$$OverlapRemovalSettings$$Node$Array$$Size$Array: function (settings, nodes, sizes){\r\n            this._settings = null;\r\n            this._sizes = null;\r\n            this._overlapForLayers = false;\r\n            this.lastRunNumberIterations = 0;\r\n            this._nodes = null;\r\n            System.Object.ctor.call(this);\r\n            this._overlapForLayers = true;\r\n            this._settings = settings;\r\n            this._sizes = sizes;\r\n            this._nodes = nodes;\r\n        },\r\n        RemoveOverlaps: function (){\r\n            if (this._nodes.length < 3){\r\n                this.RemoveOverlapsOnTinyGraph();\r\n                return;\r\n            }\r\n            var nodePositions;\r\n            var nodeSizes;\r\n            (function (){\r\n                var $1 = {\r\n                    Value: nodePositions\r\n                };\r\n                var $2 = {\r\n                    Value: nodeSizes\r\n                };\r\n                var $res = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.InitNodePositionsAndBoxes(this._settings, this._nodes, $1, $2);\r\n                nodePositions = $1.Value;\r\n                nodeSizes = $2.Value;\r\n                return $res;\r\n            }).call(this);\r\n            if (this._overlapForLayers){\r\n                nodeSizes = this._sizes;\r\n            }\r\n            this.lastRunNumberIterations = 0;\r\n            while (this.OneIteration(nodePositions, nodeSizes, false)){\r\n                this.lastRunNumberIterations++;\r\n            }\r\n            while (this.OneIteration(nodePositions, nodeSizes, true)){\r\n                this.lastRunNumberIterations++;\r\n            }\r\n            System.Console.WriteLine();\r\n            for (var i = 0; i < this._nodes.length; i++){\r\n                this._nodes[i].set_Center(nodePositions[i]);\r\n            }\r\n        },\r\n        RemoveOverlapsOnTinyGraph: function (){\r\n            if (this._nodes.length == 1)\r\n                return;\r\n            if (this._nodes.length == 2){\r\n                var nodes = System.Linq.Enumerable.ToArray$1(Microsoft.Msagl.Core.Layout.Node.ctor, this._nodes);\r\n                var a = nodes[0];\r\n                var b = nodes[1];\r\n                if (Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Point$$Point(a.get_Center(), b.get_Center()))\r\n                    b.set_Center(Microsoft.Msagl.Core.Geometry.Point.op_Addition(b.get_Center(), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0.001, 0)));\r\n                var idealDist = this.GetIdealDistanceBetweenTwoNodes(a, b);\r\n                var center = Microsoft.Msagl.Core.Geometry.Point.op_Division((Microsoft.Msagl.Core.Geometry.Point.op_Addition(a.get_Center(), b.get_Center())), 2);\r\n                var dir = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(a.get_Center(), b.get_Center()));\r\n                var dist = dir.get_Length();\r\n                dir = Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Point$$Double(dir, 0.5 * idealDist / dist);\r\n                a.set_Center(Microsoft.Msagl.Core.Geometry.Point.op_Addition(center, dir));\r\n                b.set_Center(Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(center, dir));\r\n            }\r\n        },\r\n        GetIdealDistanceBetweenTwoNodes: function (a, b){\r\n            var abox = a.get_BoundingBox().Clone();\r\n            var bbox = b.get_BoundingBox().Clone();\r\n            abox.Pad(this._settings.get_NodeSeparation() / 2);\r\n            bbox.Pad(this._settings.get_NodeSeparation() / 2);\r\n            var ac = abox.get_Center();\r\n            var bc = bbox.get_Center();\r\n            var ab = Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(ac, bc);\r\n            var dx = System.Math.Abs$$Double(ab.get_X());\r\n            var dy = System.Math.Abs$$Double(ab.get_Y());\r\n            var wx = (abox.get_Width() / 2 + bbox.get_Width() / 2);\r\n            var wy = (abox.get_Height() / 2 + bbox.get_Height() / 2);\r\n            var machineAcc = 1E-16;\r\n            var t;\r\n            if (dx < machineAcc * wx)\r\n                t = wy / dy;\r\n            else if (dy < machineAcc * wy)\r\n                t = wx / dx;\r\n            else\r\n                t = System.Math.Min$$Double$$Double(wx / dx, wy / dy);\r\n            return t * ab.get_Length();\r\n        },\r\n        OneIteration: function (nodePositions, nodeSizes, scanlinePhase){\r\n            var ts = new Array(nodePositions.length);\r\n            for (var i = 0; i < nodePositions.length; i++)\r\n                ts[i] = System.Tuple.Create$2$$T1$$T2(Microsoft.Msagl.Core.Geometry.Point.ctor, System.Object.ctor, nodePositions[i], i);\r\n            var cdt = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.ctor$$IEnumerable$1(ts);\r\n            cdt.Run();\r\n            var siteIndex = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Routing.CdtSite.ctor, System.Int32.ctor);\r\n            for (var i = 0; i < nodePositions.length; i++)\r\n                siteIndex.set_Item$$TKey(cdt.PointsToSites.get_Item$$TKey(nodePositions[i]), i);\r\n            var numCrossings = 0;\r\n            var proximityEdges = new System.Collections.Generic.List$1.ctor(System.Tuple$5.ctor);\r\n            var $it2 = cdt.PointsToSites.get_Values().GetEnumerator();\r\n            while ($it2.MoveNext()){\r\n                var site = $it2.get_Current();\r\n                var $it3 = site.Edges.GetEnumerator();\r\n                while ($it3.MoveNext()){\r\n                    var edge = $it3.get_Current();\r\n                    var point1 = edge.upperSite.Point;\r\n                    var point2 = edge.lowerSite.Point;\r\n                    var nodeId1 = siteIndex.get_Item$$TKey(edge.upperSite);\r\n                    var nodeId2 = siteIndex.get_Item$$TKey(edge.lowerSite);\r\n                    var tuple = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.GetIdealEdgeLength$$Int32$$Int32$$Point$$Point$$Size$Array$$Boolean(nodeId1, nodeId2, point1, point2, nodeSizes, this._overlapForLayers);\r\n                    proximityEdges.Add(tuple);\r\n                    if (tuple.get_Item3() > 1)\r\n                        numCrossings++;\r\n                }\r\n            }\r\n            if (numCrossings == 0 || scanlinePhase){\r\n                var additionalCrossings = this.FindProximityEdgesWithSweepLine(proximityEdges, nodeSizes, nodePositions);\r\n                if (numCrossings == 0 && additionalCrossings == 0){\r\n                    return false;\r\n                }\r\n                if (numCrossings == 0 && !scanlinePhase)\r\n                    return false;\r\n            }\r\n            var treeEdges = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.MstOnDelaunayTriangulation.GetMstOnTuple(proximityEdges, nodePositions.length);\r\n            var rootId = System.Linq.Enumerable.First$1$$IEnumerable$1(System.Tuple$5.ctor, treeEdges).get_Item1();\r\n            Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.MoveNodePositions(treeEdges, nodePositions, rootId);\r\n            return true;\r\n        },\r\n        FindProximityEdgesWithSweepLine: function (proximityEdges, nodeSizes, nodePositions){\r\n            var mstLineSweeper = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.MstLineSweeper.ctor(proximityEdges, nodeSizes, nodePositions, this._overlapForLayers);\r\n            return mstLineSweeper.Run();\r\n        },\r\n        GetLastRunIterations: function (){\r\n            return this.lastRunNumberIterations;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$MinimumSpanningTree$GTreeOverlapRemoval);\r\nvar System$ExtensionsForSharpKit = {\r\n    fullname: "System.ExtensionsForSharpKit",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        Trim_SharpKit: function (me, chars){\r\n            var start = 0,end = me.length - 1;\r\n            for (; start < me.length; start++){\r\n                var found = false;\r\n                for (var i = 0; i < chars.length && !found; i++)\r\n                    if (me.charAt(start) == chars[i])\r\n                        found = true;\r\n                if (!found)\r\n                    break;\r\n            }\r\n            for (; end >= 0; end--){\r\n                var found = false;\r\n                for (var i = 0; i < chars.length && !found; i++)\r\n                    if (me.charAt(end) == chars[i])\r\n                        found = true;\r\n                if (!found)\r\n                    break;\r\n            }\r\n            return me.substr(start, end - start + 1);\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$ExtensionsForSharpKit);\r\nvar SharpKitExtensions$Regex_SharpKit = {\r\n    fullname: "SharpKitExtensions.Regex_SharpKit",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (pattern){\r\n            this.m_JSRegex = null;\r\n            System.Object.ctor.call(this);\r\n            this.m_JSRegex = new RegExp(pattern);\r\n        },\r\n        Match: function (input, start){\r\n            input = input.substr(start);\r\n            var result = this.m_JSRegex.exec(input);\r\n            var ret = new SharpKitExtensions.Match_SharpKit.ctor(result);\r\n            return ret;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(SharpKitExtensions$Regex_SharpKit);\r\nvar SharpKitExtensions$Match_SharpKit = {\r\n    fullname: "SharpKitExtensions.Match_SharpKit",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (res){\r\n            this.m_JSResult = null;\r\n            System.Object.ctor.call(this);\r\n            this.m_JSResult = res;\r\n        },\r\n        Success$$: "System.Boolean",\r\n        get_Success: function (){\r\n            return this.m_JSResult != null;\r\n        },\r\n        Value$$: "System.String",\r\n        get_Value: function (){\r\n            return this.m_JSResult[0];\r\n        },\r\n        Length$$: "System.Int32",\r\n        get_Length: function (){\r\n            return this.m_JSResult[0].length;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(SharpKitExtensions$Match_SharpKit);\r\nvar SharpKitExtensions$StringWriter_SharpKit = {\r\n    fullname: "SharpKitExtensions.StringWriter_SharpKit",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.m_SB = null;\r\n            System.Object.ctor.call(this);\r\n            this.m_SB = new System.Text.StringBuilder.ctor();\r\n        },\r\n        WriteLine: function (str){\r\n            this.m_SB.Append$$String(str);\r\n            this.m_SB.Append$$String("\\n");\r\n        },\r\n        Flush: function (){\r\n        },\r\n        Close: function (){\r\n        },\r\n        Write: function (str){\r\n            this.m_SB.Append$$String(str);\r\n        },\r\n        toString: function (){\r\n            return this.m_SB.toString();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(SharpKitExtensions$StringWriter_SharpKit);\r\nvar Test$Test = {\r\n    fullname: "Test.Test",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        RunTest: function (){\r\n            System.Console.Write$$Object(Test.Test.TestInner.TestInnerEnum.A);\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Test$Test);\r\nvar Microsoft$Msagl$Core$AlgorithmBase = {\r\n    fullname: "Microsoft.Msagl.Core.AlgorithmBase",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        cctor: function (){\r\n            Microsoft.Msagl.Core.AlgorithmBase.threadStaticCancelToken = null;\r\n            Microsoft.Msagl.Core.AlgorithmBase.LocalProgressStepSizeDefault = 0.05;\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.cancelToken = null;\r\n            this.progressRatio = 0;\r\n            this.localProgressStepSize = 0.05;\r\n            this.localProgressSpecified = false;\r\n            this.localStepCount = 0;\r\n            this.stageStartRatio = 0;\r\n            this.stageEndRatio = 1;\r\n            this.ProgressChanged = null;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Run: function (){\r\n            this.progressRatio = 0;\r\n            this.localStepCount = 0;\r\n            this.cancelToken = Microsoft.Msagl.Core.AlgorithmBase.threadStaticCancelToken;\r\n            this.ThrowIfCanceled();\r\n            this.ProgressSteps(0);\r\n            this.RunInternal();\r\n            if (!this.get_IsCanceled()){\r\n                this.ProgressComplete();\r\n            }\r\n        },\r\n        Run$$CancelToken: function (cancelToken){\r\n            this.progressRatio = 0;\r\n            this.localStepCount = 0;\r\n            var oldCancelToken = this.SetCancelToken(cancelToken);\r\n            try{\r\n                this.ProgressSteps(0);\r\n                this.RunInternal();\r\n                if (!this.get_IsCanceled()){\r\n                    this.ProgressComplete();\r\n                }\r\n            }\r\n            finally{\r\n                Microsoft.Msagl.Core.AlgorithmBase.threadStaticCancelToken = oldCancelToken;\r\n            }\r\n        },\r\n        SetCancelToken: function (cancelToken){\r\n            this.cancelToken = cancelToken;\r\n            this.ThrowIfCanceled();\r\n            var oldCancelToken = Microsoft.Msagl.Core.AlgorithmBase.threadStaticCancelToken;\r\n            Microsoft.Msagl.Core.AlgorithmBase.threadStaticCancelToken = cancelToken;\r\n            return oldCancelToken;\r\n        },\r\n        Cancel: function (){\r\n            if (this.cancelToken != null){\r\n                this.cancelToken.set_Canceled(true);\r\n            }\r\n        },\r\n        IsCanceled$$: "System.Boolean",\r\n        get_IsCanceled: function (){\r\n            return this.cancelToken != null && this.cancelToken.get_Canceled();\r\n        },\r\n        ThrowIfCanceled: function (){\r\n            if (this.cancelToken != null){\r\n                this.cancelToken.ThrowIfCanceled();\r\n            }\r\n        },\r\n        CancelToken$$: "Microsoft.Msagl.Core.CancelToken",\r\n        get_CancelToken: function (){\r\n            return this.cancelToken;\r\n        },\r\n        add_ProgressChanged: function (value){\r\n            this.ProgressChanged = $CombineDelegates(this.ProgressChanged, value);\r\n        },\r\n        remove_ProgressChanged: function (value){\r\n            this.ProgressChanged = $RemoveDelegate(this.ProgressChanged, value);\r\n        },\r\n        StartListenToLocalProgress: function (expectedSteps, stageRatio){\r\n            this.localProgressStepSize = stageRatio / System.Math.Max$$Int32$$Int32(1, expectedSteps);\r\n            this.localProgressSpecified = true;\r\n            this.localStepCount = 0;\r\n            this.stageStartRatio = 0;\r\n            this.stageEndRatio = 1;\r\n        },\r\n        StartListenToProgress: function (childAlgorithm, stageRatio){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(childAlgorithm, "childAlgorithm");\r\n            childAlgorithm.add_ProgressChanged($CreateDelegate(this, this.NotifyProgressChanged));\r\n            this.stageStartRatio = this.progressRatio;\r\n            this.stageEndRatio = this.progressRatio + stageRatio;\r\n        },\r\n        StopListenToProgress: function (childAlgorithm){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(childAlgorithm, "childAlgorithm");\r\n            childAlgorithm.remove_ProgressChanged($CreateDelegate(this, this.NotifyProgressChanged));\r\n            this.progressRatio = this.stageEndRatio;\r\n            this.stageStartRatio = 0;\r\n            this.stageEndRatio = 1;\r\n        },\r\n        RunChildAlgorithm: function (childAlgorithm, stageRatio){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(childAlgorithm, "childAlgorithm");\r\n            try{\r\n                this.StartListenToProgress(childAlgorithm, stageRatio);\r\n                childAlgorithm.Run();\r\n            }\r\n            finally{\r\n                this.StopListenToProgress(childAlgorithm);\r\n            }\r\n        },\r\n        ProgressComplete: function (){\r\n            this.ThrowIfCanceled();\r\n            if (this.progressRatio != 1){\r\n                this.progressRatio = 1;\r\n                this.NotifyProgressChanged(this, new Microsoft.Msagl.Core.ProgressChangedEventArgs.ctor$$Double(this.progressRatio));\r\n            }\r\n        },\r\n        ProgressStep: function (){\r\n            this.ProgressSteps(1);\r\n        },\r\n        ProgressSteps: function (stepsTaken){\r\n            this.ThrowIfCanceled();\r\n            this.localStepCount += stepsTaken;\r\n            if (this.localProgressSpecified){\r\n                this.progressRatio += (this.localProgressStepSize * stepsTaken);\r\n            }\r\n            else {\r\n                var Limit = 0.85;\r\n                var HalfLife = 50;\r\n                var Numerator = 42.5;\r\n                this.progressRatio = Limit - (Numerator / (HalfLife + this.localStepCount));\r\n            }\r\n            if (System.Math.Round$$Double$$Int32(this.progressRatio, 6) == 1){\r\n                this.progressRatio = 1;\r\n            }\r\n            this.NotifyProgressChanged(this, new Microsoft.Msagl.Core.ProgressChangedEventArgs.ctor$$Double(this.progressRatio));\r\n        },\r\n        NotifyProgressChanged: function (sender, args){\r\n            if (this.ProgressChanged != null){\r\n                var stageRatio = this.stageEndRatio - this.stageStartRatio;\r\n                var stageProgress = stageRatio * args.get_RatioComplete();\r\n                this.ProgressChanged(this, new Microsoft.Msagl.Core.ProgressChangedEventArgs.ctor$$Double(this.stageStartRatio + stageProgress));\r\n            }\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$AlgorithmBase);\r\nvar Microsoft$Msagl$Core$DataStructures$Size = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.Size",\r\n    baseTypeName: "System.ValueType",\r\n    staticDefinition: {\r\n        op_Division: function (s, d){\r\n            return new Microsoft.Msagl.Core.DataStructures.Size.ctor$$Double$$Double(s.get_Width() / d, s.get_Height() / d);\r\n        },\r\n        op_Multiply: function (s, d){\r\n            return new Microsoft.Msagl.Core.DataStructures.Size.ctor$$Double$$Double(s.get_Width() * d, s.get_Height() * d);\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Struct",\r\n    definition: {\r\n        ctor$$Double$$Double: function (width, height){\r\n            this.width = 0;\r\n            this.height = 0;\r\n            System.ValueType.ctor.call(this);\r\n            this.width = width;\r\n            this.height = height;\r\n        },\r\n        Width$$: "System.Double",\r\n        get_Width: function (){\r\n            return this.width;\r\n        },\r\n        set_Width: function (value){\r\n            this.width = value;\r\n        },\r\n        Height$$: "System.Double",\r\n        get_Height: function (){\r\n            return this.height;\r\n        },\r\n        set_Height: function (value){\r\n            this.height = value;\r\n        },\r\n        Pad: function (padding){\r\n            this.width += 2 * padding;\r\n            this.height += 2 * padding;\r\n        },\r\n        ctor: function (){\r\n            this.width = 0;\r\n            this.height = 0;\r\n            System.ValueType.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$Size);\r\nvar Microsoft$Msagl$Core$DataStructures$SymmetricTuple$1 = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.SymmetricTuple$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (T){\r\n            this.T = T;\r\n            this._A = null;\r\n            this._B = null;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Equals$$SymmetricTuple$1: function (other){\r\n            return (this.get_A().Equals$$Object(other.get_A()) && this.get_B().Equals$$Object(other.get_B())) || (this.get_A().Equals$$Object(other.get_B()) && this.get_B().Equals$$Object(other.get_A()));\r\n        },\r\n        GetHashCode: function (){\r\n            return this.get_A().GetHashCode() ^ this.get_B().GetHashCode();\r\n        },\r\n        A$$: "`0",\r\n        get_A: function (){\r\n            return this._A;\r\n        },\r\n        set_A: function (value){\r\n            this._A = value;\r\n        },\r\n        B$$: "`0",\r\n        get_B: function (){\r\n            return this._B;\r\n        },\r\n        set_B: function (value){\r\n            this._B = value;\r\n        },\r\n        Equals$$Object: function (obj){\r\n            if (System.Object.ReferenceEquals(null, obj))\r\n                return false;\r\n            if (System.Object.ReferenceEquals(this, obj))\r\n                return true;\r\n            if (obj.GetType() != this.GetType())\r\n                return false;\r\n            return this.Equals$$SymmetricTuple$1(Cast(obj, Microsoft.Msagl.Core.DataStructures.SymmetricTuple$1.ctor));\r\n        },\r\n        toString: function (){\r\n            return System.String.Format$$String$$Object$$Object("({0},{1})", this.get_A(), this.get_B());\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$SymmetricTuple$1);\r\nvar Microsoft$Msagl$Core$Geometry$ApproximateComparer = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.ApproximateComparer",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        cctor: function (){\r\n            Microsoft.Msagl.Core.Geometry.ApproximateComparer.squareOfDistanceEpsilon = System.Math.Pow(10, -Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_DistanceEpsilonPrecision() * 2);\r\n            Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon = System.Math.Pow(10, -Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_DistanceEpsilonPrecision());\r\n            Microsoft.Msagl.Core.Geometry.ApproximateComparer.distXEps = 0.0001;\r\n            Microsoft.Msagl.Core.Geometry.ApproximateComparer.tolerance = 1E-08;\r\n            Microsoft.Msagl.Core.Geometry.ApproximateComparer.userDefinedTolerance = Microsoft.Msagl.Core.Geometry.ApproximateComparer.tolerance;\r\n        },\r\n        Close$$Point$$Point$$Double: function (pointA, pointB, tolerance){\r\n            return (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(pointA, pointB)).get_Length() <= tolerance;\r\n        },\r\n        Close$$Point$$Point: function (pointA, pointB){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Point$$Point$$Double(pointA, pointB, Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon);\r\n        },\r\n        Close$$Double$$Double: function (a, b){\r\n            return System.Math.Abs$$Double(a - b) <= Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon;\r\n        },\r\n        Close$$Rectangle$$Rectangle$$Double: function (rect1, rect2, tolerance){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Point$$Point$$Double(rect1.get_LeftBottom(), rect2.get_LeftBottom(), tolerance) && Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Point$$Point$$Double(rect1.get_RightTop(), rect2.get_RightTop(), tolerance);\r\n        },\r\n        Close$$Rectangle$$Rectangle: function (rect1, rect2){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Rectangle$$Rectangle$$Double(rect1, rect2, Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon);\r\n        },\r\n        Compare: function (numberA, numberB){\r\n            var c = numberA - numberB;\r\n            if (c <= -Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return -1;\r\n            if (c >= Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return 1;\r\n            return 0;\r\n        },\r\n        Greater: function (numberA, numberB){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.Compare(numberA, numberB) > 0;\r\n        },\r\n        GreaterOrEqual: function (numberA, numberB){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.Compare(numberA, numberB) >= 0;\r\n        },\r\n        Less: function (numberA, numberB){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.Compare(numberA, numberB) < 0;\r\n        },\r\n        LessOrEqual: function (numberA, numberB){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.Compare(numberA, numberB) <= 0;\r\n        },\r\n        CloseIntersections: function (intersectionPoint0, intersectionPoint1){\r\n            var c = Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(intersectionPoint0, intersectionPoint1);\r\n            return Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Point$$Point(c, c) < Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_IntersectionEpsilon() * Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_IntersectionEpsilon();\r\n        },\r\n        Sign: function (value){\r\n            if (value > Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return 1;\r\n            if (value < -Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return -1;\r\n            return 0;\r\n        },\r\n        SquareOfDistanceEpsilon$$: "System.Double",\r\n        get_SquareOfDistanceEpsilon: function (){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.squareOfDistanceEpsilon;\r\n        },\r\n        DistanceEpsilonPrecision$$: "System.Int32",\r\n        get_DistanceEpsilonPrecision: function (){\r\n            return 6;\r\n        },\r\n        IntersectionEpsilon$$: "System.Double",\r\n        get_IntersectionEpsilon: function (){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.distXEps;\r\n        },\r\n        set_IntersectionEpsilon: function (value){\r\n            Microsoft.Msagl.Core.Geometry.ApproximateComparer.distXEps = value;\r\n        },\r\n        Tolerance$$: "System.Double",\r\n        get_Tolerance: function (){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.tolerance;\r\n        },\r\n        set_Tolerance: function (value){\r\n            Microsoft.Msagl.Core.Geometry.ApproximateComparer.tolerance = value;\r\n        },\r\n        UserDefinedTolerance$$: "System.Double",\r\n        get_UserDefinedTolerance: function (){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.userDefinedTolerance;\r\n        },\r\n        set_UserDefinedTolerance: function (value){\r\n            Microsoft.Msagl.Core.Geometry.ApproximateComparer.userDefinedTolerance = value;\r\n        },\r\n        NumberOfDigitsToRound$$: "System.Int32",\r\n        get_NumberOfDigitsToRound: function (){\r\n            return Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_DistanceEpsilonPrecision();\r\n        },\r\n        Round$$Point: function (point){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(Microsoft.Msagl.Core.Geometry.ApproximateComparer.Round$$Double(point.get_X()), Microsoft.Msagl.Core.Geometry.ApproximateComparer.Round$$Double(point.get_Y()));\r\n        },\r\n        Round$$Point$$Int32: function (point, numberDigitsToRound){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(System.Math.Round$$Double$$Int32(point.get_X(), numberDigitsToRound), System.Math.Round$$Double$$Int32(point.get_Y(), numberDigitsToRound));\r\n        },\r\n        Round$$Double: function (value){\r\n            return System.Math.Round$$Double$$Int32(value, Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_NumberOfDigitsToRound());\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$ApproximateComparer);\r\nvar Microsoft$Msagl$Core$Geometry$Curves$RoundedRect = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Curves.RoundedRect",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.Geometry.Curves.ICurve"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.curve = null;\r\n            this.center = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.dirtyBounds = true;\r\n            this.cachedBounds = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            this._RadiusX = 0;\r\n            this._RadiusY = 0;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        RadiusX$$: "System.Double",\r\n        get_RadiusX: function (){\r\n            return this._RadiusX;\r\n        },\r\n        set_RadiusX: function (value){\r\n            this._RadiusX = value;\r\n        },\r\n        RadiusY$$: "System.Double",\r\n        get_RadiusY: function (){\r\n            return this._RadiusY;\r\n        },\r\n        set_RadiusY: function (value){\r\n            this._RadiusY = value;\r\n        },\r\n        ctor$$Rectangle$$Double$$Double: function (bounds, radiusX, radiusY){\r\n            this.curve = null;\r\n            this.center = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.dirtyBounds = true;\r\n            this.cachedBounds = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            this._RadiusX = 0;\r\n            this._RadiusY = 0;\r\n            System.Object.ctor.call(this);\r\n            this.set_RadiusX(radiusX);\r\n            this.set_RadiusY(radiusY);\r\n            this.curve = new Microsoft.Msagl.Core.Geometry.Curves.Curve.ctor$$Int32(8);\r\n            Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateRectangleWithRoundedCorners(this.curve, bounds.get_Width(), bounds.get_Height(), radiusX, radiusY, bounds.get_Center());\r\n        },\r\n        FitTo: function (target){\r\n            if (Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Rectangle$$Rectangle$$Double(target, this.get_BoundingBox(), Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_UserDefinedTolerance())){\r\n                return this.Clone();\r\n            }\r\n            return new Microsoft.Msagl.Core.Geometry.Curves.RoundedRect.ctor$$Rectangle$$Double$$Double(target, this.get_RadiusX(), this.get_RadiusY());\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            if (this.dirtyBounds){\r\n                this.cachedBounds = this.curve.get_BoundingBox();\r\n                this.dirtyBounds = false;\r\n            }\r\n            return this.cachedBounds;\r\n        },\r\n        ParStart$$: "System.Double",\r\n        get_ParStart: function (){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        ParEnd$$: "System.Double",\r\n        get_ParEnd: function (){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        Translate: function (delta){\r\n            this.curve.Translate(delta);\r\n            this.dirtyBounds = true;\r\n        },\r\n        ScaleFromOrigin: function (xScale, yScale){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        Clone: function (){\r\n            var newRect = new Microsoft.Msagl.Core.Geometry.Curves.RoundedRect.ctor();\r\n            newRect.set_RadiusX(this.get_RadiusX());\r\n            newRect.set_RadiusY(this.get_RadiusY());\r\n            newRect.curve = Cast(this.curve.Clone(), Microsoft.Msagl.Core.Geometry.Curves.Curve.ctor);\r\n            return newRect;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Curves$RoundedRect);\r\nvar Microsoft$Msagl$Core$Geometry$IntervalNode$1 = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.IntervalNode$1",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        cctor: function (TData){\r\n            Microsoft.Msagl.Core.Geometry.IntervalNode$1.GroupSplitThreshold = 2;\r\n        },\r\n        VisitTreeStatic: function (intervalNode, hitTest, hitInterval){\r\n            if (intervalNode.get_Interval().Intersects(hitInterval)){\r\n                if (hitTest(intervalNode.get_UserData()) == Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue){\r\n                    if (intervalNode.get_Left() != null){\r\n                        if (Microsoft.Msagl.Core.Geometry.IntervalNode$1.VisitTreeStatic(intervalNode.get_Left(), hitTest, hitInterval) == Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue && Microsoft.Msagl.Core.Geometry.IntervalNode$1.VisitTreeStatic(intervalNode.get_Right(), hitTest, hitInterval) == Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue){\r\n                            return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue;\r\n                        }\r\n                        return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Stop;\r\n                    }\r\n                    return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue;\r\n                }\r\n                return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Stop;\r\n            }\r\n            return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue;\r\n        },\r\n        CreateIntervalNodeOnEnumeration: function (nodes){\r\n            if (nodes == null)\r\n                return null;\r\n            var nodeList = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, nodes);\r\n            return Microsoft.Msagl.Core.Geometry.IntervalNode$1.CreateIntervalNodeOnListOfNodes(nodeList);\r\n        },\r\n        CreateIntervalNodeOnData: function (dataEnumeration, intervalDelegate){\r\n            if (dataEnumeration == null || intervalDelegate == null)\r\n                return null;\r\n            var nodeList = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(this.TData, Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, dataEnumeration, function (d){\r\n                return new Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor$$TData$$Interval(this.TData, d, intervalDelegate(d));\r\n            }));\r\n            return Microsoft.Msagl.Core.Geometry.IntervalNode$1.CreateIntervalNodeOnListOfNodes(nodeList);\r\n        },\r\n        CreateIntervalNodeOnListOfNodes: function (nodes){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(nodes, "nodes");\r\n            if (nodes.get_Count() == 0)\r\n                return null;\r\n            if (nodes.get_Count() == 1)\r\n                return nodes.get_Item$$Int32(0);\r\n            var b0 = nodes.get_Item$$Int32(0).get_Interval();\r\n            var seed0 = 1;\r\n            var seed1 = (function (){\r\n                var $1 = {\r\n                    Value: b0\r\n                };\r\n                var $2 = {\r\n                    Value: seed0\r\n                };\r\n                var $res = Microsoft.Msagl.Core.Geometry.IntervalNode$1.ChooseSeeds(nodes, $1, $2);\r\n                b0 = $1.Value;\r\n                seed0 = $2.Value;\r\n                return $res;\r\n            })();\r\n            var gr0 = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor);\r\n            var gr1 = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor);\r\n            gr0.Add(nodes.get_Item$$Int32(seed0));\r\n            gr1.Add(nodes.get_Item$$Int32(seed1));\r\n            var box0 = nodes.get_Item$$Int32(seed0).get_Interval();\r\n            var box1 = nodes.get_Item$$Int32(seed1).get_Interval();\r\n            (function (){\r\n                var $1 = {\r\n                    Value: box0\r\n                };\r\n                var $2 = {\r\n                    Value: box1\r\n                };\r\n                var $res = Microsoft.Msagl.Core.Geometry.IntervalNode$1.DivideNodes(nodes, seed0, seed1, gr0, gr1, $1, $2, 2);\r\n                box0 = $1.Value;\r\n                box1 = $2.Value;\r\n                return $res;\r\n            })();\r\n            var ret = (function (){\r\n                var $v4 = new Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor$$Int32(this.TData, nodes.get_Count());\r\n                $v4.set_Interval(new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(box0, box1));\r\n                $v4.set_Left(Microsoft.Msagl.Core.Geometry.IntervalNode$1.CreateIntervalNodeOnListOfNodes(gr0));\r\n                $v4.set_Right(Microsoft.Msagl.Core.Geometry.IntervalNode$1.CreateIntervalNodeOnListOfNodes(gr1));\r\n                return $v4;\r\n            })();\r\n            return ret;\r\n        },\r\n        ChooseSeeds: function (nodes, b0, seed0){\r\n            var area = new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(b0.Value, nodes.get_Item$$Int32(seed0.Value).get_Interval()).get_Length();\r\n            for (var i = 2; i < nodes.get_Count(); i++){\r\n                var area0 = new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(b0.Value, nodes.get_Item$$Int32(i).get_Interval()).get_Length();\r\n                if (area0 > area){\r\n                    seed0.Value = i;\r\n                    area = area0;\r\n                }\r\n            }\r\n            var seed1 = 0;\r\n            for (var i = 0; i < nodes.get_Count(); i++){\r\n                if (i != seed0.Value){\r\n                    seed1 = i;\r\n                    break;\r\n                }\r\n            }\r\n            area = new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(nodes.get_Item$$Int32(seed0.Value).get_Interval(), nodes.get_Item$$Int32(seed1).get_Interval()).get_Length();\r\n            for (var i = 0; i < nodes.get_Count(); i++){\r\n                if (i == seed0.Value)\r\n                    continue;\r\n                var area1 = new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(nodes.get_Item$$Int32(seed0.Value).get_Interval(), nodes.get_Item$$Int32(i).get_Interval()).get_Length();\r\n                if (area1 > area){\r\n                    seed1 = i;\r\n                    area = area1;\r\n                }\r\n            }\r\n            return seed1;\r\n        },\r\n        DivideNodes: function (nodes, seed0, seed1, gr0, gr1, box0, box1, groupSplitThreshold){\r\n            for (var i = 0; i < nodes.get_Count(); i++){\r\n                if (i == seed0 || i == seed1)\r\n                    continue;\r\n                var box0_ = new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(box0.Value, nodes.get_Item$$Int32(i).get_Interval());\r\n                var delta0 = box0_.get_Length() - box0.Value.get_Length();\r\n                var box1_ = new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(box1.Value, nodes.get_Item$$Int32(i).get_Interval());\r\n                var delta1 = box1_.get_Length() - box1.Value.get_Length();\r\n                if (gr0.get_Count() * groupSplitThreshold < gr1.get_Count()){\r\n                    gr0.Add(nodes.get_Item$$Int32(i));\r\n                    box0.Value = box0_;\r\n                }\r\n                else if (gr1.get_Count() * groupSplitThreshold < gr0.get_Count()){\r\n                    gr1.Add(nodes.get_Item$$Int32(i));\r\n                    box1.Value = box1_;\r\n                }\r\n                else if (delta0 < delta1){\r\n                    gr0.Add(nodes.get_Item$$Int32(i));\r\n                    box0.Value = box0_;\r\n                }\r\n                else if (delta1 < delta0){\r\n                    gr1.Add(nodes.get_Item$$Int32(i));\r\n                    box1.Value = box1_;\r\n                }\r\n                else if (box0.Value.get_Length() < box1.Value.get_Length()){\r\n                    gr0.Add(nodes.get_Item$$Int32(i));\r\n                    box0.Value = box0_;\r\n                }\r\n                else {\r\n                    gr1.Add(nodes.get_Item$$Int32(i));\r\n                    box1.Value = box1_;\r\n                }\r\n            }\r\n        },\r\n        TraverseHierarchy: function (node, visitor){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(node, "node");\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(visitor, "visitor");\r\n            visitor(node);\r\n            if (node.get_Left() != null)\r\n                Microsoft.Msagl.Core.Geometry.IntervalNode$1.TraverseHierarchy(node.get_Left(), visitor);\r\n            if (node.get_Right() != null)\r\n                Microsoft.Msagl.Core.Geometry.IntervalNode$1.TraverseHierarchy(node.get_Right(), visitor);\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (TData){\r\n            this.TData = TData;\r\n            this.left = null;\r\n            this.right = null;\r\n            this.interval = null;\r\n            this._Count = 0;\r\n            this._UserData = null;\r\n            this._Parent = null;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Count$$: "System.Int32",\r\n        get_Count: function (){\r\n            return this._Count;\r\n        },\r\n        set_Count: function (value){\r\n            this._Count = value;\r\n        },\r\n        ctor$$TData$$Interval: function (TData, data, rect){\r\n            this.TData = TData;\r\n            this.left = null;\r\n            this.right = null;\r\n            this.interval = null;\r\n            this._Count = 0;\r\n            this._UserData = null;\r\n            this._Parent = null;\r\n            System.Object.ctor.call(this);\r\n            this.set_UserData(data);\r\n            this.set_Interval(rect);\r\n            this.set_Count(1);\r\n        },\r\n        ctor$$Int32: function (TData, count){\r\n            this.TData = TData;\r\n            this.left = null;\r\n            this.right = null;\r\n            this.interval = null;\r\n            this._Count = 0;\r\n            this._UserData = null;\r\n            this._Parent = null;\r\n            System.Object.ctor.call(this);\r\n            this.set_Count(count);\r\n        },\r\n        Interval$$: "Microsoft.Msagl.Layout.LargeGraphLayout.Interval",\r\n        get_Interval: function (){\r\n            return this.interval;\r\n        },\r\n        set_Interval: function (value){\r\n            this.interval = value;\r\n        },\r\n        IsLeaf$$: "System.Boolean",\r\n        get_IsLeaf: function (){\r\n            return this.left == null;\r\n        },\r\n        Left$$: "Microsoft.Msagl.Core.Geometry.IntervalNode`1[[`0]]",\r\n        get_Left: function (){\r\n            return this.left;\r\n        },\r\n        set_Left: function (value){\r\n            if (this.left != null && this.left.get_Parent() == this)\r\n                this.left.set_Parent(null);\r\n            this.left = value;\r\n            if (this.left != null)\r\n                this.left.set_Parent(this);\r\n        },\r\n        Right$$: "Microsoft.Msagl.Core.Geometry.IntervalNode`1[[`0]]",\r\n        get_Right: function (){\r\n            return this.right;\r\n        },\r\n        set_Right: function (value){\r\n            if (this.right != null && this.right.get_Parent() == this)\r\n                this.right.set_Parent(null);\r\n            this.right = value;\r\n            if (this.right != null)\r\n                this.right.set_Parent(this);\r\n        },\r\n        UserData$$: "`0",\r\n        get_UserData: function (){\r\n            return this._UserData;\r\n        },\r\n        set_UserData: function (value){\r\n            this._UserData = value;\r\n        },\r\n        Parent$$: "Microsoft.Msagl.Core.Geometry.IntervalNode`1[[`0]]",\r\n        get_Parent: function (){\r\n            return this._Parent;\r\n        },\r\n        set_Parent: function (value){\r\n            this._Parent = value;\r\n        },\r\n        IsLeftChild$$: "System.Boolean",\r\n        get_IsLeftChild: function (){\r\n            return this.Equals$$Object(this.get_Parent().get_Left());\r\n        },\r\n        FirstHitNode$$Double$$Func$3: function (point, hitTestFordoubleDelegate){\r\n            if (this.interval.Contains(point)){\r\n                if (this.get_IsLeaf()){\r\n                    if (hitTestFordoubleDelegate != null){\r\n                        return hitTestFordoubleDelegate(point, this.get_UserData()) == Microsoft.Msagl.Core.Geometry.HitTestBehavior.Stop ? this : null;\r\n                    }\r\n                    return this;\r\n                }\r\n                return (this.get_Left().FirstHitNode$$Double$$Func$3(point, hitTestFordoubleDelegate) != null ? this.get_Left().FirstHitNode$$Double$$Func$3(point, hitTestFordoubleDelegate) : this.get_Right().FirstHitNode$$Double$$Func$3(point, hitTestFordoubleDelegate));\r\n            }\r\n            return null;\r\n        },\r\n        FirstIntersectedNode: function (r){\r\n            if (r.Intersects(this.interval)){\r\n                if (this.get_IsLeaf())\r\n                    return this;\r\n                return (this.get_Left().FirstIntersectedNode(r) != null ? this.get_Left().FirstIntersectedNode(r) : this.get_Right().FirstIntersectedNode(r));\r\n            }\r\n            return null;\r\n        },\r\n        FirstHitNode$$Double: function (point){\r\n            if (this.interval.Contains(point)){\r\n                if (this.get_IsLeaf())\r\n                    return this;\r\n                return (this.get_Left().FirstHitNode$$Double(point) != null ? this.get_Left().FirstHitNode$$Double(point) : this.get_Right().FirstHitNode$$Double(point));\r\n            }\r\n            return null;\r\n        },\r\n        AllHitItems$$Interval$$Func$2: function (intervalPar, hitTestAccept){\r\n            var $yield = [];\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor);\r\n            stack.Push(this);\r\n            while (stack.get_Count() > 0){\r\n                var node = stack.Pop();\r\n                if (node.get_Interval().Intersects(intervalPar)){\r\n                    if (node.get_IsLeaf()){\r\n                        if ((null == hitTestAccept) || hitTestAccept(node.get_UserData())){\r\n                            $yield.push(node.get_UserData());\r\n                        }\r\n                    }\r\n                    else {\r\n                        stack.Push(node.left);\r\n                        stack.Push(node.right);\r\n                    }\r\n                }\r\n            }\r\n            return $yield;\r\n        },\r\n        AllHitItems$$Double: function (point){\r\n            var $yield = [];\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor);\r\n            stack.Push(this);\r\n            while (stack.get_Count() > 0){\r\n                var node = stack.Pop();\r\n                if (node.get_Interval().Contains(point)){\r\n                    if (node.get_IsLeaf())\r\n                        $yield.push(node.get_UserData());\r\n                    else {\r\n                        stack.Push(node.left);\r\n                        stack.Push(node.right);\r\n                    }\r\n                }\r\n            }\r\n            return $yield;\r\n        },\r\n        Clone: function (){\r\n            var ret = (function (){\r\n                var $v3 = new Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor$$Int32(this.TData, this.get_Count());\r\n                $v3.set_UserData(this.get_UserData());\r\n                $v3.set_Interval(this.get_Interval());\r\n                return $v3;\r\n            }).call(this);\r\n            if (this.get_Left() != null)\r\n                ret.set_Left(this.get_Left().Clone());\r\n            if (this.get_Right() != null)\r\n                ret.set_Right(this.get_Right().Clone());\r\n            return ret;\r\n        },\r\n        GetNodeItemsIntersectingInterval: function (intervalPar){\r\n            return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, this.TData, this.GetLeafIntervalNodesIntersectingInterval(intervalPar), $CreateAnonymousDelegate(this, function (node){\r\n                return node.get_UserData();\r\n            }));\r\n        },\r\n        GetLeafIntervalNodesIntersectingInterval: function (intervalPar){\r\n            var $yield = [];\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor);\r\n            stack.Push(this);\r\n            while (stack.get_Count() > 0){\r\n                var node = stack.Pop();\r\n                if (node.get_Interval().Intersects(intervalPar)){\r\n                    if (node.get_IsLeaf()){\r\n                        $yield.push(node);\r\n                    }\r\n                    else {\r\n                        stack.Push(node.left);\r\n                        stack.Push(node.right);\r\n                    }\r\n                }\r\n            }\r\n            return $yield;\r\n        },\r\n        GetAllLeaves: function (){\r\n            return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, this.TData, this.GetAllLeafNodes(), $CreateAnonymousDelegate(this, function (n){\r\n                return n.get_UserData();\r\n            }));\r\n        },\r\n        GetAllLeafNodes: function (){\r\n            return this.EnumIntervalNodes(true);\r\n        },\r\n        EnumIntervalNodes: function (leafOnly){\r\n            var $yield = [];\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor);\r\n            stack.Push(this);\r\n            while (stack.get_Count() > 0){\r\n                var node = stack.Pop();\r\n                if (node.get_IsLeaf() || !leafOnly){\r\n                    $yield.push(node);\r\n                }\r\n                if (!node.get_IsLeaf()){\r\n                    stack.Push(node.left);\r\n                    stack.Push(node.right);\r\n                }\r\n            }\r\n            return $yield;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$IntervalNode$1);\r\nvar Microsoft$Msagl$Core$Geometry$IntervalRTree$1 = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.IntervalRTree$1",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        GetNodeRects: function (nodes){\r\n            return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.Collections.Generic.KeyValuePair$2.ctor, Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, nodes, function (v){\r\n                return new Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor$$TData$$Interval(this.TData, v.get_Value(), v.get_Key());\r\n            });\r\n        },\r\n        AddNodeToTreeRecursive: function (newNode, existingNode){\r\n            if (existingNode.get_IsLeaf()){\r\n                existingNode.set_Left(new Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor$$TData$$Interval(this.TData, existingNode.get_UserData(), existingNode.get_Interval()));\r\n                existingNode.set_Right(newNode);\r\n                existingNode.set_Count(2);\r\n                existingNode.set_UserData(Default(this.TData));\r\n            }\r\n            else {\r\n                existingNode.set_Count(existingNode.get_Count() + 1);\r\n                var leftBox;\r\n                var rightBox;\r\n                if (2 * existingNode.get_Left().get_Count() < existingNode.get_Right().get_Count()){\r\n                    Microsoft.Msagl.Core.Geometry.IntervalRTree$1.AddNodeToTreeRecursive(newNode, existingNode.get_Left());\r\n                    existingNode.get_Left().set_Interval(new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(existingNode.get_Left().get_Interval(), newNode.get_Interval()));\r\n                }\r\n                else if (2 * existingNode.get_Right().get_Count() < existingNode.get_Left().get_Count()){\r\n                    Microsoft.Msagl.Core.Geometry.IntervalRTree$1.AddNodeToTreeRecursive(newNode, existingNode.get_Right());\r\n                    existingNode.get_Right().set_Interval(new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(existingNode.get_Right().get_Interval(), newNode.get_Interval()));\r\n                }\r\n                else {\r\n                    leftBox = new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(existingNode.get_Left().get_Interval(), newNode.get_Interval());\r\n                    var delLeft = leftBox.get_Length() - existingNode.get_Left().get_Interval().get_Length();\r\n                    rightBox = new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(existingNode.get_Right().get_Interval(), newNode.get_Interval());\r\n                    var delRight = rightBox.get_Length() - existingNode.get_Right().get_Interval().get_Length();\r\n                    if (delLeft < delRight){\r\n                        Microsoft.Msagl.Core.Geometry.IntervalRTree$1.AddNodeToTreeRecursive(newNode, existingNode.get_Left());\r\n                        existingNode.get_Left().set_Interval(leftBox);\r\n                    }\r\n                    else if (delLeft > delRight){\r\n                        Microsoft.Msagl.Core.Geometry.IntervalRTree$1.AddNodeToTreeRecursive(newNode, existingNode.get_Right());\r\n                        existingNode.get_Right().set_Interval(rightBox);\r\n                    }\r\n                    else {\r\n                        if (leftBox.get_Length() < rightBox.get_Length()){\r\n                            Microsoft.Msagl.Core.Geometry.IntervalRTree$1.AddNodeToTreeRecursive(newNode, existingNode.get_Left());\r\n                            existingNode.get_Left().set_Interval(leftBox);\r\n                        }\r\n                        else {\r\n                            Microsoft.Msagl.Core.Geometry.IntervalRTree$1.AddNodeToTreeRecursive(newNode, existingNode.get_Right());\r\n                            existingNode.get_Right().set_Interval(rightBox);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            existingNode.set_Interval(new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(existingNode.get_Left().get_Interval(), existingNode.get_Right().get_Interval()));\r\n        },\r\n        TreeIsCorrect: function (node){\r\n            if (node == null)\r\n                return true;\r\n            var ret = node.get_Left() != null && node.get_Right() != null || node.get_Left() == null && node.get_Right() == null;\r\n            if (!ret)\r\n                return false;\r\n            return Microsoft.Msagl.Core.Geometry.IntervalRTree$1.TreeIsCorrect(node.get_Left()) && Microsoft.Msagl.Core.Geometry.IntervalRTree$1.TreeIsCorrect(node.get_Right());\r\n        },\r\n        UpdateParent: function (parent){\r\n            for (var node = parent.get_Parent(); node != null; node = node.get_Parent()){\r\n                node.set_Count(node.get_Count() - 1);\r\n                node.set_Interval(new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(node.get_Left().get_Interval(), node.get_Right().get_Interval()));\r\n            }\r\n        },\r\n        TransferFromSibling: function (parent, sibling){\r\n            parent.set_UserData(sibling.get_UserData());\r\n            parent.set_Left(sibling.get_Left());\r\n            parent.set_Right(sibling.get_Right());\r\n            parent.set_Count(parent.get_Count() - 1);\r\n            parent.set_Interval(sibling.get_Interval());\r\n        },\r\n        RebuildUnderNodeWithoutLeaf: function (nodeForRebuild, leaf){\r\n            var newNode = Microsoft.Msagl.Core.Geometry.IntervalNode$1.CreateIntervalNodeOnEnumeration(System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, nodeForRebuild.GetAllLeafNodes(), function (n){\r\n                return !(n.Equals$$Object(leaf));\r\n            }));\r\n            nodeForRebuild.set_Count(newNode.get_Count());\r\n            nodeForRebuild.set_Left(newNode.get_Left());\r\n            nodeForRebuild.set_Right(newNode.get_Right());\r\n            nodeForRebuild.set_Interval(new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Interval$$Interval(newNode.get_Left().interval, newNode.get_Right().interval));\r\n        },\r\n        FindTopUnbalancedNode: function (node){\r\n            for (var parent = node.get_Parent(); parent != null; parent = parent.get_Parent())\r\n                if (!Microsoft.Msagl.Core.Geometry.IntervalRTree$1.Balanced(parent))\r\n                    return parent;\r\n            return null;\r\n        },\r\n        Balanced: function (rectangleNode){\r\n            return 2 * rectangleNode.get_Left().get_Count() >= rectangleNode.get_Right().get_Count() && 2 * rectangleNode.get_Right().get_Count() >= rectangleNode.get_Left().get_Count();\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$IEnumerable$1: function (TData, rectsAndData){\r\n            this.TData = TData;\r\n            this.rootNode = null;\r\n            System.Object.ctor.call(this);\r\n            this.rootNode = Microsoft.Msagl.Core.Geometry.IntervalNode$1.CreateIntervalNodeOnEnumeration(Microsoft.Msagl.Core.Geometry.IntervalRTree$1.GetNodeRects(rectsAndData));\r\n        },\r\n        RootNode$$: "Microsoft.Msagl.Core.Geometry.IntervalNode`1[[`0]]",\r\n        get_RootNode: function (){\r\n            return this.rootNode;\r\n        },\r\n        set_RootNode: function (value){\r\n            this.rootNode = value;\r\n        },\r\n        ctor$$IntervalNode$1: function (TData, rootNode){\r\n            this.TData = TData;\r\n            this.rootNode = null;\r\n            System.Object.ctor.call(this);\r\n            this.rootNode = rootNode;\r\n        },\r\n        ctor: function (TData){\r\n            this.TData = TData;\r\n            this.rootNode = null;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Count$$: "System.Int32",\r\n        get_Count: function (){\r\n            return this.rootNode == null ? 0 : this.rootNode.get_Count();\r\n        },\r\n        Add$$Interval$$TData: function (key, value){\r\n            this.Add$$IntervalNode$1(new Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor$$TData$$Interval(this.TData, value, key));\r\n        },\r\n        Add$$IntervalNode$1: function (node){\r\n            if (this.rootNode == null)\r\n                this.rootNode = node;\r\n            else if (this.get_Count() <= 2)\r\n                this.rootNode = Microsoft.Msagl.Core.Geometry.IntervalNode$1.CreateIntervalNodeOnEnumeration(System.Linq.Enumerable.Concat$1(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, this.rootNode.GetAllLeafNodes(), [node]));\r\n            else\r\n                Microsoft.Msagl.Core.Geometry.IntervalRTree$1.AddNodeToTreeRecursive(node, this.rootNode);\r\n        },\r\n        Rebuild: function (){\r\n            this.rootNode = Microsoft.Msagl.Core.Geometry.IntervalNode$1.CreateIntervalNodeOnEnumeration(this.rootNode.GetAllLeafNodes());\r\n        },\r\n        GetAllLeaves: function (){\r\n            return this.rootNode != null && this.get_Count() > 0 ? this.rootNode.GetAllLeaves() : new Array(0);\r\n        },\r\n        GetAllIntersecting: function (queryRegion){\r\n            return this.rootNode == null || this.get_Count() == 0 ? new Array(0) : this.rootNode.GetNodeItemsIntersectingInterval(queryRegion);\r\n        },\r\n        IsIntersecting: function (queryRegion){\r\n            return System.Linq.Enumerable.Any$1$$IEnumerable$1(this.TData, this.GetAllIntersecting(queryRegion));\r\n        },\r\n        Contains: function (rectangle, userData){\r\n            if (this.rootNode == null)\r\n                return false;\r\n            return System.Linq.Enumerable.Any$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, this.rootNode.GetLeafIntervalNodesIntersectingInterval(rectangle), $CreateAnonymousDelegate(this, function (node){\r\n                return node.get_UserData().Equals$$Object(userData);\r\n            }));\r\n        },\r\n        Remove: function (rectangle, userData){\r\n            if (this.rootNode == null){\r\n                return Default(this.TData);\r\n            }\r\n            var ret = System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor, this.rootNode.GetLeafIntervalNodesIntersectingInterval(rectangle), $CreateAnonymousDelegate(this, function (node){\r\n                return node.get_UserData().Equals$$Object(userData);\r\n            }));\r\n            if (ret == null)\r\n                return Default(this.TData);\r\n            if (this.get_RootNode().get_Count() == 1)\r\n                this.set_RootNode(null);\r\n            else\r\n                this.RemoveLeaf(ret);\r\n            return ret.get_UserData();\r\n        },\r\n        RemoveLeaf: function (leaf){\r\n            var unbalancedNode = Microsoft.Msagl.Core.Geometry.IntervalRTree$1.FindTopUnbalancedNode(leaf);\r\n            if (unbalancedNode != null){\r\n                Microsoft.Msagl.Core.Geometry.IntervalRTree$1.RebuildUnderNodeWithoutLeaf(unbalancedNode, leaf);\r\n                Microsoft.Msagl.Core.Geometry.IntervalRTree$1.UpdateParent(unbalancedNode);\r\n            }\r\n            else {\r\n                var parent = leaf.get_Parent();\r\n                if (parent == null){\r\n                    this.rootNode = new Microsoft.Msagl.Core.Geometry.IntervalNode$1.ctor(this.TData);\r\n                }\r\n                else {\r\n                    Microsoft.Msagl.Core.Geometry.IntervalRTree$1.TransferFromSibling(parent, leaf.get_IsLeftChild() ? parent.get_Right() : parent.get_Left());\r\n                    Microsoft.Msagl.Core.Geometry.IntervalRTree$1.UpdateParent(parent);\r\n                }\r\n            }\r\n        },\r\n        Clean: function (){\r\n            this.set_RootNode(null);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$IntervalRTree$1);\r\nvar Microsoft$Msagl$Core$Geometry$RectangleNodeUtils = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.RectangleNodeUtils",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        CrossRectangleNodes$2: function (TA, TB, a, b, action){\r\n            if (!a.rectangle.Intersects(b.rectangle))\r\n                return;\r\n            if (a.get_Left() == null){\r\n                if (b.get_Left() == null)\r\n                    action(a.get_UserData(), b.get_UserData());\r\n                else {\r\n                    Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(TA, TB, a, b.get_Left(), action);\r\n                    Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(TA, TB, a, b.get_Right(), action);\r\n                }\r\n            }\r\n            else {\r\n                if (b.get_Left() != null){\r\n                    Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(TA, TB, a.get_Left(), b.get_Left(), action);\r\n                    Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(TA, TB, a.get_Left(), b.get_Right(), action);\r\n                    Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(TA, TB, a.get_Right(), b.get_Left(), action);\r\n                    Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(TA, TB, a.get_Right(), b.get_Right(), action);\r\n                }\r\n                else {\r\n                    Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(TA, TB, a.get_Left(), b, action);\r\n                    Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(TA, TB, a.get_Right(), b, action);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$RectangleNodeUtils);\r\nvar Microsoft$Msagl$Core$GraphAlgorithms$MinimumSpanningTreeByPrim = {\r\n    fullname: "Microsoft.Msagl.Core.GraphAlgorithms.MinimumSpanningTreeByPrim",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (graph, weight, root){\r\n            this.graph = null;\r\n            this.weight = null;\r\n            this.root = 0;\r\n            this.q = null;\r\n            this.treeNodes = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.Int32.ctor);\r\n            this.hedgehog = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, Microsoft.Msagl.Core.GraphAlgorithms.IEdge.ctor);\r\n            System.Object.ctor.call(this);\r\n            this.graph = graph;\r\n            this.weight = weight;\r\n            this.root = root;\r\n            this.q = new Microsoft.Msagl.Core.DataStructures.BinaryHeapPriorityQueue.ctor(graph.get_NodeCount());\r\n        },\r\n        NodeIsInTree: function (i){\r\n            return this.treeNodes.Contains$$T(i);\r\n        },\r\n        GetTreeEdges: function (){\r\n            var ret = new System.Collections.Generic.List$1.ctor$$Int32(Microsoft.Msagl.Core.GraphAlgorithms.IEdge.ctor, this.graph.get_NodeCount() - 1);\r\n            this.Init();\r\n            while (ret.get_Count() < this.graph.get_NodeCount() - 1 && this.q.get_Count() > 0)\r\n                this.AddEdgeToTree(ret);\r\n            return ret;\r\n        },\r\n        AddEdgeToTree: function (ret){\r\n            var v = this.q.Dequeue();\r\n            var e = this.hedgehog.get_Item$$TKey(v);\r\n            this.treeNodes.Insert(v);\r\n            ret.Add(e);\r\n            this.UpdateOutEdgesOfV(v);\r\n            this.UpdateInEdgesOfV(v);\r\n        },\r\n        UpdateOutEdgesOfV: function (v){\r\n            var $it4 = this.graph.OutEdges(v).GetEnumerator();\r\n            while ($it4.MoveNext()){\r\n                var outEdge = $it4.get_Current();\r\n                var u = outEdge.get_Target();\r\n                if (this.NodeIsInTree(u))\r\n                    continue;\r\n                var oldEdge;\r\n                if ((function (){\r\n                    var $1 = {\r\n                        Value: oldEdge\r\n                    };\r\n                    var $res = this.hedgehog.TryGetValue(u, $1);\r\n                    oldEdge = $1.Value;\r\n                    return $res;\r\n                }).call(this)){\r\n                    var oldWeight = this.weight(oldEdge);\r\n                    var newWeight = this.weight(outEdge);\r\n                    if (newWeight < oldWeight){\r\n                        this.q.DecreasePriority(u, newWeight);\r\n                        this.hedgehog.set_Item$$TKey(u, outEdge);\r\n                    }\r\n                }\r\n                else {\r\n                    this.q.Enqueue(u, this.weight(outEdge));\r\n                    this.hedgehog.set_Item$$TKey(u, outEdge);\r\n                }\r\n            }\r\n        },\r\n        UpdateInEdgesOfV: function (v){\r\n            var $it5 = this.graph.InEdges(v).GetEnumerator();\r\n            while ($it5.MoveNext()){\r\n                var inEdge = $it5.get_Current();\r\n                var u = inEdge.get_Source();\r\n                if (this.NodeIsInTree(u))\r\n                    continue;\r\n                var oldEdge;\r\n                if ((function (){\r\n                    var $1 = {\r\n                        Value: oldEdge\r\n                    };\r\n                    var $res = this.hedgehog.TryGetValue(u, $1);\r\n                    oldEdge = $1.Value;\r\n                    return $res;\r\n                }).call(this)){\r\n                    var oldWeight = this.weight(oldEdge);\r\n                    var newWeight = this.weight(inEdge);\r\n                    if (newWeight < oldWeight){\r\n                        this.q.DecreasePriority(u, newWeight);\r\n                        this.hedgehog.set_Item$$TKey(u, inEdge);\r\n                    }\r\n                }\r\n                else {\r\n                    this.q.Enqueue(u, this.weight(inEdge));\r\n                    this.hedgehog.set_Item$$TKey(u, inEdge);\r\n                }\r\n            }\r\n        },\r\n        Init: function (){\r\n            this.treeNodes.Insert(this.root);\r\n            var $it6 = this.graph.OutEdges(this.root).GetEnumerator();\r\n            while ($it6.MoveNext()){\r\n                var outEdge = $it6.get_Current();\r\n                var w = this.weight(outEdge);\r\n                this.q.Enqueue(outEdge.get_Target(), w);\r\n                this.hedgehog.set_Item$$TKey(outEdge.get_Target(), outEdge);\r\n            }\r\n            var $it7 = this.graph.InEdges(this.root).GetEnumerator();\r\n            while ($it7.MoveNext()){\r\n                var inEdge = $it7.get_Current();\r\n                var w = this.weight(inEdge);\r\n                this.q.Enqueue(inEdge.get_Source(), w);\r\n                this.hedgehog.set_Item$$TKey(inEdge.get_Source(), inEdge);\r\n            }\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$GraphAlgorithms$MinimumSpanningTreeByPrim);\r\nvar Microsoft$Msagl$Core$Layout$IObstacle = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.IObstacle",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Interface"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$IObstacle);\r\nvar Microsoft$Msagl$Core$Layout$LayoutChangeEventArgs = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.LayoutChangeEventArgs",\r\n    baseTypeName: "System.EventArgs",\r\n    staticDefinition: {\r\n        cctor: function (){\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.DataBeforeChange = null;\r\n            this.DataAfterChange = null;\r\n            System.EventArgs.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$LayoutChangeEventArgs);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$ConjugateGradient$SparseMatrix = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        op_Multiply$$SparseMatrix$$Vector: function (m, vec){\r\n            if (vec.array.length < m.get_NumCol())\r\n                throw $CreateException(new System.ArgumentException.ctor$$String("vector must have as many entries as the matrix has columns"), new Error());\r\n            var result = new Float64Array(m.get_NumRow());\r\n            for (var row = 0; row < m.get_NumRow(); row++){\r\n                var startPos = m.row_ptr[row];\r\n                var endPos = m.row_ptr[row + 1];\r\n                for (var i = startPos; i < endPos; i++){\r\n                    var columnIndex = m.col_ind[i];\r\n                    result[row] += vec.array[columnIndex] * m.values[i];\r\n                }\r\n            }\r\n            return new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(result);\r\n        },\r\n        op_Multiply$$SparseMatrix$$Double$Array: function (m, vec){\r\n            return (Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.op_Multiply$$SparseMatrix$$Vector(m, new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(vec))).array;\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$Double$Array$$Int32$Array$$Int32$Array$$Int32: function (valuesFlat, columnIndices, rowPointers, numberColumns){\r\n            this.values = null;\r\n            this.col_ind = null;\r\n            this.row_ptr = null;\r\n            this.numRow = 0;\r\n            this._NumCol = 0;\r\n            System.Object.ctor.call(this);\r\n            this.values = valuesFlat;\r\n            this.col_ind = columnIndices;\r\n            this.row_ptr = rowPointers;\r\n            this.set_NumCol(numberColumns);\r\n        },\r\n        Values: function (){\r\n            return this.values;\r\n        },\r\n        ColInd: function (){\r\n            return this.col_ind;\r\n        },\r\n        RowPtr: function (){\r\n            return this.row_ptr;\r\n        },\r\n        NumRow$$: "System.Int32",\r\n        get_NumRow: function (){\r\n            return this.numRow;\r\n        },\r\n        set_NumRow: function (value){\r\n            this.numRow = value;\r\n        },\r\n        NumCol$$: "System.Int32",\r\n        get_NumCol: function (){\r\n            return this._NumCol;\r\n        },\r\n        set_NumCol: function (value){\r\n            this._NumCol = value;\r\n        },\r\n        ctor$$Int32$$Int32$$Int32: function (numValues, numRow, numCol){\r\n            this.values = null;\r\n            this.col_ind = null;\r\n            this.row_ptr = null;\r\n            this.numRow = 0;\r\n            this._NumCol = 0;\r\n            System.Object.ctor.call(this);\r\n            this.values = new Float64Array(numValues);\r\n            this.col_ind = new Int32Array(numValues);\r\n            this.row_ptr = new Int32Array(numRow + 1);\r\n            this.set_NumRow(numRow);\r\n            this.set_NumCol(numCol);\r\n        },\r\n        DiagonalPreconditioner: function (){\r\n            var result = new Float64Array(this.get_NumRow());\r\n            for (var row = 0; row < this.get_NumRow(); row++){\r\n                var startPos = this.row_ptr[row];\r\n                var endPos = this.row_ptr[row + 1];\r\n                for (var i = startPos; i < endPos; i++){\r\n                    var columnIndex = this.col_ind[i];\r\n                    if (row == columnIndex && this.values[i] != 0){\r\n                        result[row] = 1 / this.values[i];\r\n                    }\r\n                }\r\n            }\r\n            return new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(result);\r\n        },\r\n        GetFullMatrix: function (){\r\n            throw $CreateException(new System.NotSupportedException.ctor$$String("Multi-dimensional arrays are not supported"), new Error());\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$ConjugateGradient$SparseMatrix);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$ConjugateGradient$LinearSystemSolver = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        SolveConjugateGradient$$SparseMatrix$$Vector$$Vector$$Int32$$Double: function (A, b, x, iMax, epsilon){\r\n            var r = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Subtraction(b, (Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.op_Multiply$$SparseMatrix$$Vector(A, x)));\r\n            var d = r.Clone();\r\n            var deltaNew = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Vector$$Vector(r, r);\r\n            var normRes = System.Math.Sqrt(deltaNew) / A.get_NumRow();\r\n            var normRes0 = normRes;\r\n            var i = 0;\r\n            while ((i++) < iMax && normRes > epsilon * normRes0){\r\n                var q = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.op_Multiply$$SparseMatrix$$Vector(A, d);\r\n                var alpha = deltaNew / (Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Vector$$Vector(d, q));\r\n                x.Add(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Double$$Vector(alpha, d));\r\n                r.Sub(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Double$$Vector(alpha, q));\r\n                var deltaOld = deltaNew;\r\n                deltaNew = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Vector$$Vector(r, r);\r\n                normRes = System.Math.Sqrt(deltaNew) / A.get_NumRow();\r\n                var beta = deltaNew / deltaOld;\r\n                d = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Addition(r, Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Double$$Vector(beta, d));\r\n            }\r\n            return x;\r\n        },\r\n        SolvePrecondConjugateGradient$$SparseMatrix$$Vector$$Vector$$Int32$$Double: function (A, b, x, iMax, epsilon){\r\n            var Minv = A.DiagonalPreconditioner();\r\n            var r = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Subtraction(b, (Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.op_Multiply$$SparseMatrix$$Vector(A, x)));\r\n            var d = Minv.CompProduct(r);\r\n            var deltaNew = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Vector$$Vector(r, d);\r\n            var normRes = System.Math.Sqrt(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Vector$$Vector(r, r)) / A.get_NumRow();\r\n            var normRes0 = normRes;\r\n            var i = 0;\r\n            while ((i++) < iMax && normRes > epsilon * normRes0){\r\n                var q = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.op_Multiply$$SparseMatrix$$Vector(A, d);\r\n                var alpha = deltaNew / (Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Vector$$Vector(d, q));\r\n                x.Add(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Double$$Vector(alpha, d));\r\n                r.Sub(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Double$$Vector(alpha, q));\r\n                var s = Minv.CompProduct(r);\r\n                var deltaOld = deltaNew;\r\n                normRes = System.Math.Sqrt(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Vector$$Vector(r, r)) / A.get_NumRow();\r\n                deltaNew = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Vector$$Vector(r, s);\r\n                var beta = deltaNew / deltaOld;\r\n                d = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Addition(s, Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.op_Multiply$$Double$$Vector(beta, d));\r\n            }\r\n            return x;\r\n        },\r\n        SolveConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double: function (A, b, x, iMax, epsilon){\r\n            return Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolveConjugateGradient$$SparseMatrix$$Vector$$Vector$$Int32$$Double(A, new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(b), new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(x.Clone() instanceof Float64Array || x.Clone() == null ? x.Clone() : (function (){\r\n                throw new Error("InvalidCastException");\r\n            }\r\n            ())), iMax, epsilon).array;\r\n        },\r\n        SolvePrecondConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double: function (A, b, x, iMax, epsilon){\r\n            var clone = new Float64Array(x.length);\r\n            System.Array.Copy(x, 0, clone, 0, x.length);\r\n            return Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolvePrecondConjugateGradient$$SparseMatrix$$Vector$$Vector$$Int32$$Double(A, new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(b), new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(clone), iMax, epsilon).array;\r\n        },\r\n        TestConjugateGradientMethod: function (){\r\n            var values = new Float64Array([4, 1, 1, 3]);\r\n            var col_ind = new Int32Array([0, 1, 0, 1]);\r\n            var row_ptr = new Int32Array([0, 2, 4]);\r\n            var b = new Float64Array([1, 2]);\r\n            var xStart = new Float64Array([2, 1]);\r\n            var A = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.ctor$$Double$Array$$Int32$Array$$Int32$Array$$Int32(values, col_ind, row_ptr, 2);\r\n            var res = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolveConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double(A, b, xStart, 1000, 0.0001);\r\n            System.Console.WriteLine$$String$$Object$$Object("Solution: x: {0}, y={1}", res[0], res[1]);\r\n            res = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolvePrecondConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double(A, b, xStart, 1000, 0.0001);\r\n            System.Console.WriteLine$$String$$Object$$Object("SolutionPreconditioned: x: {0}, y={1}", res[0], res[1]);\r\n        },\r\n        TestConjugateGradientMethod2: function (){\r\n            var values = new Float64Array([4, 1, 1, 16, 1, 1, 64, 1, 1, 256, 1, 1, 1024, 1, 1, 4096, 1, 1, 16384, 1, 1, 65536, 1, 1, 262144, 1, 1, 1048576]);\r\n            var colInd = new Int32Array([0, 1, 0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6, 5, 6, 7, 6, 7, 8, 7, 8, 9, 8, 9]);\r\n            var rowPtr = new Int32Array([0, 2, 5, 8, 11, 14, 17, 20, 23, 26, 28]);\r\n            var A = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.ctor$$Double$Array$$Int32$Array$$Int32$Array$$Int32(values, colInd, rowPtr, rowPtr.length - 1);\r\n            var b = new Float64Array([5, 18, 66, 258, 1026, 4098, 16386, 65538, 262146, 1048577]);\r\n            var result1 = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolvePrecondConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double(A, b, new Float64Array(10), 1000, 1E-06);\r\n            var res = System.Linq.Enumerable.Aggregate$2$$IEnumerable$1$$TAccumulate$$Func$3(System.Double.ctor, System.String.ctor, result1, "", function (s, t){\r\n                return System.String.Format$$String$$Object$$Object("{0},\\t{1}", s, t);\r\n            });\r\n            System.Console.WriteLine$$String(res);\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$ConjugateGradient$LinearSystemSolver);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$ConjugateGradient$Vector = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        op_Subtraction: function (a, b){\r\n            var res = new Float64Array(a.array.length);\r\n            for (var i = 0; i < a.array.length; i++){\r\n                res[i] = a.array[i] - b.array[i];\r\n            }\r\n            return new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(res);\r\n        },\r\n        op_Addition: function (a, b){\r\n            var res = new Float64Array(a.array.length);\r\n            for (var i = 0; i < a.array.length; i++){\r\n                res[i] = a.array[i] + b.array[i];\r\n            }\r\n            return new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(res);\r\n        },\r\n        op_Multiply$$Vector$$Vector: function (v1, v2){\r\n            var res = 0;\r\n            for (var i = 0; i < v1.array.length; i++){\r\n                res += v1.array[i] * v2.array[i];\r\n            }\r\n            return res;\r\n        },\r\n        op_Multiply$$Double$$Vector: function (scalar, v){\r\n            var res = new Float64Array(v.array.length);\r\n            for (var i = 0; i < v.array.length; i++){\r\n                res[i] = v.array[i] * scalar;\r\n            }\r\n            return new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(res);\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (array){\r\n            this.array = null;\r\n            System.Object.ctor.call(this);\r\n            this.array = array;\r\n        },\r\n        Sub: function (b){\r\n            for (var i = 0; i < this.array.length; i++){\r\n                this.array[i] -= b.array[i];\r\n            }\r\n        },\r\n        Add: function (b){\r\n            for (var i = 0; i < this.array.length; i++){\r\n                this.array[i] += b.array[i];\r\n            }\r\n        },\r\n        Clone: function (){\r\n            return new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(this.array.Clone() instanceof Float64Array || this.array.Clone() == null ? this.array.Clone() : (function (){\r\n                throw new Error("InvalidCastException");\r\n            }\r\n            ()));\r\n        },\r\n        CompProduct: function (v){\r\n            var res = new Float64Array(this.array.length);\r\n            for (var i = 0; i < this.array.length; i++){\r\n                res[i] = this.array[i] * v.array[i];\r\n            }\r\n            return new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.Vector.ctor(res);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$ConjugateGradient$Vector);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$IOverlapRemoval = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.IOverlapRemoval",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Interface"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$IOverlapRemoval);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$MinimumSpanningTree$MstLineSweeper = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.MstLineSweeper",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (proximityEdges, nodeSizes, nodePositions, forLayers){\r\n            this._proximityEdges = null;\r\n            this._nodeSizes = null;\r\n            this._nodePositions = null;\r\n            this._forLayers = false;\r\n            this._intervalTree = null;\r\n            this._q = null;\r\n            this._numberOfOverlaps = 0;\r\n            System.Object.ctor.call(this);\r\n            this._proximityEdges = proximityEdges;\r\n            this._nodeSizes = nodeSizes;\r\n            this._nodePositions = nodePositions;\r\n            this._forLayers = forLayers;\r\n            this._q = new Microsoft.Msagl.Core.DataStructures.BinaryHeapPriorityQueue.ctor(nodeSizes.length * 2);\r\n        },\r\n        Run: function (){\r\n            this.InitQueue();\r\n            this.FindOverlaps();\r\n            return this._numberOfOverlaps;\r\n        },\r\n        FindOverlaps: function (){\r\n            while (this._q.get_Count() > 0){\r\n                var i = this._q.Dequeue();\r\n                if (i < this._nodePositions.length){\r\n                    this.FindOverlapsWithInterval(i);\r\n                    this.AddIntervalToTree(i);\r\n                }\r\n                else {\r\n                    i -= this._nodePositions.length;\r\n                    this.RemoveIntervalFromTree(i);\r\n                }\r\n            }\r\n        },\r\n        RemoveIntervalFromTree: function (i){\r\n            this._intervalTree.Remove(this.GetInterval(i), i);\r\n        },\r\n        AddIntervalToTree: function (i){\r\n            var interval = this.GetInterval(i);\r\n            if (this._intervalTree == null)\r\n                this._intervalTree = new Microsoft.Msagl.Core.Geometry.IntervalRTree$1.ctor(System.Int32.ctor);\r\n            this._intervalTree.Add$$Interval$$TData(interval, i);\r\n        },\r\n        FindOverlapsWithInterval: function (i){\r\n            if (this._intervalTree == null)\r\n                return;\r\n            var interval = this.GetInterval(i);\r\n            var $it8 = this._intervalTree.GetAllIntersecting(interval).GetEnumerator();\r\n            while ($it8.MoveNext()){\r\n                var j = $it8.get_Current();\r\n                var tuple = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.GTreeOverlapRemoval.GetIdealEdgeLength$$Int32$$Int32$$Point$$Point$$Size$Array$$Boolean(i, j, this._nodePositions[i], this._nodePositions[j], this._nodeSizes, this._forLayers);\r\n                if (!(tuple.get_Item3() > 1))\r\n                    return;\r\n                this._proximityEdges.Add(tuple);\r\n                this._numberOfOverlaps++;\r\n            }\r\n        },\r\n        GetInterval: function (i){\r\n            var w = this._nodeSizes[i].get_Width() / 2;\r\n            var nodeCenterX = this._nodePositions[i].get_X();\r\n            return new Microsoft.Msagl.Layout.LargeGraphLayout.Interval.ctor$$Double$$Double(nodeCenterX - w, nodeCenterX + w);\r\n        },\r\n        InitQueue: function (){\r\n            for (var i = 0; i < this._nodeSizes.length; i++){\r\n                var h = this._nodeSizes[i].get_Height() / 2;\r\n                var nodeCenterY = this._nodePositions[i].get_Y();\r\n                this._q.Enqueue(i, nodeCenterY - h);\r\n                this._q.Enqueue(this._nodeSizes.length + i, nodeCenterY + h);\r\n            }\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$MinimumSpanningTree$MstLineSweeper);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$OverlapRemovalSettings = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.OverlapRemovalSettings",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.epsilon = 0.01;\r\n            this.iterationsMax = 1000;\r\n            this.stopOnMaxIterat = false;\r\n            this.nodeSeparation = 4;\r\n            this.randomizationSeed = 1;\r\n            this.randomizeAllPointsOnStart = false;\r\n            this._StressSettings = null;\r\n            System.Object.ctor.call(this);\r\n            this.set_StressSettings(new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.StressMajorizationSettings.ctor());\r\n        },\r\n        StressSettings$$: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.StressMajorizationSettings",\r\n        get_StressSettings: function (){\r\n            return this._StressSettings;\r\n        },\r\n        set_StressSettings: function (value){\r\n            this._StressSettings = value;\r\n        },\r\n        StopOnMaxIterat$$: "System.Boolean",\r\n        get_StopOnMaxIterat: function (){\r\n            return this.stopOnMaxIterat;\r\n        },\r\n        set_StopOnMaxIterat: function (value){\r\n            this.stopOnMaxIterat = value;\r\n        },\r\n        Epsilon$$: "System.Double",\r\n        get_Epsilon: function (){\r\n            return this.epsilon;\r\n        },\r\n        set_Epsilon: function (value){\r\n            this.epsilon = value;\r\n        },\r\n        IterationsMax$$: "System.Int32",\r\n        get_IterationsMax: function (){\r\n            return this.iterationsMax;\r\n        },\r\n        set_IterationsMax: function (value){\r\n            this.iterationsMax = value;\r\n        },\r\n        NodeSeparation$$: "System.Double",\r\n        get_NodeSeparation: function (){\r\n            return this.nodeSeparation;\r\n        },\r\n        set_NodeSeparation: function (value){\r\n            this.nodeSeparation = value;\r\n        },\r\n        RandomizationSeed$$: "System.Int32",\r\n        get_RandomizationSeed: function (){\r\n            return this.randomizationSeed;\r\n        },\r\n        set_RandomizationSeed: function (value){\r\n            this.randomizationSeed = value;\r\n        },\r\n        RandomizeAllPointsOnStart$$: "System.Boolean",\r\n        get_RandomizeAllPointsOnStart: function (){\r\n            return this.randomizeAllPointsOnStart;\r\n        },\r\n        set_RandomizeAllPointsOnStart: function (value){\r\n            this.randomizeAllPointsOnStart = value;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$OverlapRemovalSettings);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$ProximityOverlapRemoval = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        InitStressWithGraph: function (majorizer, nodes, nodePositions){\r\n            majorizer.set_Positions(new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Microsoft.Msagl.Core.Geometry.Point.ctor, nodePositions));\r\n            majorizer.set_NodeVotings(new System.Collections.Generic.List$1.ctor$$Int32(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.NodeVoting.ctor, nodes.length));\r\n            for (var i = 0; i < nodes.length; i++){\r\n                var nodeVote = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.NodeVoting.ctor(i);\r\n                var voteBlock = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.VoteBlock.ctor(new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.Vote.ctor), 100);\r\n                nodeVote.get_VotingBlocks().Add(voteBlock);\r\n                majorizer.get_NodeVotings().Add(nodeVote);\r\n            }\r\n        },\r\n        RandomizePoints: function (points, random, epsilon, randomizeAll){\r\n            var pointSet = new System.Collections.Generic.HashSet$1.ctor(Microsoft.Msagl.Core.Geometry.Point.ctor);\r\n            for (var i = 0; i < points.length; i++){\r\n                var p = points[i];\r\n                if (pointSet.Contains(p) || randomizeAll){\r\n                    do{\r\n                        var newX = p.get_X() + (2 * random.NextDouble() - 1) * epsilon;\r\n                        var newY = p.get_Y() + (2 * random.NextDouble() - 1) + epsilon;\r\n                        p = new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(newX, newY);\r\n                    }\r\n                    while (pointSet.Contains(p))\r\n                }\r\n                points[i] = p;\r\n                pointSet.Add(p);\r\n            }\r\n        },\r\n        GetProximityEdgesWithDistance: function (originalGraph, cdt, targetSizes, desiredEdgeDistances){\r\n            desiredEdgeDistances.Value = new System.Collections.Generic.List$1.ctor(System.Tuple$4.ctor);\r\n            var numberOverlappingPairs = 0;\r\n            var edgeSet = new System.Collections.Generic.HashSet$1.ctor(Microsoft.Msagl.Routing.CdtEdge.ctor);\r\n            var $it9 = cdt.GetTriangles().GetEnumerator();\r\n            while ($it9.MoveNext()){\r\n                var triangle = $it9.get_Current();\r\n                var $it10 = triangle.Edges.GetEnumerator();\r\n                while ($it10.MoveNext()){\r\n                    var triangleEdge = $it10.get_Current();\r\n                    var site1 = triangleEdge.upperSite;\r\n                    var site2 = triangleEdge.lowerSite;\r\n                    var nodeId1 = site1.get_Owner();\r\n                    var nodeId2 = site2.get_Owner();\r\n                    if (edgeSet.Contains(triangleEdge))\r\n                        continue;\r\n                    edgeSet.Add(triangleEdge);\r\n                    var point1 = site1.Point;\r\n                    var point2 = site2.Point;\r\n                    var t;\r\n                    var distance = (function (){\r\n                        var $1 = {\r\n                            Value: t\r\n                        };\r\n                        var $res = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.GetIdealDistanceBetweenNodes(nodeId1, nodeId2, point1, point2, targetSizes, $1);\r\n                        t = $1.Value;\r\n                        return $res;\r\n                    })();\r\n                    if (t > 1)\r\n                        numberOverlappingPairs++;\r\n                    var nodeIdSmall = nodeId1;\r\n                    var nodeIdBig = nodeId2;\r\n                    if (nodeId1 > nodeId2){\r\n                        nodeIdSmall = nodeId2;\r\n                        nodeIdBig = nodeId1;\r\n                    }\r\n                    var tuple = new System.Tuple$4.ctor(System.Int32.ctor, System.Int32.ctor, System.Double.ctor, System.Double.ctor, nodeIdSmall, nodeIdBig, distance, t);\r\n                    desiredEdgeDistances.Value.Add(tuple);\r\n                }\r\n            }\r\n            return numberOverlappingPairs;\r\n        },\r\n        GetOverlapFactorBetweenNodes: function (nodeId1, nodeId2, point1, point2, nodeBoxes, tRes){\r\n            return Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.GetIdealDistanceBetweenNodes(nodeId1, nodeId2, point1, point2, nodeBoxes, tRes);\r\n        },\r\n        GetIdealDistanceBetweenNodes: function (nodeId1, nodeId2, point1, point2, nodeBoxes, tRes){\r\n            if (nodeBoxes == null)\r\n                throw $CreateException(new System.ArgumentNullException.ctor$$String("nodeBoxes"), new Error());\r\n            tRes.Value = -1;\r\n            if (nodeBoxes.length <= nodeId1)\r\n                return 0;\r\n            if (nodeBoxes.length <= nodeId2)\r\n                return 0;\r\n            var expandMax = 1.5;\r\n            var expandMin = 1;\r\n            var machineAcc = 1E-16;\r\n            var dist = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(point1, point2)).get_Length();\r\n            var dx = System.Math.Abs$$Double(point1.get_X() - point2.get_X());\r\n            var dy = System.Math.Abs$$Double(point1.get_Y() - point2.get_Y());\r\n            var wx = (nodeBoxes[nodeId1].get_Width() / 2 + nodeBoxes[nodeId2].get_Width() / 2);\r\n            var wy = (nodeBoxes[nodeId1].get_Height() / 2 + nodeBoxes[nodeId2].get_Height() / 2);\r\n            var t;\r\n            if (dx < machineAcc * wx){\r\n                t = wy / dy;\r\n            }\r\n            else if (dy < machineAcc * wy){\r\n                t = wx / dx;\r\n            }\r\n            else {\r\n                t = System.Math.Min$$Double$$Double(wx / dx, wy / dy);\r\n            }\r\n            if (t > 1)\r\n                t = System.Math.Max$$Double$$Double(t, 1.001);\r\n            t = System.Math.Min$$Double$$Double(expandMax, t);\r\n            t = System.Math.Max$$Double$$Double(expandMin, t);\r\n            tRes.Value = t;\r\n            return t * dist;\r\n        },\r\n        InitNodePositionsAndBoxes: function (overlapRemovalSettings, nodes, nodePositions, nodeSizes){\r\n            nodePositions.Value = System.Linq.Enumerable.ToArray$1(Microsoft.Msagl.Core.Geometry.Point.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Layout.Node.ctor, Microsoft.Msagl.Core.Geometry.Point.ctor, nodes, function (v){\r\n                return v.get_Center();\r\n            }));\r\n            Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.RandomizePoints(nodePositions.Value, new System.Random.ctor$$Int32(overlapRemovalSettings.get_RandomizationSeed()), overlapRemovalSettings.get_Epsilon(), overlapRemovalSettings.get_RandomizeAllPointsOnStart());\r\n            nodeSizes.Value = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.GetNodeSizesByPaddingWithHalfSeparation(nodes, overlapRemovalSettings.get_NodeSeparation());\r\n            return nodePositions.Value;\r\n        },\r\n        GetNodeSizesByPaddingWithHalfSeparation: function (nodes, nodeSeparation){\r\n            if (nodes == null)\r\n                return null;\r\n            var nodeSizes = new Array(nodes.length);\r\n            var halfSep = nodeSeparation / 2;\r\n            for (var i = 0; i < nodes.length; i++){\r\n                nodeSizes[i] = nodes[i].get_BoundingBox().get_Size();\r\n                nodeSizes[i].Pad(halfSep);\r\n            }\r\n            return nodeSizes;\r\n        },\r\n        AddStressFromProximityEdges: function (stressSolver, proximityEdgesWithDistance){\r\n            var nodePairs = new System.Collections.Generic.HashSet$1.ctor(System.Tuple$2.ctor);\r\n            var $it13 = proximityEdgesWithDistance.GetEnumerator();\r\n            while ($it13.MoveNext()){\r\n                var tuple = $it13.get_Current();\r\n                var nodeId1 = tuple.get_Item1();\r\n                var nodeId2 = tuple.get_Item2();\r\n                if (nodeId1 > nodeId2){\r\n                    nodeId1 = tuple.get_Item2();\r\n                    nodeId2 = tuple.get_Item1();\r\n                }\r\n                var tup = new System.Tuple$2.ctor(System.Int32.ctor, System.Int32.ctor, nodeId1, nodeId2);\r\n                if (nodePairs.Contains(tup))\r\n                    continue;\r\n                nodePairs.Add(tup);\r\n                var distance = tuple.get_Item3();\r\n                var weight = 1 / (distance * distance);\r\n                var voteFromNode1 = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.Vote.ctor$$Int32$$Double$$Double(nodeId1, distance, weight);\r\n                var voteFromNode2 = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.Vote.ctor$$Int32$$Double$$Double(nodeId2, distance, weight);\r\n                if (tuple.get_Item4() <= 1){\r\n                    stressSolver.get_NodeVotings().get_Item$$Int32(nodeId2).get_VotingBlocks().get_Item$$Int32(0).get_Votings().Add(voteFromNode1);\r\n                    stressSolver.get_NodeVotings().get_Item$$Int32(nodeId1).get_VotingBlocks().get_Item$$Int32(0).get_Votings().Add(voteFromNode2);\r\n                }\r\n                else {\r\n                    stressSolver.get_NodeVotings().get_Item$$Int32(nodeId2).get_VotingBlocks().get_Item$$Int32(1).get_Votings().Add(voteFromNode1);\r\n                    stressSolver.get_NodeVotings().get_Item$$Int32(nodeId1).get_VotingBlocks().get_Item$$Int32(1).get_Votings().Add(voteFromNode2);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.IOverlapRemoval"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (settings, nodes){\r\n            this._nodes = null;\r\n            this.settings = null;\r\n            this.nodeSizes = null;\r\n            this.nodePositions = null;\r\n            this.stressSolver = null;\r\n            this._LastRunIterations = 0;\r\n            System.Object.ctor.call(this);\r\n            this._nodes = nodes;\r\n            this.set_Settings(settings);\r\n            if (this.get_StressSolver() == null){\r\n                var graph = new Microsoft.Msagl.Core.Layout.GeometryGraph.ctor();\r\n                this.set_StressSolver(new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.StressMajorization.ctor());\r\n                if (this.get_Settings() != null)\r\n                    this.get_StressSolver().set_Settings(this.get_Settings().get_StressSettings());\r\n            }\r\n        },\r\n        Settings$$: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.OverlapRemovalSettings",\r\n        get_Settings: function (){\r\n            return this.settings;\r\n        },\r\n        set_Settings: function (value){\r\n            this.settings = value;\r\n            if (this.get_StressSolver() != null && value != null)\r\n                this.get_StressSolver().set_Settings(value.get_StressSettings());\r\n        },\r\n        LastRunIterations$$: "System.Int32",\r\n        get_LastRunIterations: function (){\r\n            return this._LastRunIterations;\r\n        },\r\n        set_LastRunIterations: function (value){\r\n            this._LastRunIterations = value;\r\n        },\r\n        StressSolver$$: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.StressMajorization",\r\n        get_StressSolver: function (){\r\n            return this.stressSolver;\r\n        },\r\n        set_StressSolver: function (value){\r\n            this.stressSolver = value;\r\n            if (this.get_Settings() != null && this.stressSolver != null)\r\n                this.stressSolver.set_Settings(this.get_Settings().get_StressSettings());\r\n        },\r\n        Graph$$: "Microsoft.Msagl.Core.Layout.GeometryGraph",\r\n        set_Graph: function (value){\r\n            this._nodes = System.Linq.Enumerable.ToArray$1(Microsoft.Msagl.Core.Layout.Node.ctor, value.get_Nodes());\r\n            this.InitWithGraph();\r\n        },\r\n        InitWithGraph: function (){\r\n            if (this.get_StressSolver() != null){\r\n            }\r\n            if (this._nodes == null || this._nodes.length == 0)\r\n                return;\r\n            if (this.get_StressSolver() == null){\r\n                this.set_StressSolver(new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.StressMajorization.ctor());\r\n                if (this.get_Settings() != null)\r\n                    this.get_StressSolver().set_Settings(this.get_Settings().get_StressSettings());\r\n            }\r\n        },\r\n        RemoveOverlaps: function (){\r\n            if (this._nodes == null || this._nodes.length == 0)\r\n                return;\r\n            (function (){\r\n                var $1 = {\r\n                    Value: this.nodePositions\r\n                };\r\n                var $2 = {\r\n                    Value: this.nodeSizes\r\n                };\r\n                var $res = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.InitNodePositionsAndBoxes(this.get_Settings(), this._nodes, $1, $2);\r\n                this.nodePositions = $1.Value;\r\n                this.nodeSizes = $2.Value;\r\n                return $res;\r\n            }).call(this);\r\n            Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.InitStressWithGraph(this.get_StressSolver(), this._nodes, this.nodePositions);\r\n            var scanlinePhase = false;\r\n            var iter = 0;\r\n            var finished = false;\r\n            while (!finished && ((iter++) < this.get_Settings().get_IterationsMax() || !this.get_Settings().get_StopOnMaxIterat())){\r\n                finished = (function (){\r\n                    var $1 = {\r\n                        Value: scanlinePhase\r\n                    };\r\n                    var $res = this.DoSingleIteration(iter, $1);\r\n                    scanlinePhase = $1.Value;\r\n                    return $res;\r\n                }).call(this);\r\n            }\r\n            this.set_LastRunIterations(iter);\r\n            this.SetPositionsToGraph();\r\n            var nodeBoxArea = 0;\r\n            for (var $i12 = 0,$t12 = this.nodeSizes,$l12 = $t12.length,sizes = $t12[$i12]; $i12 < $l12; $i12++, sizes = $t12[$i12]){\r\n                nodeBoxArea += sizes.get_Width() * sizes.get_Height();\r\n            }\r\n            var boundingBox = this.GetCommonRectangle(this.nodeSizes, this.nodePositions);\r\n            var boundingBoxArea = boundingBox.get_Width() * boundingBox.get_Height();\r\n            System.Console.WriteLine$$String$$Object("Needed maxIterat: {0}", iter);\r\n            System.Console.WriteLine$$String$$Object("BBox Area Ratio: {0}", boundingBoxArea / nodeBoxArea);\r\n            return;\r\n        },\r\n        GetCommonRectangle: function (sizes, points){\r\n            var rect = Microsoft.Msagl.Core.Geometry.Rectangle.CreateAnEmptyBox();\r\n            for (var i = 0; i < sizes.length; i++)\r\n                rect.Add$$Size$$Point(sizes[i], points[i]);\r\n            return rect;\r\n        },\r\n        DoSingleIteration: function (currentIteration, scanlinePhase){\r\n            var sites = new Array(this.nodePositions.length);\r\n            for (var i = 0; i < this.nodePositions.length; i++){\r\n                sites[i] = new System.Tuple$2.ctor(Microsoft.Msagl.Core.Geometry.Point.ctor, System.Object.ctor, this.nodePositions[i], i);\r\n            }\r\n            var triangulation = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.ctor$$IEnumerable$1(sites);\r\n            triangulation.Run();\r\n            var proximityEdgesWithDistance;\r\n            var numCrossings = (function (){\r\n                var $1 = {\r\n                    Value: proximityEdgesWithDistance\r\n                };\r\n                var $res = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.GetProximityEdgesWithDistance(this._nodes, triangulation, this.nodeSizes, $1);\r\n                proximityEdgesWithDistance = $1.Value;\r\n                return $res;\r\n            }).call(this);\r\n            if (scanlinePhase.Value || numCrossings == 0){\r\n                scanlinePhase.Value = true;\r\n                numCrossings = (function (){\r\n                    var $1 = {\r\n                        Value: numCrossings\r\n                    };\r\n                    var $res = this.CompleteProximityGraphWithRTree($1, proximityEdgesWithDistance);\r\n                    numCrossings = $1.Value;\r\n                    return $res;\r\n                }).call(this);\r\n            }\r\n            if (numCrossings == 0)\r\n                return true;\r\n            Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.AddStressFromProximityEdges(this.get_StressSolver(), proximityEdgesWithDistance);\r\n            var newPositions = this.get_StressSolver().IterateAll();\r\n            this.UpdatePointsAndBoxes(newPositions);\r\n            this.get_StressSolver().ClearVotings();\r\n            return false;\r\n        },\r\n        UpdatePointsAndBoxes: function (newPositions){\r\n            for (var i = 0; i < this.nodePositions.length; i++)\r\n                this.nodePositions[i] = newPositions.get_Item$$Int32(i);\r\n        },\r\n        SetPositionsToGraph: function (){\r\n            for (var i = 0; i < this._nodes.length; i++){\r\n                this._nodes[i].set_Center(this.nodePositions[i]);\r\n            }\r\n        },\r\n        CompleteProximityGraphWithRTree: function (currentCrossings, proximityEdgesWithDistance){\r\n            var newCrossings = this.CreateProximityEdgesWithRTree(proximityEdgesWithDistance);\r\n            return currentCrossings.Value + newCrossings;\r\n        },\r\n        DoInitialScaling: function (){\r\n            return;\r\n        },\r\n        CreateProximityEdgesWithRTree: function (proximityEdges){\r\n            var edgeSet = new System.Collections.Generic.HashSet$1.ctor(System.Tuple$2.ctor);\r\n            var $it12 = proximityEdges.GetEnumerator();\r\n            while ($it12.MoveNext()){\r\n                var proximityEdge = $it12.get_Current();\r\n                edgeSet.Add(System.Tuple.Create$2$$T1$$T2(System.Int32.ctor, System.Int32.ctor, proximityEdge.get_Item1(), proximityEdge.get_Item2()));\r\n            }\r\n            var rectangles = new Array(this.nodeSizes.length);\r\n            for (var i = 0; i < this.nodeSizes.length; i++){\r\n                rectangles[i] = new Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor$$TData$$Rectangle(System.Int32.ctor, i, new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Size$$Point(this.nodeSizes[i], this.nodePositions[i]));\r\n            }\r\n            var rootNode = Microsoft.Msagl.Core.Geometry.RectangleNode$1.CreateRectangleNodeOnEnumeration(rectangles);\r\n            var numCrossings = 0;\r\n            Microsoft.Msagl.Core.Geometry.RectangleNodeUtils.CrossRectangleNodes$2(System.Int32.ctor, System.Int32.ctor, rootNode, rootNode, $CreateAnonymousDelegate(this, function (a, b){\r\n                if (a == b)\r\n                    return;\r\n                var t;\r\n                var dist = (function (){\r\n                    var $1 = {\r\n                        Value: t\r\n                    };\r\n                    var $res = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ProximityOverlapRemoval.GetOverlapFactorBetweenNodes(a, b, this.nodePositions[a], this.nodePositions[b], this.nodeSizes, $1);\r\n                    t = $1.Value;\r\n                    return $res;\r\n                }).call(this);\r\n                var smallId = a;\r\n                var bigId = b;\r\n                if (smallId > bigId){\r\n                    smallId = b;\r\n                    bigId = a;\r\n                }\r\n                if (!(t > 1) || edgeSet.Contains(new System.Tuple$2.ctor(System.Int32.ctor, System.Int32.ctor, smallId, bigId)))\r\n                    return;\r\n                proximityEdges.Add(System.Tuple.Create$4$$T1$$T2$$T3$$T4(System.Int32.ctor, System.Int32.ctor, System.Double.ctor, System.Double.ctor, smallId, bigId, dist, t));\r\n                edgeSet.Add(new System.Tuple$2.ctor(System.Int32.ctor, System.Int32.ctor, smallId, bigId));\r\n                numCrossings++;\r\n            }));\r\n            return numCrossings;\r\n        },\r\n        GetLastRunIterations: function (){\r\n            return this.get_LastRunIterations();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$ProximityOverlapRemoval);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$MinimumSpanningTree$MstOnDelaunayTriangulation = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.MinimumSpanningTree.MstOnDelaunayTriangulation",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        GetMstOnTuple: function (proximityEdges, sizeId){\r\n            if (proximityEdges.get_Count() == 0){\r\n                return null;\r\n            }\r\n            var intPairs = System.Linq.Enumerable.ToArray$1(Microsoft.Msagl.Core.GraphAlgorithms.IntPair.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.Tuple$5.ctor, Microsoft.Msagl.Core.GraphAlgorithms.IntPair.ctor, proximityEdges, function (t){\r\n                return new Microsoft.Msagl.Core.GraphAlgorithms.IntPair.ctor(t.get_Item1(), t.get_Item2());\r\n            }));\r\n            var weighting = new System.Collections.Generic.Dictionary$2.ctor$$Int32(Microsoft.Msagl.Core.GraphAlgorithms.IntPair.ctor, System.Tuple$5.ctor, System.Linq.Enumerable.Count$1$$IEnumerable$1(Microsoft.Msagl.Core.GraphAlgorithms.IntPair.ctor, intPairs));\r\n            for (var i = 0; i < proximityEdges.get_Count(); i++){\r\n                weighting.set_Item$$TKey(intPairs[i], proximityEdges.get_Item$$Int32(i));\r\n            }\r\n            var graph = new Microsoft.Msagl.Core.GraphAlgorithms.BasicGraph$1.ctor$$IEnumerable$1$$Int32(Microsoft.Msagl.Core.GraphAlgorithms.IEdge.ctor, intPairs, sizeId);\r\n            var mstOnBasicGraph = new Microsoft.Msagl.Core.GraphAlgorithms.MinimumSpanningTreeByPrim.ctor(graph, function (intPair){\r\n                return weighting.get_Item$$TKey(Cast(intPair, Microsoft.Msagl.Core.GraphAlgorithms.IntPair.ctor)).get_Item5();\r\n            }, intPairs[0].get_First());\r\n            var treeEdges = System.Linq.Enumerable.ToList$1(System.Tuple$5.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.GraphAlgorithms.IEdge.ctor, System.Tuple$5.ctor, mstOnBasicGraph.GetTreeEdges(), function (e){\r\n                return weighting.get_Item$$TKey(Cast(e, Microsoft.Msagl.Core.GraphAlgorithms.IntPair.ctor));\r\n            }));\r\n            return treeEdges;\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$MinimumSpanningTree$MstOnDelaunayTriangulation);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$MaxIterationMethod = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.MaxIterationMethod",\r\n    staticDefinition: {\r\n        FixedMax: 0,\r\n        SqrtProblemSize: 1,\r\n        LinearProblemSize: 2\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$MaxIterationMethod);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$NodeVoting = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.NodeVoting",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (votedNodeIndex){\r\n            this.VotedNodeIndex = 0;\r\n            this._VotingBlocks = null;\r\n            System.Object.ctor.call(this);\r\n            this.VotedNodeIndex = votedNodeIndex;\r\n            this.set_VotingBlocks(new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.VoteBlock.ctor));\r\n            var voteBlock = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.VoteBlock.ctor(new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.Vote.ctor), 1);\r\n            this.get_VotingBlocks().Add(voteBlock);\r\n        },\r\n        VotingBlocks$$: "System.Collections.Generic.List`1[[Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.VoteBlock]]",\r\n        get_VotingBlocks: function (){\r\n            return this._VotingBlocks;\r\n        },\r\n        set_VotingBlocks: function (value){\r\n            this._VotingBlocks = value;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$NodeVoting);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$StressMajorizationSettings = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.StressMajorizationSettings",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.maxStressIterations = 31;\r\n            this.solvingMethod = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.SolvingMethod.PrecondConjugateGradient;\r\n            this.updateMethod = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.UpdateMethod.Parallel;\r\n            this.stressChangeTolerance = 0.01;\r\n            this.cancelOnStressConvergence = true;\r\n            this.cancelOnStressMaxIteration = true;\r\n            this.maxSolverIterations = 100;\r\n            this.solverMaxIteratMethod = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.MaxIterationMethod.SqrtProblemSize;\r\n            this.residualTolerance = 0.01;\r\n            this.cancelAfterFirstConjugate = true;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        UpdateMethod$$: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.UpdateMethod",\r\n        get_UpdateMethod: function (){\r\n            return this.updateMethod;\r\n        },\r\n        set_UpdateMethod: function (value){\r\n            this.updateMethod = value;\r\n        },\r\n        SolvingMethod$$: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.SolvingMethod",\r\n        get_SolvingMethod: function (){\r\n            return this.solvingMethod;\r\n        },\r\n        set_SolvingMethod: function (value){\r\n            this.solvingMethod = value;\r\n        },\r\n        MaxStressIterations$$: "System.Int32",\r\n        get_MaxStressIterations: function (){\r\n            return this.maxStressIterations;\r\n        },\r\n        set_MaxStressIterations: function (value){\r\n            this.maxStressIterations = value;\r\n        },\r\n        StressChangeTolerance$$: "System.Double",\r\n        get_StressChangeTolerance: function (){\r\n            return this.stressChangeTolerance;\r\n        },\r\n        set_StressChangeTolerance: function (value){\r\n            this.stressChangeTolerance = value;\r\n        },\r\n        CancelOnStressMaxIteration$$: "System.Boolean",\r\n        get_CancelOnStressMaxIteration: function (){\r\n            return this.cancelOnStressMaxIteration;\r\n        },\r\n        set_CancelOnStressMaxIteration: function (value){\r\n            this.cancelOnStressMaxIteration = value;\r\n        },\r\n        ResidualTolerance$$: "System.Double",\r\n        get_ResidualTolerance: function (){\r\n            return this.residualTolerance;\r\n        },\r\n        set_ResidualTolerance: function (value){\r\n            this.residualTolerance = value;\r\n        },\r\n        CancelAfterFirstConjugate$$: "System.Boolean",\r\n        get_CancelAfterFirstConjugate: function (){\r\n            return this.cancelAfterFirstConjugate;\r\n        },\r\n        set_CancelAfterFirstConjugate: function (value){\r\n            this.cancelAfterFirstConjugate = value;\r\n        },\r\n        SolverMaxIteratMethod$$: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.MaxIterationMethod",\r\n        get_SolverMaxIteratMethod: function (){\r\n            return this.solverMaxIteratMethod;\r\n        },\r\n        set_SolverMaxIteratMethod: function (value){\r\n            this.solverMaxIteratMethod = value;\r\n        },\r\n        MaxSolverIterations$$: "System.Int32",\r\n        get_MaxSolverIterations: function (){\r\n            return this.maxSolverIterations;\r\n        },\r\n        set_MaxSolverIterations: function (value){\r\n            this.maxSolverIterations = value;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$StressMajorizationSettings);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$SolvingMethod = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.SolvingMethod",\r\n    staticDefinition: {\r\n        Localized: 0,\r\n        PrecondConjugateGradient: 1,\r\n        ConjugateGradient: 2\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$SolvingMethod);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$StressMajorization = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.StressMajorization",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this._Settings = null;\r\n            this._NodeVotings = null;\r\n            this._Positions = null;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Settings$$: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.StressMajorizationSettings",\r\n        get_Settings: function (){\r\n            return this._Settings;\r\n        },\r\n        set_Settings: function (value){\r\n            this._Settings = value;\r\n        },\r\n        NodeVotings$$: "System.Collections.Generic.List`1[[Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.NodeVoting]]",\r\n        get_NodeVotings: function (){\r\n            return this._NodeVotings;\r\n        },\r\n        set_NodeVotings: function (value){\r\n            this._NodeVotings = value;\r\n        },\r\n        Positions$$: "System.Collections.Generic.List`1[[Microsoft.Msagl.Core.Geometry.Point]]",\r\n        get_Positions: function (){\r\n            return this._Positions;\r\n        },\r\n        set_Positions: function (value){\r\n            this._Positions = value;\r\n        },\r\n        IterateSingleLocalizedMethod: function (){\r\n            var newPositions;\r\n            if (this.get_Settings().get_UpdateMethod() == Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.UpdateMethod.Serial)\r\n                newPositions = this.get_Positions();\r\n            else\r\n                newPositions = new System.Collections.Generic.List$1.ctor$$Int32(Microsoft.Msagl.Core.Geometry.Point.ctor, this.get_Positions().get_Count());\r\n            for (var i = 0; i < this.get_NodeVotings().get_Count(); i++){\r\n                var nodeVoting = this.get_NodeVotings().get_Item$$Int32(i);\r\n                var votedIndex = nodeVoting.VotedNodeIndex;\r\n                var newPos = this.LocalizedOptimization(nodeVoting);\r\n                if (this.get_Settings().get_UpdateMethod() == Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.UpdateMethod.Serial){\r\n                    newPositions.set_Item$$Int32(votedIndex, newPos);\r\n                }\r\n                else\r\n                    newPositions.Add(newPos);\r\n            }\r\n            if (this.get_Settings().get_UpdateMethod() == Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.UpdateMethod.Parallel){\r\n                for (var i = 0; i < this.get_NodeVotings().get_Count(); i++){\r\n                    var nodeVoting = this.get_NodeVotings().get_Item$$Int32(i);\r\n                    var index = nodeVoting.VotedNodeIndex;\r\n                    this.get_Positions().set_Item$$Int32(index, newPositions.get_Item$$Int32(i));\r\n                }\r\n            }\r\n            return newPositions;\r\n        },\r\n        IterateAll: function (){\r\n            this.initMaxIterationsSolver();\r\n            var i = 0;\r\n            var res = null;\r\n            var stressOld = this.StressValue(this.get_Positions());\r\n            while ((!this.get_Settings().get_CancelOnStressMaxIteration() || (i++) < this.get_Settings().get_MaxStressIterations())){\r\n                if (this.get_Settings().get_SolvingMethod() == Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.SolvingMethod.Localized)\r\n                    res = this.IterateSingleLocalizedMethod();\r\n                else {\r\n                    res = this.IterateSingleConjugateGradient();\r\n                    if (this.get_Settings().get_CancelAfterFirstConjugate())\r\n                        break;\r\n                }\r\n                var stressNew = this.StressValue(res);\r\n                var stressChange = (stressOld > 0) ? (stressOld - stressNew) / stressOld : 0;\r\n                stressChange = System.Math.Sqrt(stressChange) / this.get_Positions().get_Count();\r\n                if (stressChange < this.get_Settings().get_StressChangeTolerance())\r\n                    break;\r\n            }\r\n            return res;\r\n        },\r\n        initMaxIterationsSolver: function (){\r\n            if (this.get_Positions() == null)\r\n                return;\r\n            var problemSize = this.get_Positions().get_Count();\r\n            var maxIterat = this.get_Settings().get_MaxSolverIterations();\r\n            switch (this.get_Settings().get_SolverMaxIteratMethod()){\r\n                case Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.MaxIterationMethod.FixedMax:\r\n                    return;\r\n                case Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.MaxIterationMethod.SqrtProblemSize:\r\n                    maxIterat = ((System.Math.Ceiling$$Double(System.Math.Sqrt(problemSize)))) | 0;\r\n                    break;\r\n                case Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.MaxIterationMethod.LinearProblemSize:\r\n                    maxIterat = problemSize;\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            this.get_Settings().set_MaxSolverIterations(maxIterat);\r\n        },\r\n        IterateSingleConjugateGradient: function (){\r\n            var Lw;\r\n            var Lx;\r\n            (function (){\r\n                var $1 = {\r\n                    Value: Lw\r\n                };\r\n                var $2 = {\r\n                    Value: Lx\r\n                };\r\n                var $res = this.ConstructLinearSystemFromMajorization($1, $2);\r\n                Lw = $1.Value;\r\n                Lx = $2.Value;\r\n                return $res;\r\n            }).call(this);\r\n            var zX = System.Linq.Enumerable.ToArray$1(System.Double.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.Point.ctor, System.Double.ctor, this.get_Positions(), $CreateAnonymousDelegate(this, function (p){\r\n                return p.get_X();\r\n            })));\r\n            var zY = System.Linq.Enumerable.ToArray$1(System.Double.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.Point.ctor, System.Double.ctor, this.get_Positions(), $CreateAnonymousDelegate(this, function (p){\r\n                return p.get_Y();\r\n            })));\r\n            var bX = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.op_Multiply$$SparseMatrix$$Double$Array(Lx, zX);\r\n            var bY = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.op_Multiply$$SparseMatrix$$Double$Array(Lx, zY);\r\n            var resX = null,resY = null;\r\n            if (this.get_Settings().get_SolvingMethod() == Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.SolvingMethod.ConjugateGradient){\r\n                resX = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolveConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double(Lw, bX, zX, this.get_Settings().get_MaxSolverIterations(), this.get_Settings().get_ResidualTolerance());\r\n                resY = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolveConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double(Lw, bY, zY, this.get_Settings().get_MaxSolverIterations(), this.get_Settings().get_ResidualTolerance());\r\n            }\r\n            else {\r\n                resX = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolvePrecondConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double(Lw, bX, zX, this.get_Settings().get_MaxSolverIterations(), this.get_Settings().get_ResidualTolerance());\r\n                resY = Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.LinearSystemSolver.SolvePrecondConjugateGradient$$SparseMatrix$$Double$Array$$Double$Array$$Int32$$Double(Lw, bY, zY, this.get_Settings().get_MaxSolverIterations(), this.get_Settings().get_ResidualTolerance());\r\n            }\r\n            for (var i = 0; i < this.get_Positions().get_Count(); i++)\r\n                this.get_Positions().set_Item$$Int32(i, new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(resX[i], resY[i]));\r\n            return this.get_Positions();\r\n        },\r\n        LocalizedOptimization: function (nodeVoting){\r\n            var currentPosition = this.get_Positions().get_Item$$Int32(nodeVoting.VotedNodeIndex);\r\n            var nextX = 0;\r\n            var nextY = 0;\r\n            var sumWeights = 0;\r\n            if (nodeVoting.get_VotingBlocks() == null || nodeVoting.get_VotingBlocks().get_Count() == 0){\r\n                return currentPosition;\r\n            }\r\n            var $it14 = nodeVoting.get_VotingBlocks().GetEnumerator();\r\n            while ($it14.MoveNext()){\r\n                var votingBlock = $it14.get_Current();\r\n                var blockWeight = votingBlock.get_BlockWeight();\r\n                var $it15 = votingBlock.get_Votings().GetEnumerator();\r\n                while ($it15.MoveNext()){\r\n                    var vote = $it15.get_Current();\r\n                    var voterPos = this.get_Positions().get_Item$$Int32(vote.VoterIndex);\r\n                    var votingDistance = vote.Distance;\r\n                    var diffX = currentPosition.get_X() - voterPos.get_X();\r\n                    var diffY = currentPosition.get_Y() - voterPos.get_Y();\r\n                    var euclidDistance = System.Math.Sqrt(diffX * diffX + diffY * diffY);\r\n                    var weight = blockWeight * vote.Weight;\r\n                    var voteX = voterPos.get_X() + votingDistance * diffX / euclidDistance;\r\n                    nextX += voteX * weight;\r\n                    var voteY = voterPos.get_Y() + votingDistance * diffY / euclidDistance;\r\n                    nextY += voteY * weight;\r\n                    sumWeights += weight;\r\n                }\r\n            }\r\n            if (sumWeights == 0){\r\n                return currentPosition;\r\n            }\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(nextX / sumWeights, nextY / sumWeights);\r\n        },\r\n        ClearVoting: function (nodeVoting){\r\n            var $it16 = nodeVoting.get_VotingBlocks().GetEnumerator();\r\n            while ($it16.MoveNext()){\r\n                var block = $it16.get_Current();\r\n                block.get_Votings().Clear();\r\n            }\r\n        },\r\n        ClearVotings: function (){\r\n            var $it17 = this.get_NodeVotings().GetEnumerator();\r\n            while ($it17.MoveNext()){\r\n                var nodeVoting = $it17.get_Current();\r\n                this.ClearVoting(nodeVoting);\r\n            }\r\n        },\r\n        ConstructLinearSystemFromMajorization: function (Lw, Lx){\r\n            var numEdges = this.GetNumberOfEdges(this.get_NodeVotings());\r\n            var edgesDistance = new Float64Array(numEdges);\r\n            var edgesWeight = new Float64Array(numEdges);\r\n            var adjLists = new Array(this.get_NodeVotings().get_Count());\r\n            var row = 0;\r\n            var edgeId = 0;\r\n            var $it18 = this.get_NodeVotings().GetEnumerator();\r\n            while ($it18.MoveNext()){\r\n                var nodeVoting = $it18.get_Current();\r\n                var targetId = nodeVoting.VotedNodeIndex;\r\n                var numAdj = 0;\r\n                nodeVoting.get_VotingBlocks().ForEach($CreateAnonymousDelegate(this, function (block){\r\n                    numAdj += block.get_Votings().get_Count();\r\n                }));\r\n                var currentAdj = new System.Collections.Generic.List$1.ctor$$Int32(Int32Array, numAdj);\r\n                if (row != targetId)\r\n                    throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("VotedNodeIndex must be consecutive starting from 0"), new Error());\r\n                adjLists[row] = currentAdj;\r\n                var $it19 = nodeVoting.get_VotingBlocks().GetEnumerator();\r\n                while ($it19.MoveNext()){\r\n                    var block = $it19.get_Current();\r\n                    var $it20 = block.get_Votings().GetEnumerator();\r\n                    while ($it20.MoveNext()){\r\n                        var voting = $it20.get_Current();\r\n                        var sourceId = voting.VoterIndex;\r\n                        edgesDistance[edgeId] = voting.Distance;\r\n                        edgesWeight[edgeId] = voting.Weight * block.get_BlockWeight();\r\n                        currentAdj.Add(new Int32Array([sourceId, edgeId]));\r\n                        edgeId++;\r\n                    }\r\n                }\r\n                row++;\r\n            }\r\n            for (var rowC = 0; rowC < adjLists.length; rowC++){\r\n                var adjList = adjLists[rowC];\r\n                adjList.Add(new Int32Array([rowC, -1]));\r\n                adjList.Sort$$Comparison$1($CreateAnonymousDelegate(this, function (a, b){\r\n                    return a[0].CompareTo$$Int32(b[0]);\r\n                }));\r\n            }\r\n            numEdges += adjLists.length;\r\n            var diagonalPos = new Int32Array(adjLists.length);\r\n            Lw.Value = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.ctor$$Int32$$Int32$$Int32(numEdges, adjLists.length, adjLists.length);\r\n            Lx.Value = new Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.ConjugateGradient.SparseMatrix.ctor$$Int32$$Int32$$Int32(numEdges, adjLists.length, adjLists.length);\r\n            var valPos = 0;\r\n            for (var rowId = 0; rowId < adjLists.length; rowId++){\r\n                var adjList = adjLists[rowId];\r\n                var sumLw = 0;\r\n                var sumLx = 0;\r\n                var $it21 = adjList.GetEnumerator();\r\n                while ($it21.MoveNext()){\r\n                    var node = $it21.get_Current();\r\n                    var colId = node[0];\r\n                    Lw.Value.ColInd()[valPos] = colId;\r\n                    Lx.Value.ColInd()[valPos] = colId;\r\n                    if (rowId == colId){\r\n                        diagonalPos[rowId] = valPos;\r\n                    }\r\n                    else {\r\n                        var distance = edgesDistance[node[1]];\r\n                        var weight = edgesWeight[node[1]];\r\n                        Lw.Value.Values()[valPos] = -weight;\r\n                        sumLw += weight;\r\n                        var euclid = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(this.get_Positions().get_Item$$Int32(rowId), this.get_Positions().get_Item$$Int32(colId))).get_Length();\r\n                        var entry = -weight * distance / euclid;\r\n                        Lx.Value.Values()[valPos] = entry;\r\n                        sumLx += entry;\r\n                    }\r\n                    valPos++;\r\n                }\r\n                Lw.Value.Values()[diagonalPos[rowId]] = sumLw;\r\n                Lx.Value.Values()[diagonalPos[rowId]] = -sumLx;\r\n                Lw.Value.RowPtr()[rowId + 1] = valPos;\r\n                Lx.Value.RowPtr()[rowId + 1] = valPos;\r\n            }\r\n        },\r\n        GetNumberOfEdges: function (nodeVotings){\r\n            var i = 0;\r\n            var $it22 = nodeVotings.GetEnumerator();\r\n            while ($it22.MoveNext()){\r\n                var nodeVoting = $it22.get_Current();\r\n                var targetId = nodeVoting.VotedNodeIndex;\r\n                var $it23 = nodeVoting.get_VotingBlocks().GetEnumerator();\r\n                while ($it23.MoveNext()){\r\n                    var block = $it23.get_Current();\r\n                    i += block.get_Votings().get_Count();\r\n                }\r\n            }\r\n            return i;\r\n        },\r\n        StressValue: function (nodePositions){\r\n            var stress = 0;\r\n            var $it24 = this.get_NodeVotings().GetEnumerator();\r\n            while ($it24.MoveNext()){\r\n                var nodeVoting = $it24.get_Current();\r\n                var targetId = nodeVoting.VotedNodeIndex;\r\n                var $it25 = nodeVoting.get_VotingBlocks().GetEnumerator();\r\n                while ($it25.MoveNext()){\r\n                    var block = $it25.get_Current();\r\n                    var $it26 = block.get_Votings().GetEnumerator();\r\n                    while ($it26.MoveNext()){\r\n                        var voting = $it26.get_Current();\r\n                        var sourceId = voting.VoterIndex;\r\n                        var euclid = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(nodePositions.get_Item$$Int32(targetId), nodePositions.get_Item$$Int32(sourceId))).get_Length();\r\n                        var diff = euclid - voting.Distance;\r\n                        stress += block.get_BlockWeight() * voting.Weight * (diff * diff);\r\n                    }\r\n                }\r\n            }\r\n            return stress;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$StressMajorization);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$UpdateMethod = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.UpdateMethod",\r\n    staticDefinition: {\r\n        Serial: 0,\r\n        Parallel: 1\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$UpdateMethod);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$Vote = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.Vote",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$Int32$$Double$$Double: function (voterIndex, distance, weight){\r\n            this.VoterIndex = 0;\r\n            this.Distance = 0;\r\n            this.Weight = 0;\r\n            System.Object.ctor.call(this);\r\n            this.VoterIndex = voterIndex;\r\n            this.Distance = distance;\r\n            this.Weight = weight;\r\n        },\r\n        ctor$$Int32$$Double: function (voterIndex, distance){\r\n            this.VoterIndex = 0;\r\n            this.Distance = 0;\r\n            this.Weight = 0;\r\n            System.Object.ctor.call(this);\r\n            this.VoterIndex = voterIndex;\r\n            this.Distance = distance;\r\n            this.Weight = 1 / distance / distance;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$Vote);\r\nvar Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$VoteBlock = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.VoteBlock",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (votings, blockWeight){\r\n            this._Votings = null;\r\n            this._BlockWeight = 0;\r\n            System.Object.ctor.call(this);\r\n            this.set_Votings(votings);\r\n            this.set_BlockWeight(blockWeight);\r\n        },\r\n        Votings$$: "System.Collections.Generic.List`1[[Microsoft.Msagl.Core.Layout.ProximityOverlapRemoval.StressEnergy.Vote]]",\r\n        get_Votings: function (){\r\n            return this._Votings;\r\n        },\r\n        set_Votings: function (value){\r\n            this._Votings = value;\r\n        },\r\n        BlockWeight$$: "System.Double",\r\n        get_BlockWeight: function (){\r\n            return this._BlockWeight;\r\n        },\r\n        set_BlockWeight: function (value){\r\n            this._BlockWeight = value;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ProximityOverlapRemoval$StressEnergy$VoteBlock);\r\nvar Microsoft$Msagl$Layout$LargeGraphLayout$Interval = {\r\n    fullname: "Microsoft.Msagl.Layout.LargeGraphLayout.Interval",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$Double$$Double: function (start, end){\r\n            this._Start = 0;\r\n            this._End = 0;\r\n            System.Object.ctor.call(this);\r\n            this.set_Start(start);\r\n            this.set_End(end);\r\n        },\r\n        ctor$$Interval$$Interval: function (a, b){\r\n            this._Start = 0;\r\n            this._End = 0;\r\n            System.Object.ctor.call(this);\r\n            this.set_Start(a.get_Start());\r\n            this.set_End(a.get_End());\r\n            this.Add(b.get_Start());\r\n            this.Add(b.get_End());\r\n        },\r\n        Add: function (v){\r\n            if (this.get_Start() > v)\r\n                this.set_Start(v);\r\n            if (this.get_End() < v)\r\n                this.set_End(v);\r\n        },\r\n        Start$$: "System.Double",\r\n        get_Start: function (){\r\n            return this._Start;\r\n        },\r\n        set_Start: function (value){\r\n            this._Start = value;\r\n        },\r\n        End$$: "System.Double",\r\n        get_End: function (){\r\n            return this._End;\r\n        },\r\n        set_End: function (value){\r\n            this._End = value;\r\n        },\r\n        Length$$: "System.Double",\r\n        get_Length: function (){\r\n            return this.get_End() - this.get_Start();\r\n        },\r\n        Contains: function (v){\r\n            return this.get_Start() <= v && v <= this.get_End();\r\n        },\r\n        GetInRange: function (v){\r\n            return v < this.get_Start() ? this.get_Start() : (v > this.get_End() ? this.get_End() : v);\r\n        },\r\n        Intersects: function (other){\r\n            if (other.get_Start() > this.get_End() + Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return false;\r\n            return !(other.get_End() < this.get_Start() - Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Layout$LargeGraphLayout$Interval);\r\nvar Microsoft$Msagl$Routing$CdtEdge = {\r\n    fullname: "Microsoft.Msagl.Routing.CdtEdge",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (a, b){\r\n            this.upperSite = null;\r\n            this.lowerSite = null;\r\n            this.ccwTriangle = null;\r\n            this.cwTriangle = null;\r\n            this.Constrained = false;\r\n            this.Capacity = 1000000;\r\n            this._ResidualCapacity = 0;\r\n            System.Object.ctor.call(this);\r\n            var above = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.Above$$Point$$Point(a.Point, b.Point);\r\n            if (above == 1){\r\n                this.upperSite = a;\r\n                this.lowerSite = b;\r\n            }\r\n            else {\r\n                this.lowerSite = a;\r\n                this.upperSite = b;\r\n            }\r\n            this.upperSite.AddEdgeToSite(this);\r\n        },\r\n        ResidualCapacity$$: "System.Double",\r\n        get_ResidualCapacity: function (){\r\n            return this._ResidualCapacity;\r\n        },\r\n        set_ResidualCapacity: function (value){\r\n            this._ResidualCapacity = value;\r\n        },\r\n        CcwTriangle$$: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle",\r\n        get_CcwTriangle: function (){\r\n            return this.ccwTriangle;\r\n        },\r\n        set_CcwTriangle: function (value){\r\n            this.ccwTriangle = value;\r\n        },\r\n        CwTriangle$$: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle",\r\n        get_CwTriangle: function (){\r\n            return this.cwTriangle;\r\n        },\r\n        set_CwTriangle: function (value){\r\n            this.cwTriangle = value;\r\n        },\r\n        GetOtherTriangle$$CdtSite: function (p){\r\n            return this.cwTriangle.Contains(p) ? this.ccwTriangle : this.cwTriangle;\r\n        },\r\n        IsAdjacent: function (pi){\r\n            return pi == this.upperSite || pi == this.lowerSite;\r\n        },\r\n        GetOtherTriangle$$CdtTriangle: function (triangle){\r\n            return this.ccwTriangle == triangle ? this.cwTriangle : this.ccwTriangle;\r\n        },\r\n        toString: function (){\r\n            return System.String.Format$$String$$Object$$Object("({0},{1})", this.upperSite, this.lowerSite);\r\n        },\r\n        OtherSite: function (site){\r\n            return this.upperSite == site ? this.lowerSite : this.upperSite;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$CdtEdge);\r\nvar Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$CdtFrontElement = {\r\n    fullname: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (leftSite, edge){\r\n            this.LeftSite = null;\r\n            this.Edge = null;\r\n            this.RightSite = null;\r\n            System.Object.ctor.call(this);\r\n            this.RightSite = edge.upperSite == leftSite ? edge.lowerSite : edge.upperSite;\r\n            this.LeftSite = leftSite;\r\n            this.Edge = edge;\r\n        },\r\n        X$$: "System.Double",\r\n        get_X: function (){\r\n            return this.LeftSite.Point.get_X();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$CdtFrontElement);\r\nvar Microsoft$Msagl$Routing$CdtSite = {\r\n    fullname: "Microsoft.Msagl.Routing.CdtSite",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (isolatedSite){\r\n            this.Point = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.Edges = null;\r\n            this.InEdges = null;\r\n            this._Owner = null;\r\n            System.Object.ctor.call(this);\r\n            this.Point = isolatedSite;\r\n        },\r\n        Owner$$: "System.Object",\r\n        get_Owner: function (){\r\n            return this._Owner;\r\n        },\r\n        set_Owner: function (value){\r\n            this._Owner = value;\r\n        },\r\n        AddEdgeToSite: function (edge){\r\n            if (this.Edges == null)\r\n                this.Edges = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Routing.CdtEdge.ctor);\r\n            this.Edges.Add(edge);\r\n        },\r\n        EdgeBetweenUpperSiteAndLowerSite: function (b){\r\n            if (this.Edges != null){\r\n                var $it27 = this.Edges.GetEnumerator();\r\n                while ($it27.MoveNext()){\r\n                    var edge = $it27.get_Current();\r\n                    if (edge.lowerSite == b)\r\n                        return edge;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        AddInEdge: function (e){\r\n            if (this.InEdges == null)\r\n                this.InEdges = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Routing.CdtEdge.ctor);\r\n            this.InEdges.Add(e);\r\n        },\r\n        Triangles$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle]]",\r\n        get_Triangles: function (){\r\n            var $yield = [];\r\n            var edge;\r\n            if (this.Edges != null && this.Edges.get_Count() > 0)\r\n                edge = this.Edges.get_Item$$Int32(0);\r\n            else if (this.InEdges != null && this.InEdges.get_Count() > 0)\r\n                edge = this.InEdges.get_Item$$Int32(0);\r\n            else\r\n                return $yield;\r\n            var e = edge;\r\n            do{\r\n                var t = e.upperSite == this ? e.get_CcwTriangle() : e.get_CwTriangle();\r\n                if (t == null){\r\n                    e = null;\r\n                    break;\r\n                }\r\n                $yield.push(t);\r\n                e = t.Edges.get_Item$$Int32(t.Edges.Index(e) + 2);\r\n            }\r\n            while (e != edge)\r\n            if (e != edge){\r\n                e = edge;\r\n                do{\r\n                    var t = e.upperSite == this ? e.get_CwTriangle() : e.get_CcwTriangle();\r\n                    if (t == null){\r\n                        break;\r\n                    }\r\n                    $yield.push(t);\r\n                    e = t.Edges.get_Item$$Int32(t.Edges.Index(e) + 1);\r\n                }\r\n                while (true)\r\n            }\r\n            return $yield;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$CdtSite);\r\nvar Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$CdtSweeper = {\r\n    fullname: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper",\r\n    baseTypeName: "Microsoft.Msagl.Core.AlgorithmBase",\r\n    staticDefinition: {\r\n        cctor: function (){\r\n        },\r\n        FindPivot: function (firstPerimeterEdge){\r\n            var pivot = firstPerimeterEdge;\r\n            var e = firstPerimeterEdge;\r\n            do{\r\n                e = e.Next;\r\n                if (e.Start.Point.get_X() < pivot.Start.Point.get_X() || e.Start.Point.get_X() == pivot.Start.Point.get_X() && e.Start.Point.get_Y() < pivot.Start.Point.get_Y())\r\n                    pivot = e;\r\n            }\r\n            while (e != firstPerimeterEdge)\r\n            return pivot;\r\n        },\r\n        FindNextEdgeOnPerimeter: function (e){\r\n            var t = (e.get_CwTriangle() != null ? e.get_CwTriangle() : e.get_CcwTriangle());\r\n            e = t.Edges.get_Item$$Int32(t.Edges.Index(e) + 2);\r\n            while (e.get_CwTriangle() != null && e.get_CcwTriangle() != null){\r\n                t = e.GetOtherTriangle$$CdtTriangle(t);\r\n                e = t.Edges.get_Item$$Int32(t.Edges.Index(e) + 2);\r\n            }\r\n            return e;\r\n        },\r\n        CreatePerimeterElementFromEdge: function (edge){\r\n            var pe = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.PerimeterEdge.ctor(edge);\r\n            if (edge.get_CwTriangle() != null){\r\n                pe.Start = edge.upperSite;\r\n                pe.End = edge.lowerSite;\r\n            }\r\n            else {\r\n                pe.End = edge.upperSite;\r\n                pe.Start = edge.lowerSite;\r\n            }\r\n            return pe;\r\n        },\r\n        RemoveTriangleWithEdges: function (cdtTriangles, t){\r\n            cdtTriangles.Remove(t);\r\n            var $it30 = t.Edges.GetEnumerator();\r\n            while ($it30.MoveNext()){\r\n                var e = $it30.get_Current();\r\n                if (e.get_CwTriangle() == t)\r\n                    e.set_CwTriangle(null);\r\n                else\r\n                    e.set_CcwTriangle(null);\r\n                if (e.get_CwTriangle() == null && e.get_CcwTriangle() == null)\r\n                    e.upperSite.Edges.Remove(e);\r\n            }\r\n        },\r\n        RemoveTriangleButLeaveEdges: function (cdtTriangles, t){\r\n            cdtTriangles.Remove(t);\r\n            var $it31 = t.Edges.GetEnumerator();\r\n            while ($it31.MoveNext()){\r\n                var e = $it31.get_Current();\r\n                if (e.get_CwTriangle() == t)\r\n                    e.set_CwTriangle(null);\r\n                else\r\n                    e.set_CcwTriangle(null);\r\n            }\r\n        },\r\n        EdgeIsProcessed: function (edge){\r\n            return edge.get_CwTriangle() != null || edge.get_CcwTriangle() != null;\r\n        },\r\n        DropsSharpEnoughToTheLeft: function (frontElement){\r\n            var edge = frontElement.Edge;\r\n            if (frontElement.RightSite != edge.upperSite)\r\n                return false;\r\n            var d = Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(edge.lowerSite.Point, edge.upperSite.Point);\r\n            return d.get_X() >= 0.5 * d.get_Y();\r\n        },\r\n        DropsSharpEnoughToTheRight: function (frontElement){\r\n            var edge = frontElement.Edge;\r\n            if (frontElement.LeftSite != edge.upperSite)\r\n                return false;\r\n            var d = Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(edge.lowerSite.Point, edge.upperSite.Point);\r\n            return d.get_X() <= -0.5 * d.get_Y();\r\n        },\r\n        FindNodeInFrontBySite: function (cdtFrontElements, piSite){\r\n            return cdtFrontElements.FindLast$$Func$2(function (x){\r\n                return x.LeftSite.Point.get_X() <= piSite.Point.get_X();\r\n            });\r\n        },\r\n        IsIllegal: function (pi, a, b, c){\r\n            return Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.InCone(pi, a, b, c) && Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.InCircle(pi, a, b, c);\r\n        },\r\n        InCircle: function (d, a, b, c){\r\n            var axdx = a.Point.get_X() - d.Point.get_X();\r\n            var aydy = a.Point.get_Y() - d.Point.get_Y();\r\n            var bxdx = b.Point.get_X() - d.Point.get_X();\r\n            var bydy = b.Point.get_Y() - d.Point.get_Y();\r\n            var cxdx = c.Point.get_X() - d.Point.get_X();\r\n            var cydy = c.Point.get_Y() - d.Point.get_Y();\r\n            var t0 = axdx * axdx + aydy * aydy;\r\n            var t1 = bxdx * bxdx + bydy * bydy;\r\n            var t2 = cxdx * cxdx + cydy * cydy;\r\n            return axdx * (bydy * t2 - cydy * t1) - bxdx * (aydy * t2 - cydy * t0) + cxdx * (aydy * t1 - bydy * t0) > Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_Tolerance();\r\n        },\r\n        InCone: function (pi, a, b, c){\r\n            return Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(a.Point, pi.Point, b.Point) == Microsoft.Msagl.Core.Geometry.TriangleOrientation.Clockwise && Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(b.Point, pi.Point, c.Point) == Microsoft.Msagl.Core.Geometry.TriangleOrientation.Clockwise;\r\n        },\r\n        Flip: function (pi, edge){\r\n            var t,ot;\r\n            if (edge.get_CcwTriangle().Contains(pi)){\r\n                t = edge.get_CcwTriangle();\r\n                ot = edge.get_CwTriangle();\r\n            }\r\n            else {\r\n                t = edge.get_CwTriangle();\r\n                ot = edge.get_CcwTriangle();\r\n            }\r\n            var eIndex = t.Edges.Index(edge);\r\n            var eOtherIndex = ot.Edges.Index(edge);\r\n            var pl = ot.Sites.get_Item$$Int32(eOtherIndex + 2);\r\n            var edgeBeforPi = t.Edges.get_Item$$Int32(eIndex + 1);\r\n            var edgeBeforPl = ot.Edges.get_Item$$Int32(eOtherIndex + 1);\r\n            var newEdge = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.GetOrCreateEdge(pi, pl);\r\n            t.Sites.set_Item$$Int32(eIndex + 1, pl);\r\n            t.Edges.set_Item$$Int32(eIndex, edgeBeforPl);\r\n            t.Edges.set_Item$$Int32(eIndex + 1, newEdge);\r\n            ot.Sites.set_Item$$Int32(eOtherIndex + 1, pi);\r\n            ot.Edges.set_Item$$Int32(eOtherIndex, edgeBeforPi);\r\n            ot.Edges.set_Item$$Int32(eOtherIndex + 1, newEdge);\r\n            if (edgeBeforPl.lowerSite == pl)\r\n                edgeBeforPl.set_CcwTriangle(t);\r\n            else\r\n                edgeBeforPl.set_CwTriangle(t);\r\n            if (edgeBeforPi.lowerSite == pi)\r\n                edgeBeforPi.set_CcwTriangle(ot);\r\n            else\r\n                edgeBeforPi.set_CwTriangle(ot);\r\n            if (newEdge.upperSite == pi){\r\n                newEdge.set_CcwTriangle(ot);\r\n                newEdge.set_CwTriangle(t);\r\n            }\r\n            else {\r\n                newEdge.set_CcwTriangle(t);\r\n                newEdge.set_CwTriangle(ot);\r\n            }\r\n            edge.upperSite.Edges.Remove(edge);\r\n            return newEdge;\r\n        },\r\n        CheckTriangle: function (t){\r\n            if (Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(t.Sites.get_Item$$Int32(0).Point, t.Sites.get_Item$$Int32(1).Point, t.Sites.get_Item$$Int32(2).Point) != Microsoft.Msagl.Core.Geometry.TriangleOrientation.Counterclockwise){\r\n                return false;\r\n            }\r\n            for (var i = 0; i < 3; i++){\r\n                var e = t.Edges.get_Item$$Int32(i);\r\n                var a = t.Sites.get_Item$$Int32(i);\r\n                var b = t.Sites.get_Item$$Int32(i + 1);\r\n                if (!e.IsAdjacent(a) || !e.IsAdjacent(b))\r\n                    return false;\r\n                if (e.upperSite == a){\r\n                    if (e.get_CcwTriangle() != t)\r\n                        return false;\r\n                }\r\n                else if (e.get_CwTriangle() != t)\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (listOfSites, p_1, p_2, createEdgeDelegate){\r\n            this.front = new Microsoft.Msagl.Core.DataStructures.RbTree$1.ctor$$Func$3(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor, $CreateAnonymousDelegate(this, function (a, b){\r\n                return a.get_X().CompareTo$$Double(b.get_X());\r\n            }));\r\n            this.triangles = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor);\r\n            this.listOfSites = null;\r\n            this.p_2 = null;\r\n            this.createEdgeDelegate = null;\r\n            this.p_1 = null;\r\n            Microsoft.Msagl.Core.AlgorithmBase.ctor.call(this);\r\n            this.listOfSites = listOfSites;\r\n            if (listOfSites.get_Count() == 0)\r\n                return;\r\n            var firstTriangle = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor$$CdtSite$$CdtSite$$CdtSite$$Func$3$CdtSite$CdtSite$CdtEdge(p_1, p_2, listOfSites.get_Item$$Int32(0), createEdgeDelegate);\r\n            this.get_Triangles().Insert(firstTriangle);\r\n            this.front.Insert(new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor(p_1, firstTriangle.Edges.get_Item$$Int32(2)));\r\n            this.front.Insert(new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor(listOfSites.get_Item$$Int32(0), firstTriangle.Edges.get_Item$$Int32(1)));\r\n            this.p_1 = p_1;\r\n            this.p_2 = p_2;\r\n            this.createEdgeDelegate = createEdgeDelegate;\r\n        },\r\n        Triangles$$: "Microsoft.Msagl.Core.DataStructures.Set`1[[Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle]]",\r\n        get_Triangles: function (){\r\n            return this.triangles;\r\n        },\r\n        RunInternal: function (){\r\n            if (this.listOfSites.get_Count() == 0)\r\n                return;\r\n            for (var i = 1; i < this.listOfSites.get_Count(); i++)\r\n                this.ProcessSite(this.listOfSites.get_Item$$Int32(i));\r\n            this.FinalizeTriangulation();\r\n        },\r\n        FinalizeTriangulation: function (){\r\n            var list = this.CreateDoubleLinkedListOfPerimeter();\r\n            this.MakePerimeterConvex(list);\r\n            this.RemoveP1AndP2Triangles();\r\n        },\r\n        MakePerimeterConvex: function (firstPerimeterEdge){\r\n            firstPerimeterEdge = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.FindPivot(firstPerimeterEdge);\r\n            var firstSite = firstPerimeterEdge.Start;\r\n            var a = firstPerimeterEdge;\r\n            var b;\r\n            do{\r\n                b = a.Next;\r\n                if (Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(a.Start.Point, a.End.Point, b.End.Point) == Microsoft.Msagl.Core.Geometry.TriangleOrientation.Counterclockwise){\r\n                    a = this.ShortcutTwoListElements(a);\r\n                    while (a.Start != firstSite){\r\n                        var c = a.Prev;\r\n                        if (Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(c.Start.Point, c.End.Point, a.End.Point) == Microsoft.Msagl.Core.Geometry.TriangleOrientation.Counterclockwise){\r\n                            a = this.ShortcutTwoListElements(c);\r\n                        }\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                else\r\n                    a = b;\r\n            }\r\n            while (a.End != firstSite)\r\n        },\r\n        CreateDoubleLinkedListOfPerimeter: function (){\r\n            var firstEdge = System.Linq.Enumerable.First$1$$IEnumerable$1(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor, this.front).Edge;\r\n            var edge = firstEdge;\r\n            var pe,prevPe = null,listStart = null;\r\n            do{\r\n                pe = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.CreatePerimeterElementFromEdge(edge);\r\n                edge = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.FindNextEdgeOnPerimeter(edge);\r\n                if (prevPe != null){\r\n                    pe.Prev = prevPe;\r\n                    prevPe.Next = pe;\r\n                }\r\n                else\r\n                    listStart = pe;\r\n                prevPe = pe;\r\n            }\r\n            while (edge != firstEdge)\r\n            listStart.Prev = pe;\r\n            pe.Next = listStart;\r\n            return listStart;\r\n        },\r\n        RemoveP1AndP2Triangles: function (){\r\n            var trianglesToRemove = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor);\r\n            var $it28 = this.triangles.GetEnumerator();\r\n            while ($it28.MoveNext()){\r\n                var t = $it28.get_Current();\r\n                if (t.Sites.Contains(this.p_1) || t.Sites.Contains(this.p_2))\r\n                    trianglesToRemove.Insert(t);\r\n            }\r\n            var $it29 = trianglesToRemove.GetEnumerator();\r\n            while ($it29.MoveNext()){\r\n                var t = $it29.get_Current();\r\n                Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.RemoveTriangleWithEdges(this.triangles, t);\r\n            }\r\n        },\r\n        ProcessSite: function (site){\r\n            this.PointEvent(site);\r\n            for (var i = 0; i < site.Edges.get_Count(); i++){\r\n                var edge = site.Edges.get_Item$$Int32(i);\r\n                if (edge.Constrained)\r\n                    this.EdgeEvent(edge);\r\n            }\r\n        },\r\n        EdgeEvent: function (edge){\r\n            if (Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.EdgeIsProcessed(edge))\r\n                return;\r\n            var edgeInserter = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.EdgeInserter.ctor(edge, this.get_Triangles(), this.front, this.createEdgeDelegate);\r\n            edgeInserter.Run();\r\n        },\r\n        PointEvent: function (pi){\r\n            var hittedFrontElementNode;\r\n            (function (){\r\n                var $1 = {\r\n                    Value: hittedFrontElementNode\r\n                };\r\n                var $res = this.ProjectToFront(pi, $1);\r\n                hittedFrontElementNode = $1.Value;\r\n                return $res;\r\n            }).call(this);\r\n            var rightSite;\r\n            var leftSite = hittedFrontElementNode.Item.get_X() + Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon < pi.Point.get_X() ? (function (){\r\n                var $1 = {\r\n                    Value: rightSite\r\n                };\r\n                var $res = this.MiddleCase(pi, hittedFrontElementNode, $1);\r\n                rightSite = $1.Value;\r\n                return $res;\r\n            }).call(this) : (function (){\r\n                var $1 = {\r\n                    Value: rightSite\r\n                };\r\n                var $res = this.LeftCase(pi, hittedFrontElementNode, $1);\r\n                rightSite = $1.Value;\r\n                return $res;\r\n            }).call(this);\r\n            var piNode = this.InsertSiteIntoFront(leftSite, pi, rightSite);\r\n            this.TriangulateEmptySpaceToTheRight(piNode);\r\n            piNode = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.FindNodeInFrontBySite(this.front, leftSite);\r\n            this.TriangulateEmptySpaceToTheLeft(piNode);\r\n        },\r\n        LeftCase: function (pi, hittedFrontElementNode, rightSite){\r\n            var hittedFrontElement = hittedFrontElementNode.Item;\r\n            this.InsertAndLegalizeTriangle(pi, hittedFrontElement);\r\n            var prevToHitted = this.front.Previous(hittedFrontElementNode);\r\n            var leftSite = prevToHitted.Item.LeftSite;\r\n            rightSite.Value = hittedFrontElementNode.Item.RightSite;\r\n            this.InsertAndLegalizeTriangle(pi, prevToHitted.Item);\r\n            this.front.DeleteNodeInternal(prevToHitted);\r\n            var d = this.front.Remove(hittedFrontElement);\r\n            return leftSite;\r\n        },\r\n        MiddleCase: function (pi, hittedFrontElementNode, rightSite){\r\n            var leftSite = hittedFrontElementNode.Item.LeftSite;\r\n            rightSite.Value = hittedFrontElementNode.Item.RightSite;\r\n            this.InsertAndLegalizeTriangle(pi, hittedFrontElementNode.Item);\r\n            this.front.DeleteNodeInternal(hittedFrontElementNode);\r\n            return leftSite;\r\n        },\r\n        TriangulateEmptySpaceToTheLeft: function (leftLegNode){\r\n            var peakSite = leftLegNode.Item.RightSite;\r\n            var previousNode = this.front.Previous(leftLegNode);\r\n            while (previousNode != null){\r\n                var prevElement = previousNode.Item;\r\n                var rp = prevElement.LeftSite;\r\n                var r = prevElement.RightSite;\r\n                if (Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Point$$Point((Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(r.Point, peakSite.Point)), (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(rp.Point, r.Point))) < 0){\r\n                    leftLegNode = this.ShortcutTwoFrontElements(previousNode, leftLegNode);\r\n                    previousNode = this.front.Previous(leftLegNode);\r\n                }\r\n                else {\r\n                    this.TryTriangulateBasinToTheLeft(leftLegNode);\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        ShortcutTwoListElements: function (a){\r\n            var b = a.Next;\r\n            var t = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor$$CdtSite$$CdtSite$$CdtSite$$CdtEdge$$CdtEdge$$Func$3$CdtSite$CdtSite$CdtEdge(a.Start, a.End, b.End, a.Edge, b.Edge, this.createEdgeDelegate);\r\n            this.get_Triangles().Insert(t);\r\n            var newEdge = t.Edges.get_Item$$Int32(2);\r\n            this.LegalizeEdge(a.Start, t.OppositeEdge(a.Start));\r\n            t = (newEdge.get_CcwTriangle() != null ? newEdge.get_CcwTriangle() : newEdge.get_CwTriangle());\r\n            this.LegalizeEdge(b.End, t.OppositeEdge(b.End));\r\n            var c = (function (){\r\n                var $v5 = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.PerimeterEdge.ctor(newEdge);\r\n                $v5.Start = a.Start;\r\n                $v5.End = b.End;\r\n                return $v5;\r\n            }).call(this);\r\n            a.Prev.Next = c;\r\n            c.Prev = a.Prev;\r\n            c.Next = b.Next;\r\n            b.Next.Prev = c;\r\n            return c;\r\n        },\r\n        ShortcutTwoFrontElements: function (aNode, bNode){\r\n            var aElem = aNode.Item;\r\n            var bElem = bNode.Item;\r\n            var t = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor$$CdtSite$$CdtSite$$CdtSite$$CdtEdge$$CdtEdge$$Func$3$CdtSite$CdtSite$CdtEdge(aElem.LeftSite, aElem.RightSite, bElem.RightSite, aElem.Edge, bElem.Edge, this.createEdgeDelegate);\r\n            this.get_Triangles().Insert(t);\r\n            this.front.DeleteNodeInternal(aNode);\r\n            this.front.Remove(bElem);\r\n            var newEdge = t.Edges.get_Item$$Int32(2);\r\n            this.LegalizeEdge(aElem.LeftSite, t.OppositeEdge(aElem.LeftSite));\r\n            t = (newEdge.get_CcwTriangle() != null ? newEdge.get_CcwTriangle() : newEdge.get_CwTriangle());\r\n            this.LegalizeEdge(bElem.RightSite, t.OppositeEdge(bElem.RightSite));\r\n            return this.front.Insert(new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor(aElem.LeftSite, newEdge));\r\n        },\r\n        TryTriangulateBasinToTheLeft: function (leftLegNode){\r\n            if (!Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.DropsSharpEnoughToTheLeft(leftLegNode.Item))\r\n                return;\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            stack.Push(leftLegNode.Item.LeftSite);\r\n            while (true){\r\n                var site = stack.Pop();\r\n                leftLegNode = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.FindNodeInFrontBySite(this.front, site);\r\n                var prev = this.front.Previous(leftLegNode);\r\n                if (prev == null)\r\n                    return;\r\n                if (Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(prev.Item.LeftSite.Point, leftLegNode.Item.LeftSite.Point, leftLegNode.Item.RightSite.Point) == Microsoft.Msagl.Core.Geometry.TriangleOrientation.Counterclockwise){\r\n                    stack.Push(prev.Item.LeftSite);\r\n                    this.ShortcutTwoFrontElements(prev, leftLegNode);\r\n                }\r\n                else {\r\n                    if (leftLegNode.Item.LeftSite.Point.get_Y() > leftLegNode.Item.RightSite.Point.get_Y()){\r\n                        stack.Push(prev.Item.LeftSite);\r\n                    }\r\n                    else {\r\n                        if (prev.Item.LeftSite.Point.get_Y() <= prev.Item.RightSite.Point.get_Y())\r\n                            return;\r\n                        stack.Push(prev.Item.LeftSite);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        InsertSiteIntoFront: function (leftSite, pi, rightSite){\r\n            var leftEdge = null,rightEdge = null;\r\n            var $it32 = pi.Edges.GetEnumerator();\r\n            while ($it32.MoveNext()){\r\n                var edge = $it32.get_Current();\r\n                if (leftEdge == null && edge.lowerSite == leftSite)\r\n                    leftEdge = edge;\r\n                if (rightEdge == null && edge.lowerSite == rightSite)\r\n                    rightEdge = edge;\r\n                if (leftEdge != null && rightEdge != null)\r\n                    break;\r\n            }\r\n            this.front.Insert(new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor(leftSite, leftEdge));\r\n            return this.front.Insert(new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor(pi, rightEdge));\r\n        },\r\n        TriangulateEmptySpaceToTheRight: function (piNode){\r\n            var piSite = piNode.Item.LeftSite;\r\n            var piPoint = piSite.Point;\r\n            var piNext = this.front.Next(piNode);\r\n            while (piNext != null){\r\n                var frontElem = piNext.Item;\r\n                var r = frontElem.LeftSite;\r\n                var rp = frontElem.RightSite;\r\n                if (Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Point$$Point((Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(r.Point, piPoint)), (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(rp.Point, r.Point))) < 0){\r\n                    piNode = this.ShortcutTwoFrontElements(piNode, piNext);\r\n                    piNext = this.front.Next(piNode);\r\n                }\r\n                else {\r\n                    this.TryTriangulateBasinToTheRight(piNode);\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        TryTriangulateBasinToTheRight: function (piNode){\r\n            if (!Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.DropsSharpEnoughToTheRight(piNode.Item))\r\n                return;\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            stack.Push(piNode.Item.LeftSite);\r\n            while (true){\r\n                var site = stack.Pop();\r\n                piNode = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.FindNodeInFrontBySite(this.front, site);\r\n                var next = this.front.Next(piNode);\r\n                if (next == null)\r\n                    return;\r\n                if (Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(piNode.Item.LeftSite.Point, piNode.Item.RightSite.Point, next.Item.RightSite.Point) == Microsoft.Msagl.Core.Geometry.TriangleOrientation.Counterclockwise){\r\n                    this.ShortcutTwoFrontElements(piNode, next);\r\n                    stack.Push(site);\r\n                }\r\n                else {\r\n                    if (piNode.Item.LeftSite.Point.get_Y() > piNode.Item.RightSite.Point.get_Y()){\r\n                        stack.Push(piNode.Item.RightSite);\r\n                    }\r\n                    else {\r\n                        if (next.Item.LeftSite.Point.get_Y() >= next.Item.RightSite.Point.get_Y())\r\n                            return;\r\n                        stack.Push(piNode.Item.RightSite);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        InsertAndLegalizeTriangle: function (pi, frontElement){\r\n            if (Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(pi.Point, frontElement.LeftSite.Point, frontElement.RightSite.Point) != Microsoft.Msagl.Core.Geometry.TriangleOrientation.Collinear){\r\n                var tr = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor$$CdtSite$$CdtEdge$$Func$3$CdtSite$CdtSite$CdtEdge(pi, frontElement.Edge, this.createEdgeDelegate);\r\n                this.get_Triangles().Insert(tr);\r\n                this.LegalizeEdge(pi, tr.Edges.get_Item$$Int32(0));\r\n            }\r\n            else {\r\n                var e = frontElement.Edge;\r\n                e.upperSite.Edges.Remove(e);\r\n                var t = (e.get_CcwTriangle() != null ? e.get_CcwTriangle() : e.get_CwTriangle());\r\n                var oppositeSite = t.OppositeSite(e);\r\n                Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.RemoveTriangleButLeaveEdges(this.triangles, t);\r\n                t = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor$$CdtSite$$CdtSite$$CdtSite$$Func$3$CdtSite$CdtSite$CdtEdge(frontElement.LeftSite, oppositeSite, pi, this.createEdgeDelegate);\r\n                var t1 = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor$$CdtSite$$CdtSite$$CdtSite$$Func$3$CdtSite$CdtSite$CdtEdge(frontElement.RightSite, oppositeSite, pi, this.createEdgeDelegate);\r\n                this.triangles.Insert(t);\r\n                this.triangles.Insert(t1);\r\n                this.LegalizeEdge(pi, t.OppositeEdge(pi));\r\n                this.LegalizeEdge(pi, t1.OppositeEdge(pi));\r\n            }\r\n        },\r\n        LegalizeEdge: function (pi, edge){\r\n            if (edge.Constrained || edge.get_CcwTriangle() == null || edge.get_CwTriangle() == null)\r\n                return;\r\n            if (edge.get_CcwTriangle().Contains(pi))\r\n                this.LegalizeEdgeForOtherCwTriangle(pi, edge);\r\n            else\r\n                this.LegalizeEdgeForOtherCcwTriangle(pi, edge);\r\n        },\r\n        LegalizeEdgeForOtherCcwTriangle: function (pi, edge){\r\n            var i = edge.get_CcwTriangle().Edges.Index(edge);\r\n            if (Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.IsIllegal(pi, edge.lowerSite, edge.get_CcwTriangle().Sites.get_Item$$Int32(i + 2), edge.upperSite)){\r\n                var e = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.Flip(pi, edge);\r\n                this.LegalizeEdge(pi, e.get_CwTriangle().OppositeEdge(pi));\r\n                this.LegalizeEdge(pi, e.get_CcwTriangle().OppositeEdge(pi));\r\n            }\r\n        },\r\n        LegalizeEdgeForOtherCwTriangle: function (pi, edge){\r\n            var i = edge.get_CwTriangle().Edges.Index(edge);\r\n            if (Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.IsIllegal(pi, edge.upperSite, edge.get_CwTriangle().Sites.get_Item$$Int32(i + 2), edge.lowerSite)){\r\n                var e = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.Flip(pi, edge);\r\n                this.LegalizeEdge(pi, e.get_CwTriangle().OppositeEdge(pi));\r\n                this.LegalizeEdge(pi, e.get_CcwTriangle().OppositeEdge(pi));\r\n            }\r\n        },\r\n        ProjectToFront: function (site, frontElement){\r\n            frontElement.Value = this.front.FindLast$$Func$2($CreateAnonymousDelegate(this, function (s){\r\n                return s.get_X() <= site.Point.get_X();\r\n            }));\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$CdtSweeper);\r\nvar Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$Cdt = {\r\n    fullname: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt",\r\n    baseTypeName: "Microsoft.Msagl.Core.AlgorithmBase",\r\n    staticDefinition: {\r\n        cctor: function (){\r\n        },\r\n        GetOrCreateEdge: function (a, b){\r\n            if (Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.Above$$Point$$Point(a.Point, b.Point) == 1){\r\n                var e = a.EdgeBetweenUpperSiteAndLowerSite(b);\r\n                if (e != null)\r\n                    return e;\r\n                return Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.CreateEdgeOnOrderedCouple(a, b);\r\n            }\r\n            else {\r\n                var e = b.EdgeBetweenUpperSiteAndLowerSite(a);\r\n                if (e != null)\r\n                    return e;\r\n                return Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.CreateEdgeOnOrderedCouple(b, a);\r\n            }\r\n        },\r\n        CreateEdgeOnOrderedCouple: function (upperPoint, lowerPoint){\r\n            return new Microsoft.Msagl.Routing.CdtEdge.ctor(upperPoint, lowerPoint);\r\n        },\r\n        OnComparison: function (a, b){\r\n            return Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.Above$$Point$$Point(a.Point, b.Point);\r\n        },\r\n        Above$$Point$$Point: function (a, b){\r\n            var del = a.get_Y() - b.get_Y();\r\n            if (del > 0)\r\n                return 1;\r\n            if (del < 0)\r\n                return -1;\r\n            del = a.get_X() - b.get_X();\r\n            return del > 0 ? -1 : (del < 0 ? 1 : 0);\r\n        },\r\n        Above$$CdtSite$$CdtSite: function (a, b){\r\n            var del = a.Point.get_Y() - b.Point.get_Y();\r\n            if (del > 0)\r\n                return 1;\r\n            if (del < 0)\r\n                return -1;\r\n            del = a.Point.get_X() - b.Point.get_X();\r\n            return del > 0 ? -1 : (del < 0 ? 1 : 0);\r\n        },\r\n        PointIsInsideOfTriangle: function (point, t){\r\n            for (var i = 0; i < 3; i++){\r\n                var a = t.Sites.get_Item$$Int32(i).Point;\r\n                var b = t.Sites.get_Item$$Int32(i + 1).Point;\r\n                if (Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(point, a, b) < -Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$IEnumerable$1$Point$$IEnumerable$1$Polyline$$List$1: function (isolatedSites, obstacles, isolatedSegments){\r\n            this.isolatedSitesWithObject = null;\r\n            this.isolatedSites = null;\r\n            this.obstacles = null;\r\n            this.isolatedSegments = null;\r\n            this.P1 = null;\r\n            this.P2 = null;\r\n            this.sweeper = null;\r\n            this.PointsToSites = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Core.Geometry.Point.ctor, Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            this.allInputSites = null;\r\n            this.cdtTree = null;\r\n            Microsoft.Msagl.Core.AlgorithmBase.ctor.call(this);\r\n            this.isolatedSites = isolatedSites;\r\n            this.obstacles = obstacles;\r\n            this.isolatedSegments = isolatedSegments;\r\n        },\r\n        ctor$$IEnumerable$1: function (isolatedSites){\r\n            this.isolatedSitesWithObject = null;\r\n            this.isolatedSites = null;\r\n            this.obstacles = null;\r\n            this.isolatedSegments = null;\r\n            this.P1 = null;\r\n            this.P2 = null;\r\n            this.sweeper = null;\r\n            this.PointsToSites = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Core.Geometry.Point.ctor, Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            this.allInputSites = null;\r\n            this.cdtTree = null;\r\n            Microsoft.Msagl.Core.AlgorithmBase.ctor.call(this);\r\n            this.isolatedSitesWithObject = isolatedSites;\r\n        },\r\n        FillAllInputSites: function (){\r\n            if (this.isolatedSitesWithObject != null){\r\n                var $it33 = this.isolatedSitesWithObject.GetEnumerator();\r\n                while ($it33.MoveNext()){\r\n                    var tuple = $it33.get_Current();\r\n                    this.AddSite(tuple.get_Item1(), tuple.get_Item2());\r\n                }\r\n            }\r\n            if (this.isolatedSites != null){\r\n                var $it34 = this.isolatedSites.GetEnumerator();\r\n                while ($it34.MoveNext()){\r\n                    var isolatedSite = $it34.get_Current();\r\n                    this.AddSite(isolatedSite, null);\r\n                }\r\n            }\r\n            if (this.obstacles != null){\r\n                var $it35 = this.obstacles.GetEnumerator();\r\n                while ($it35.MoveNext()){\r\n                    var poly = $it35.get_Current();\r\n                    this.AddPolylineToAllInputSites(poly);\r\n                }\r\n            }\r\n            if (this.isolatedSegments != null){\r\n                var $it36 = this.isolatedSegments.GetEnumerator();\r\n                while ($it36.MoveNext()){\r\n                    var isolatedSegment = $it36.get_Current();\r\n                    this.AddConstrainedEdge(isolatedSegment.get_A(), isolatedSegment.get_B(), null);\r\n                }\r\n            }\r\n            this.AddP1AndP2();\r\n            this.allInputSites = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Microsoft.Msagl.Routing.CdtSite.ctor, this.PointsToSites.get_Values());\r\n        },\r\n        AddSite: function (point, relatedObject){\r\n            var site;\r\n            if ((function (){\r\n                var $1 = {\r\n                    Value: site\r\n                };\r\n                var $res = this.PointsToSites.TryGetValue(point, $1);\r\n                site = $1.Value;\r\n                return $res;\r\n            }).call(this)){\r\n                site.set_Owner(relatedObject);\r\n                return site;\r\n            }\r\n            this.PointsToSites.set_Item$$TKey(point, site = (function (){\r\n                var $v6 = new Microsoft.Msagl.Routing.CdtSite.ctor(point);\r\n                $v6.set_Owner(relatedObject);\r\n                return $v6;\r\n            }).call(this));\r\n            return site;\r\n        },\r\n        AddP1AndP2: function (){\r\n            var box = Microsoft.Msagl.Core.Geometry.Rectangle.CreateAnEmptyBox();\r\n            var $it37 = this.PointsToSites.get_Keys().GetEnumerator();\r\n            while ($it37.MoveNext()){\r\n                var site = $it37.get_Current();\r\n                box.Add$$Point(site);\r\n            }\r\n            var delx = box.get_Width() / 3;\r\n            var dely = box.get_Height() / 3;\r\n            this.P1 = new Microsoft.Msagl.Routing.CdtSite.ctor(Microsoft.Msagl.Core.Geometry.Point.op_Addition(box.get_LeftBottom(), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(-delx, -dely)));\r\n            this.P2 = new Microsoft.Msagl.Routing.CdtSite.ctor(Microsoft.Msagl.Core.Geometry.Point.op_Addition(box.get_RightBottom(), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(delx, -dely)));\r\n        },\r\n        AddPolylineToAllInputSites: function (poly){\r\n            for (var pp = poly.get_StartPoint(); pp.get_Next() != null; pp = pp.get_Next())\r\n                this.AddConstrainedEdge(pp.get_Point(), pp.get_Next().get_Point(), poly);\r\n            if (poly.get_Closed())\r\n                this.AddConstrainedEdge(poly.get_EndPoint().get_Point(), poly.get_StartPoint().get_Point(), poly);\r\n        },\r\n        AddConstrainedEdge: function (a, b, poly){\r\n            var ab = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.Above$$Point$$Point(a, b);\r\n            var upperPoint;\r\n            var lowerPoint;\r\n            if (ab > 0){\r\n                upperPoint = this.AddSite(a, poly);\r\n                lowerPoint = this.AddSite(b, poly);\r\n            }\r\n            else {\r\n                upperPoint = this.AddSite(b, poly);\r\n                lowerPoint = this.AddSite(a, poly);\r\n            }\r\n            var edge = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.CreateEdgeOnOrderedCouple(upperPoint, lowerPoint);\r\n            edge.Constrained = true;\r\n        },\r\n        GetTriangles: function (){\r\n            return this.sweeper.get_Triangles();\r\n        },\r\n        RunInternal: function (){\r\n            this.Initialization();\r\n            this.SweepAndFinalize();\r\n        },\r\n        SweepAndFinalize: function (){\r\n            this.sweeper = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.ctor(this.allInputSites, this.P1, this.P2, Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.GetOrCreateEdge);\r\n            this.sweeper.Run();\r\n        },\r\n        Initialization: function (){\r\n            this.FillAllInputSites();\r\n            this.allInputSites.Sort$$Comparison$1(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.Cdt.OnComparison);\r\n        },\r\n        RestoreEdgeCapacities: function (){\r\n            var $it38 = this.allInputSites.GetEnumerator();\r\n            while ($it38.MoveNext()){\r\n                var site = $it38.get_Current();\r\n                var $it39 = site.Edges.GetEnumerator();\r\n                while ($it39.MoveNext()){\r\n                    var e = $it39.get_Current();\r\n                    if (!e.Constrained)\r\n                        e.set_ResidualCapacity(e.Capacity);\r\n                }\r\n            }\r\n        },\r\n        SetInEdges: function (){\r\n            var $it40 = this.PointsToSites.get_Values().GetEnumerator();\r\n            while ($it40.MoveNext()){\r\n                var site = $it40.get_Current();\r\n                var edges = site.Edges;\r\n                for (var i = edges.get_Count() - 1; i >= 0; i--){\r\n                    var e = edges.get_Item$$Int32(i);\r\n                    var oSite = e.lowerSite;\r\n                    oSite.AddInEdge(e);\r\n                }\r\n            }\r\n        },\r\n        FindSite: function (point){\r\n            return this.PointsToSites.get_Item$$TKey(point);\r\n        },\r\n        GetCdtTree: function (){\r\n            if (this.cdtTree == null){\r\n                this.cdtTree = Microsoft.Msagl.Core.Geometry.RectangleNode$1.CreateRectangleNodeOnEnumeration(System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor, Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor, this.GetTriangles(), $CreateAnonymousDelegate(this, function (t){\r\n                    return new Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor$$TData$$Rectangle(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor, t, t.BoundingBox());\r\n                })));\r\n            }\r\n            return this.cdtTree;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$Cdt);\r\nvar Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$CdtTriangle = {\r\n    fullname: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$CdtSite$$CdtSite$$CdtSite$$Func$3$CdtSite$CdtSite$CdtEdge: function (a, b, c, createEdgeDelegate){\r\n            this.Edges = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.ThreeArray$1.ctor(Microsoft.Msagl.Routing.CdtEdge.ctor);\r\n            this.Sites = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.ThreeArray$1.ctor(Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            System.Object.ctor.call(this);\r\n            var orientation = Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(a.Point, b.Point, c.Point);\r\n            switch (orientation){\r\n                case Microsoft.Msagl.Core.Geometry.TriangleOrientation.Counterclockwise:\r\n                    this.FillCcwTriangle(a, b, c, createEdgeDelegate);\r\n                    break;\r\n                case Microsoft.Msagl.Core.Geometry.TriangleOrientation.Clockwise:\r\n                    this.FillCcwTriangle(a, c, b, createEdgeDelegate);\r\n                    break;\r\n                default:\r\n                    throw $CreateException(new System.InvalidOperationException.ctor(), new Error());\r\n            }\r\n        },\r\n        ctor$$CdtSite$$CdtEdge$$Func$3$CdtSite$CdtSite$CdtEdge: function (pi, edge, createEdgeDelegate){\r\n            this.Edges = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.ThreeArray$1.ctor(Microsoft.Msagl.Routing.CdtEdge.ctor);\r\n            this.Sites = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.ThreeArray$1.ctor(Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            System.Object.ctor.call(this);\r\n            switch (Microsoft.Msagl.Core.Geometry.Point.GetTriangleOrientationWithNoEpsilon(edge.upperSite.Point, edge.lowerSite.Point, pi.Point)){\r\n                case Microsoft.Msagl.Core.Geometry.TriangleOrientation.Counterclockwise:\r\n                    edge.set_CcwTriangle(this);\r\n                    this.Sites.set_Item$$Int32(0, edge.upperSite);\r\n                    this.Sites.set_Item$$Int32(1, edge.lowerSite);\r\n                    break;\r\n                case Microsoft.Msagl.Core.Geometry.TriangleOrientation.Clockwise:\r\n                    edge.set_CwTriangle(this);\r\n                    this.Sites.set_Item$$Int32(0, edge.lowerSite);\r\n                    this.Sites.set_Item$$Int32(1, edge.upperSite);\r\n                    break;\r\n                default:\r\n                    throw $CreateException(new System.InvalidOperationException.ctor(), new Error());\r\n            }\r\n            this.Edges.set_Item$$Int32(0, edge);\r\n            this.Sites.set_Item$$Int32(2, pi);\r\n            this.CreateEdge(1, createEdgeDelegate);\r\n            this.CreateEdge(2, createEdgeDelegate);\r\n        },\r\n        ctor$$CdtSite$$CdtSite$$CdtSite$$CdtEdge$$CdtEdge$$Func$3$CdtSite$CdtSite$CdtEdge: function (aLeft, aRight, bRight, a, b, createEdgeDelegate){\r\n            this.Edges = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.ThreeArray$1.ctor(Microsoft.Msagl.Routing.CdtEdge.ctor);\r\n            this.Sites = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.ThreeArray$1.ctor(Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            System.Object.ctor.call(this);\r\n            this.Sites.set_Item$$Int32(0, aLeft);\r\n            this.Sites.set_Item$$Int32(1, aRight);\r\n            this.Sites.set_Item$$Int32(2, bRight);\r\n            this.Edges.set_Item$$Int32(0, a);\r\n            this.Edges.set_Item$$Int32(1, b);\r\n            this.BindEdgeToTriangle(aLeft, a);\r\n            this.BindEdgeToTriangle(aRight, b);\r\n            this.CreateEdge(2, createEdgeDelegate);\r\n        },\r\n        BindEdgeToTriangle: function (site, edge){\r\n            if (site == edge.upperSite)\r\n                edge.set_CcwTriangle(this);\r\n            else\r\n                edge.set_CwTriangle(this);\r\n        },\r\n        FillCcwTriangle: function (a, b, c, createEdgeDelegate){\r\n            this.Sites.set_Item$$Int32(0, a);\r\n            this.Sites.set_Item$$Int32(1, b);\r\n            this.Sites.set_Item$$Int32(2, c);\r\n            for (var i = 0; i < 3; i++)\r\n                this.CreateEdge(i, createEdgeDelegate);\r\n        },\r\n        CreateEdge: function (i, createEdgeDelegate){\r\n            var a = this.Sites.get_Item$$Int32(i);\r\n            var b = this.Sites.get_Item$$Int32(i + 1);\r\n            var edge = (function ($p1){\r\n                this.Edges.set_Item$$Int32(i, $p1);\r\n                return $p1;\r\n            }).call(this, createEdgeDelegate(a, b));\r\n            this.BindEdgeToTriangle(a, edge);\r\n        },\r\n        Contains: function (cdtSite){\r\n            return this.Sites.Contains(cdtSite);\r\n        },\r\n        OppositeEdge: function (pi){\r\n            var index = this.Sites.Index(pi);\r\n            return this.Edges.get_Item$$Int32(index + 1);\r\n        },\r\n        OppositeSite: function (cdtEdge){\r\n            var i = this.Edges.Index(cdtEdge);\r\n            return this.Sites.get_Item$$Int32(i + 2);\r\n        },\r\n        BoundingBox: function (){\r\n            var rect = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Point$$Point(this.Sites.get_Item$$Int32(0).Point, this.Sites.get_Item$$Int32(1).Point);\r\n            rect.Add$$Point(this.Sites.get_Item$$Int32(2).Point);\r\n            return rect;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$CdtTriangle);\r\nvar Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$EdgeInserter = {\r\n    fullname: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.EdgeInserter",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        LocalInCircle: function (v, a, b, c, reverseTrangleWhenCompare){\r\n            return reverseTrangleWhenCompare ? Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.InCircle(v, a, c, b) : Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.InCircle(v, a, b, c);\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (edge, triangles, front, createEdgeDelegate){\r\n            this.edge = null;\r\n            this.triangles = null;\r\n            this.front = null;\r\n            this.createEdgeDelegate = null;\r\n            this.rightPolygon = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            this.leftPolygon = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Routing.CdtSite.ctor);\r\n            this.addedTriangles = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor);\r\n            System.Object.ctor.call(this);\r\n            this.edge = edge;\r\n            this.triangles = triangles;\r\n            this.front = front;\r\n            this.createEdgeDelegate = createEdgeDelegate;\r\n        },\r\n        Run: function (){\r\n            this.TraceEdgeThroughTriangles();\r\n            this.TriangulatePolygon$$List$1$CdtSite$$CdtSite$$CdtSite$$Boolean(this.rightPolygon, this.edge.upperSite, this.edge.lowerSite, true);\r\n            this.TriangulatePolygon$$List$1$CdtSite$$CdtSite$$CdtSite$$Boolean(this.leftPolygon, this.edge.upperSite, this.edge.lowerSite, false);\r\n            this.UpdateFront();\r\n        },\r\n        UpdateFront: function (){\r\n            var newFrontEdges = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Routing.CdtEdge.ctor);\r\n            var $it41 = this.addedTriangles.GetEnumerator();\r\n            while ($it41.MoveNext()){\r\n                var t = $it41.get_Current();\r\n                var $it42 = t.Edges.GetEnumerator();\r\n                while ($it42.MoveNext()){\r\n                    var e = $it42.get_Current();\r\n                    if (e.get_CwTriangle() == null || e.get_CcwTriangle() == null)\r\n                        newFrontEdges.Insert(e);\r\n                }\r\n            }\r\n            var $it43 = newFrontEdges.GetEnumerator();\r\n            while ($it43.MoveNext()){\r\n                var e = $it43.get_Current();\r\n                this.AddEdgeToFront(e);\r\n            }\r\n        },\r\n        AddEdgeToFront: function (e){\r\n            var leftSite = e.upperSite.Point.get_X() < e.lowerSite.Point.get_X() ? e.upperSite : e.lowerSite;\r\n            this.front.Insert(new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor(leftSite, e));\r\n        },\r\n        TriangulatePolygon$$List$1$CdtSite$$CdtSite$$CdtSite$$Boolean: function (polygon, a, b, reverseTrangleWhenCompare){\r\n            if (polygon.get_Count() > 0)\r\n                this.TriangulatePolygon$$Int32$$Int32$$List$1$CdtSite$$CdtSite$$CdtSite$$Boolean(0, polygon.get_Count() - 1, polygon, a, b, reverseTrangleWhenCompare);\r\n        },\r\n        TriangulatePolygon$$Int32$$Int32$$List$1$CdtSite$$CdtSite$$CdtSite$$Boolean: function (start, end, polygon, a, b, reverseTrangleWhenCompare){\r\n            var c = polygon.get_Item$$Int32(start);\r\n            var cIndex = start;\r\n            for (var i = start + 1; i <= end; i++){\r\n                var v = polygon.get_Item$$Int32(i);\r\n                if (Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.EdgeInserter.LocalInCircle(v, a, b, c, reverseTrangleWhenCompare)){\r\n                    cIndex = i;\r\n                    c = v;\r\n                }\r\n            }\r\n            var t = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor$$CdtSite$$CdtSite$$CdtSite$$Func$3$CdtSite$CdtSite$CdtEdge(a, b, c, this.createEdgeDelegate);\r\n            this.triangles.Insert(t);\r\n            this.addedTriangles.Add(t);\r\n            if (start < cIndex)\r\n                this.TriangulatePolygon$$Int32$$Int32$$List$1$CdtSite$$CdtSite$$CdtSite$$Boolean(start, cIndex - 1, polygon, a, c, reverseTrangleWhenCompare);\r\n            if (cIndex < end)\r\n                this.TriangulatePolygon$$Int32$$Int32$$List$1$CdtSite$$CdtSite$$CdtSite$$Boolean(cIndex + 1, end, polygon, c, b, reverseTrangleWhenCompare);\r\n        },\r\n        TraceEdgeThroughTriangles: function (){\r\n            var edgeTracer = new Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.EdgeTracer.ctor(this.edge, this.triangles, this.front, this.leftPolygon, this.rightPolygon);\r\n            edgeTracer.Run();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$EdgeInserter);\r\nvar Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$EdgeTracer = {\r\n    fullname: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.EdgeTracer",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (edge, triangles, front, leftPolygon, rightPolygon){\r\n            this.edge = null;\r\n            this.triangles = null;\r\n            this.front = null;\r\n            this.leftPolygon = null;\r\n            this.rightPolygon = null;\r\n            this.a = null;\r\n            this.b = null;\r\n            this.piercedEdge = null;\r\n            this.piercedTriangle = null;\r\n            this.piercedToTheLeftFrontElemNode = null;\r\n            this.piercedToTheRightFrontElemNode = null;\r\n            this.elementsToBeRemovedFromFront = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtFrontElement.ctor);\r\n            this.removedTriangles = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtTriangle.ctor);\r\n            System.Object.ctor.call(this);\r\n            this.edge = edge;\r\n            this.triangles = triangles;\r\n            this.front = front;\r\n            this.leftPolygon = leftPolygon;\r\n            this.rightPolygon = rightPolygon;\r\n            this.a = edge.upperSite;\r\n            this.b = edge.lowerSite;\r\n        },\r\n        Run: function (){\r\n            this.Init();\r\n            this.Traverse();\r\n        },\r\n        Traverse: function (){\r\n            while (!this.BIsReached()){\r\n                if (this.piercedToTheLeftFrontElemNode != null){\r\n                    this.ProcessLeftFrontPiercedElement();\r\n                }\r\n                else if (this.piercedToTheRightFrontElemNode != null){\r\n                    this.ProcessRightFrontPiercedElement();\r\n                }\r\n                else\r\n                    this.ProcessPiercedEdge();\r\n            }\r\n            if (this.piercedTriangle != null)\r\n                this.RemovePiercedTriangle(this.piercedTriangle);\r\n            this.FindMoreRemovedFromFrontElements();\r\n            var $it44 = this.elementsToBeRemovedFromFront.GetEnumerator();\r\n            while ($it44.MoveNext()){\r\n                var elem = $it44.get_Current();\r\n                this.front.Remove(elem);\r\n            }\r\n        },\r\n        ProcessLeftFrontPiercedElement: function (){\r\n            var v = this.piercedToTheLeftFrontElemNode;\r\n            do{\r\n                this.elementsToBeRemovedFromFront.Add(v.Item);\r\n                this.AddSiteToLeftPolygon(v.Item.LeftSite);\r\n                v = this.front.Previous(v);\r\n            }\r\n            while (Microsoft.Msagl.Core.Geometry.Point.PointToTheLeftOfLine(v.Item.LeftSite.Point, this.a.Point, this.b.Point))\r\n            this.elementsToBeRemovedFromFront.Add(v.Item);\r\n            this.AddSiteToRightPolygon(v.Item.LeftSite);\r\n            if (v.Item.LeftSite == this.b){\r\n                this.piercedToTheLeftFrontElemNode = v;\r\n                return;\r\n            }\r\n            this.FindPiercedTriangle(v);\r\n            this.piercedToTheLeftFrontElemNode = null;\r\n        },\r\n        FindPiercedTriangle: function (v){\r\n            var e = v.Item.Edge;\r\n            var t = (e.get_CcwTriangle() != null ? e.get_CcwTriangle() : e.get_CwTriangle());\r\n            var eIndex = t.Edges.Index(e);\r\n            for (var i = 1; i <= 2; i++){\r\n                var ei = t.Edges.get_Item$$Int32(i + eIndex);\r\n                var signedArea0 = Microsoft.Msagl.Core.Geometry.ApproximateComparer.Sign(Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(ei.lowerSite.Point, this.a.Point, this.b.Point));\r\n                var signedArea1 = Microsoft.Msagl.Core.Geometry.ApproximateComparer.Sign(Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(ei.upperSite.Point, this.a.Point, this.b.Point));\r\n                if (signedArea1 * signedArea0 <= 0){\r\n                    this.piercedTriangle = t;\r\n                    this.piercedEdge = ei;\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        FindMoreRemovedFromFrontElements: function (){\r\n            var $it45 = this.removedTriangles.GetEnumerator();\r\n            while ($it45.MoveNext()){\r\n                var triangle = $it45.get_Current();\r\n                var $it46 = triangle.Edges.GetEnumerator();\r\n                while ($it46.MoveNext()){\r\n                    var e = $it46.get_Current();\r\n                    if (e.get_CcwTriangle() == null && e.get_CwTriangle() == null){\r\n                        var site = e.upperSite.Point.get_X() < e.lowerSite.Point.get_X() ? e.upperSite : e.lowerSite;\r\n                        var frontNode = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.FindNodeInFrontBySite(this.front, site);\r\n                        if (frontNode.Item.Edge == e)\r\n                            this.elementsToBeRemovedFromFront.Add(frontNode.Item);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        ProcessPiercedEdge: function (){\r\n            if (this.piercedEdge.get_CcwTriangle() == this.piercedTriangle){\r\n                this.AddSiteToLeftPolygon(this.piercedEdge.lowerSite);\r\n                this.AddSiteToRightPolygon(this.piercedEdge.upperSite);\r\n            }\r\n            else {\r\n                this.AddSiteToLeftPolygon(this.piercedEdge.upperSite);\r\n                this.AddSiteToRightPolygon(this.piercedEdge.lowerSite);\r\n            }\r\n            this.RemovePiercedTriangle(this.piercedTriangle);\r\n            this.PrepareNextStateAfterPiercedEdge();\r\n        },\r\n        PrepareNextStateAfterPiercedEdge: function (){\r\n            var t = (this.piercedEdge.get_CwTriangle() != null ? this.piercedEdge.get_CwTriangle() : this.piercedEdge.get_CcwTriangle());\r\n            var eIndex = t.Edges.Index(this.piercedEdge);\r\n            for (var i = 1; i <= 2; i++){\r\n                var e = t.Edges.get_Item$$Int32(i + eIndex);\r\n                var signedArea0 = Microsoft.Msagl.Core.Geometry.ApproximateComparer.Sign(Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(e.lowerSite.Point, this.a.Point, this.b.Point));\r\n                var signedArea1 = Microsoft.Msagl.Core.Geometry.ApproximateComparer.Sign(Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(e.upperSite.Point, this.a.Point, this.b.Point));\r\n                if (signedArea1 * signedArea0 <= 0){\r\n                    if (e.get_CwTriangle() != null && e.get_CcwTriangle() != null){\r\n                        this.piercedTriangle = t;\r\n                        this.piercedEdge = e;\r\n                        break;\r\n                    }\r\n                    this.piercedTriangle = null;\r\n                    this.piercedEdge = null;\r\n                    var leftSite = e.upperSite.Point.get_X() < e.lowerSite.Point.get_X() ? e.upperSite : e.lowerSite;\r\n                    var frontElem = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.FindNodeInFrontBySite(this.front, leftSite);\r\n                    if (leftSite.Point.get_X() < this.a.Point.get_X())\r\n                        this.piercedToTheLeftFrontElemNode = frontElem;\r\n                    else\r\n                        this.piercedToTheRightFrontElemNode = frontElem;\r\n                    this.RemovePiercedTriangle((e.get_CwTriangle() != null ? e.get_CwTriangle() : e.get_CcwTriangle()));\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        RemovePiercedTriangle: function (t){\r\n            this.triangles.Remove(t);\r\n            var $it47 = t.Edges.GetEnumerator();\r\n            while ($it47.MoveNext()){\r\n                var e = $it47.get_Current();\r\n                if (e.get_CwTriangle() == t)\r\n                    e.set_CwTriangle(null);\r\n                else\r\n                    e.set_CcwTriangle(null);\r\n            }\r\n            this.removedTriangles.Add(t);\r\n        },\r\n        ProcessRightFrontPiercedElement: function (){\r\n            var v = this.piercedToTheRightFrontElemNode;\r\n            do{\r\n                this.elementsToBeRemovedFromFront.Add(v.Item);\r\n                this.AddSiteToRightPolygon(v.Item.RightSite);\r\n                v = this.front.Next(v);\r\n            }\r\n            while (Microsoft.Msagl.Core.Geometry.Point.PointToTheRightOfLine(v.Item.RightSite.Point, this.a.Point, this.b.Point))\r\n            this.elementsToBeRemovedFromFront.Add(v.Item);\r\n            this.AddSiteToLeftPolygon(v.Item.RightSite);\r\n            if (v.Item.RightSite == this.b){\r\n                this.piercedToTheRightFrontElemNode = v;\r\n                return;\r\n            }\r\n            this.FindPiercedTriangle(v);\r\n            this.piercedToTheRightFrontElemNode = null;\r\n        },\r\n        AddSiteToLeftPolygon: function (site){\r\n            this.AddSiteToPolygonWithCheck(site, this.leftPolygon);\r\n        },\r\n        AddSiteToPolygonWithCheck: function (site, list){\r\n            if (site == this.b)\r\n                return;\r\n            if (list.get_Count() == 0 || list.get_Item$$Int32(list.get_Count() - 1) != site)\r\n                list.Add(site);\r\n        },\r\n        AddSiteToRightPolygon: function (site){\r\n            this.AddSiteToPolygonWithCheck(site, this.rightPolygon);\r\n        },\r\n        BIsReached: function (){\r\n            var node = (this.piercedToTheLeftFrontElemNode != null ? this.piercedToTheLeftFrontElemNode : this.piercedToTheRightFrontElemNode);\r\n            if (node != null)\r\n                return node.Item.Edge.IsAdjacent(this.b);\r\n            return this.piercedEdge.IsAdjacent(this.b);\r\n        },\r\n        Init: function (){\r\n            var frontElemNodeRightOfA = Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.CdtSweeper.FindNodeInFrontBySite(this.front, this.a);\r\n            var frontElemNodeLeftOfA = this.front.Previous(frontElemNodeRightOfA);\r\n            if (Microsoft.Msagl.Core.Geometry.Point.PointToTheLeftOfLine(this.b.Point, frontElemNodeLeftOfA.Item.LeftSite.Point, frontElemNodeLeftOfA.Item.RightSite.Point))\r\n                this.piercedToTheLeftFrontElemNode = frontElemNodeLeftOfA;\r\n            else if (Microsoft.Msagl.Core.Geometry.Point.PointToTheRightOfLine(this.b.Point, frontElemNodeRightOfA.Item.RightSite.Point, frontElemNodeRightOfA.Item.LeftSite.Point))\r\n                this.piercedToTheRightFrontElemNode = frontElemNodeRightOfA;\r\n            else {\r\n                var $it48 = this.a.Edges.GetEnumerator();\r\n                while ($it48.MoveNext()){\r\n                    var e = $it48.get_Current();\r\n                    var t = e.get_CcwTriangle();\r\n                    if (t == null)\r\n                        continue;\r\n                    if (Microsoft.Msagl.Core.Geometry.Point.PointToTheLeftOfLine(this.b.Point, e.lowerSite.Point, e.upperSite.Point))\r\n                        continue;\r\n                    var eIndex = t.Edges.Index(e);\r\n                    var site = t.Sites.get_Item$$Int32(eIndex + 2);\r\n                    if (Microsoft.Msagl.Core.Geometry.Point.PointToTheLeftOfLineOrOnLine(this.b.Point, site.Point, e.upperSite.Point)){\r\n                        this.piercedEdge = t.Edges.get_Item$$Int32(eIndex + 1);\r\n                        this.piercedTriangle = t;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$EdgeTracer);\r\nvar Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$PerimeterEdge = {\r\n    fullname: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.PerimeterEdge",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (edge){\r\n            this.Start = null;\r\n            this.End = null;\r\n            this.Prev = null;\r\n            this.Next = null;\r\n            this.Edge = null;\r\n            System.Object.ctor.call(this);\r\n            this.Edge = edge;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$PerimeterEdge);\r\nvar Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$ThreeArray$1 = {\r\n    fullname: "Microsoft.Msagl.Routing.ConstrainedDelaunayTriangulation.ThreeArray$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["System.Collections.Generic.IEnumerable$1"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (T){\r\n            this.T = T;\r\n            this.item0 = null;\r\n            this.item1 = null;\r\n            this.item2 = null;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Contains: function (t){\r\n            return t.Equals$$Object(this.item0) || t.Equals$$Object(this.item1) || t.Equals$$Object(this.item2);\r\n        },\r\n        Index: function (t){\r\n            if (t.Equals$$Object(this.item0))\r\n                return 0;\r\n            if (t.Equals$$Object(this.item1))\r\n                return 1;\r\n            if (t.Equals$$Object(this.item2))\r\n                return 2;\r\n            return -1;\r\n        },\r\n        Item$$: "`0",\r\n        get_Item$$Int32: function (i){\r\n            switch (i){\r\n                case 0:\r\n                case 3:\r\n                case -3:\r\n                    return this.item0;\r\n                case 1:\r\n                case 4:\r\n                case -2:\r\n                    return this.item1;\r\n                case 2:\r\n                case 5:\r\n                case -1:\r\n                    return this.item2;\r\n                default:\r\n                    throw $CreateException(new System.InvalidOperationException.ctor(), new Error());\r\n            }\r\n        },\r\n        set_Item$$Int32: function (i, value){\r\n            switch (i){\r\n                case 0:\r\n                case 3:\r\n                case -3:\r\n                    this.item0 = value;\r\n                    break;\r\n                case 1:\r\n                case 4:\r\n                case -2:\r\n                    this.item1 = value;\r\n                    break;\r\n                case 2:\r\n                case 5:\r\n                case -1:\r\n                    this.item2 = value;\r\n                    break;\r\n                default:\r\n                    throw $CreateException(new System.InvalidOperationException.ctor(), new Error());\r\n            }\r\n        },\r\n        GetEnumerator: function (){\r\n            var $yield = [];\r\n            $yield.push(this.item0);\r\n            $yield.push(this.item1);\r\n            $yield.push(this.item2);\r\n            return $yield.GetEnumerator();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$ConstrainedDelaunayTriangulation$ThreeArray$1);\r\nvar Microsoft$Msagl$Core$DataStructures$BinaryHeapPriorityQueue = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.BinaryHeapPriorityQueue",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        Test: function (){\r\n            var q = new Microsoft.Msagl.Core.DataStructures.BinaryHeapPriorityQueue.ctor(10);\r\n            q.Enqueue(2, 2);\r\n            q.Enqueue(1, 1);\r\n            q.Enqueue(9, 9);\r\n            q.Enqueue(8, 8);\r\n            q.Enqueue(5, 5);\r\n            q.Enqueue(3, 3);\r\n            q.Enqueue(4, 4);\r\n            q.Enqueue(7, 7);\r\n            q.Enqueue(6, 6);\r\n            q.Enqueue(0, 0);\r\n            for (var i = 0; i < 10; i++)\r\n                System.Console.WriteLine$$Int32(q.Dequeue());\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (n){\r\n            this._heap = null;\r\n            this._reverse_heap = null;\r\n            this._priors = null;\r\n            this.heapSize = 0;\r\n            System.Object.ctor.call(this);\r\n            this._priors = new Float64Array(n);\r\n            this._heap = new Int32Array(n + 1);\r\n            this._reverse_heap = new Int32Array(n);\r\n        },\r\n        Count$$: "System.Int32",\r\n        get_Count: function (){\r\n            return this.heapSize;\r\n        },\r\n        SwapWithParent: function (i){\r\n            var parent = this._heap[i >> 1];\r\n            this.PutAtI(i >> 1, this._heap[i]);\r\n            this.PutAtI(i, parent);\r\n        },\r\n        Enqueue: function (o, priority){\r\n            this.heapSize++;\r\n            var i = this.heapSize;\r\n            this._priors[o] = priority;\r\n            this.PutAtI(i, o);\r\n            while (i > 1 && this._priors[this._heap[i >> 1]] > priority){\r\n                this.SwapWithParent(i);\r\n                i >>= 1;\r\n            }\r\n        },\r\n        PutAtI: function (i, h){\r\n            this._heap[i] = h;\r\n            this._reverse_heap[h] = i;\r\n        },\r\n        Dequeue: function (){\r\n            if (this.heapSize == 0)\r\n                throw $CreateException(new System.InvalidOperationException.ctor(), new Error());\r\n            var ret = this._heap[1];\r\n            if (this.heapSize > 1){\r\n                this.PutAtI(1, this._heap[this.heapSize]);\r\n                var i = 1;\r\n                while (true){\r\n                    var smallest = i;\r\n                    var l = i << 1;\r\n                    if (l <= this.heapSize && this._priors[this._heap[l]] < this._priors[this._heap[i]])\r\n                        smallest = l;\r\n                    var r = l + 1;\r\n                    if (r <= this.heapSize && this._priors[this._heap[r]] < this._priors[this._heap[smallest]])\r\n                        smallest = r;\r\n                    if (smallest != i)\r\n                        this.SwapWithParent(smallest);\r\n                    else\r\n                        break;\r\n                    i = smallest;\r\n                }\r\n            }\r\n            this.heapSize--;\r\n            return ret;\r\n        },\r\n        DecreasePriority: function (o, newPriority){\r\n            this._priors[o] = newPriority;\r\n            var i = this._reverse_heap[o];\r\n            while (i > 1){\r\n                if (this._priors[this._heap[i]] < this._priors[this._heap[i >> 1]])\r\n                    this.SwapWithParent(i);\r\n                else\r\n                    break;\r\n                i >>= 1;\r\n            }\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$BinaryHeapPriorityQueue);\r\nvar Microsoft$Msagl$Core$ProgressChangedEventArgs = {\r\n    fullname: "Microsoft.Msagl.Core.ProgressChangedEventArgs",\r\n    baseTypeName: "System.EventArgs",\r\n    staticDefinition: {\r\n        cctor: function (){\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$Double: function (ratioComplete){\r\n            this.algorithmDescription = null;\r\n            this.ratioComplete = 0;\r\n            Microsoft.Msagl.Core.ProgressChangedEventArgs.ctor$$Double$$String.call(this, ratioComplete, null);\r\n        },\r\n        ctor$$Double$$String: function (ratioComplete, algorithmDescription){\r\n            this.algorithmDescription = null;\r\n            this.ratioComplete = 0;\r\n            System.EventArgs.ctor.call(this);\r\n            this.ratioComplete = ratioComplete;\r\n            this.algorithmDescription = algorithmDescription;\r\n        },\r\n        RatioComplete$$: "System.Double",\r\n        get_RatioComplete: function (){\r\n            return this.ratioComplete;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$ProgressChangedEventArgs);\r\nvar Microsoft$Msagl$Core$CancelToken = {\r\n    fullname: "Microsoft.Msagl.Core.CancelToken",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.canceled = false;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Canceled$$: "System.Boolean",\r\n        get_Canceled: function (){\r\n            return this.canceled;\r\n        },\r\n        set_Canceled: function (value){\r\n            this.canceled = value;\r\n        },\r\n        ThrowIfCanceled: function (){\r\n            if (this.get_Canceled())\r\n                throw $CreateException(new System.OperationCanceledException.ctor(), new Error());\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$CancelToken);\r\nvar Microsoft$Msagl$Core$Layout$GeometryGraph = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.GeometryGraph",\r\n    baseTypeName: "Microsoft.Msagl.Core.Layout.GeometryObject",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.nodes = null;\r\n            this.boundingBox = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            Microsoft.Msagl.Core.Layout.GeometryObject.ctor.call(this);\r\n            this.nodes = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Layout.Node.ctor);\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            return this.boundingBox;\r\n        },\r\n        set_BoundingBox: function (value){\r\n            this.boundingBox = value;\r\n        },\r\n        Nodes$$: "System.Collections.Generic.IList`1[[Microsoft.Msagl.Core.Layout.Node]]",\r\n        get_Nodes: function (){\r\n            return this.nodes;\r\n        },\r\n        set_Nodes: function (value){\r\n            this.nodes = value;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$GeometryGraph);\r\nvar Microsoft$Msagl$Core$Layout$GeometryObject = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.GeometryObject",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.beforeLayoutChangeEvent = null;\r\n            this.BeforeLayoutChangeEvent = null;\r\n            this._UserData = null;\r\n            this._BoundingBox = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            System.Object.ctor.call(this);\r\n        },\r\n        UserData$$: "System.Object",\r\n        get_UserData: function (){\r\n            return this._UserData;\r\n        },\r\n        set_UserData: function (value){\r\n            this._UserData = value;\r\n        },\r\n        add_beforeLayoutChangeEvent: function (value){\r\n            this.beforeLayoutChangeEvent = $CombineDelegates(this.beforeLayoutChangeEvent, value);\r\n        },\r\n        remove_beforeLayoutChangeEvent: function (value){\r\n            this.beforeLayoutChangeEvent = $RemoveDelegate(this.beforeLayoutChangeEvent, value);\r\n        },\r\n        add_BeforeLayoutChangeEvent: function (value){\r\n            this.add_beforeLayoutChangeEvent(value);\r\n        },\r\n        remove_BeforeLayoutChangeEvent: function (value){\r\n            this.remove_beforeLayoutChangeEvent(value);\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            return this._BoundingBox;\r\n        },\r\n        set_BoundingBox: function (value){\r\n            this._BoundingBox = value;\r\n        },\r\n        RaiseLayoutChangeEvent: function (newValue){\r\n            if (this.beforeLayoutChangeEvent != null)\r\n                this.beforeLayoutChangeEvent(this, (function (){\r\n                    var $v7 = new Microsoft.Msagl.Core.Layout.LayoutChangeEventArgs.ctor();\r\n                    $v7.DataAfterChange = newValue;\r\n                    return $v7;\r\n                }).call(this));\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$GeometryObject);\r\nvar Microsoft$Msagl$Core$GraphAlgorithms$IEdge = {\r\n    fullname: "Microsoft.Msagl.Core.GraphAlgorithms.IEdge",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Interface"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$GraphAlgorithms$IEdge);\r\nvar Microsoft$Msagl$Core$Layout$ILabeledObject = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.ILabeledObject",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Interface"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$ILabeledObject);\r\nvar Microsoft$Msagl$Core$Layout$Label = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.Label",\r\n    baseTypeName: "Microsoft.Msagl.Core.Layout.GeometryObject",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.boundingBox = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            this.attachmentSegmentStart = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            Microsoft.Msagl.Core.Layout.GeometryObject.ctor.call(this);\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            return this.boundingBox;\r\n        },\r\n        set_BoundingBox: function (value){\r\n            this.RaiseLayoutChangeEvent(value);\r\n            this.boundingBox = value;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$Label);\r\nvar Microsoft$Msagl$Core$Geometry$Point = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Point",\r\n    baseTypeName: "System.ValueType",\r\n    staticDefinition: {\r\n        cctor: function (){\r\n            Microsoft.Msagl.Core.Geometry.Point.rnd = new System.Random.ctor$$Int32(1);\r\n        },\r\n        P: function (xCoordinate, yCoordinate){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(xCoordinate, yCoordinate);\r\n        },\r\n        op_Equality: function (point0, point1){\r\n            return point0.get_X() == point1.get_X() && point0.get_Y() == point1.get_Y();\r\n        },\r\n        op_Inequality: function (point0, point1){\r\n            return !(Microsoft.Msagl.Core.Geometry.Point.op_Equality(point0, point1));\r\n        },\r\n        op_UnaryNegation: function (point0){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(-point0.get_X(), -point0.get_Y());\r\n        },\r\n        op_Addition: function (point0, point1){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(point0.get_X() + point1.get_X(), point0.get_Y() + point1.get_Y());\r\n        },\r\n        op_Subtraction: function (point0, point1){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(point0.get_X() - point1.get_X(), point0.get_Y() - point1.get_Y());\r\n        },\r\n        op_Multiply$$Point$$Point: function (point0, point1){\r\n            return point0.get_X() * point1.get_X() + point0.get_Y() * point1.get_Y();\r\n        },\r\n        op_Multiply$$Double$$Point: function (coefficient, point){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(coefficient * point.get_X(), coefficient * point.get_Y());\r\n        },\r\n        op_Multiply$$Point$$Double: function (point, coefficient){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(coefficient * point.get_X(), coefficient * point.get_Y());\r\n        },\r\n        op_Division: function (point, coefficient){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(point.get_X() / coefficient, point.get_Y() / coefficient);\r\n        },\r\n        DoubleToString: function (d){\r\n            return (System.Math.Abs$$Double(d) < 1E-11) ? "0" : d.ToString$$String$$IFormatProvider("#.##########", System.Globalization.CultureInfo.get_InvariantCulture());\r\n        },\r\n        ParallelWithinEpsilon: function (a, b, eps){\r\n            var alength = a.get_Length();\r\n            var blength = b.get_Length();\r\n            if (alength < eps || blength < eps)\r\n                return true;\r\n            a = Microsoft.Msagl.Core.Geometry.Point.op_Division(a, alength);\r\n            b = Microsoft.Msagl.Core.Geometry.Point.op_Division(b, blength);\r\n            return System.Math.Abs$$Double(-a.get_X() * b.get_Y() + a.get_Y() * b.get_X()) < eps;\r\n        },\r\n        SignedDoubledTriangleArea: function (cornerA, cornerB, cornerC){\r\n            return (cornerB.get_X() - cornerA.get_X()) * (cornerC.get_Y() - cornerA.get_Y()) - (cornerC.get_X() - cornerA.get_X()) * (cornerB.get_Y() - cornerA.get_Y());\r\n        },\r\n        GetTriangleOrientationWithNoEpsilon: function (cornerA, cornerB, cornerC){\r\n            var area = Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(cornerA, cornerB, cornerC);\r\n            if (area > 0)\r\n                return Microsoft.Msagl.Core.Geometry.TriangleOrientation.Counterclockwise;\r\n            if (area < 0)\r\n                return Microsoft.Msagl.Core.Geometry.TriangleOrientation.Clockwise;\r\n            return Microsoft.Msagl.Core.Geometry.TriangleOrientation.Collinear;\r\n        },\r\n        PointToTheLeftOfLineOrOnLine: function (point, linePoint0, linePoint1){\r\n            return Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(point, linePoint0, linePoint1) >= 0;\r\n        },\r\n        PointToTheLeftOfLine: function (point, linePoint0, linePoint1){\r\n            return Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(point, linePoint0, linePoint1) > 0;\r\n        },\r\n        PointToTheRightOfLine: function (point, linePoint0, linePoint1){\r\n            return Microsoft.Msagl.Core.Geometry.Point.SignedDoubledTriangleArea(linePoint0, linePoint1, point) < 0;\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["System.IComparable$1"],\r\n    Kind: "Struct",\r\n    definition: {\r\n        ctor$$Double$$Double: function (xCoordinate, yCoordinate){\r\n            this.m_X = 0;\r\n            this.m_Y = 0;\r\n            this._hashKey = null;\r\n            System.ValueType.ctor.call(this);\r\n            this.m_X = xCoordinate;\r\n            this.m_Y = yCoordinate;\r\n            this._hashKey = null;\r\n            this.UpdateHashKey();\r\n        },\r\n        Equals$$Object: function (obj){\r\n            if (!(Is(obj, Microsoft.Msagl.Core.Geometry.Point.ctor)))\r\n                return false;\r\n            return Microsoft.Msagl.Core.Geometry.Point.op_Equality(Cast(obj, Microsoft.Msagl.Core.Geometry.Point.ctor), this);\r\n        },\r\n        GetHashCode: function (){\r\n            var hc = (this.get_X().GetHashCode()) | 0;\r\n            return (((hc << 5 | hc >> 27) + (this.get_Y().GetHashCode()) | 0)) | 0;\r\n        },\r\n        Length$$: "System.Double",\r\n        get_Length: function (){\r\n            return System.Math.Sqrt(this.get_X() * this.get_X() + this.get_Y() * this.get_Y());\r\n        },\r\n        toString: function (){\r\n            return "(" + Microsoft.Msagl.Core.Geometry.Point.DoubleToString(this.get_X()) + "," + Microsoft.Msagl.Core.Geometry.Point.DoubleToString(this.get_Y()) + ")";\r\n        },\r\n        X$$: "System.Double",\r\n        get_X: function (){\r\n            return this.m_X;\r\n        },\r\n        set_X: function (value){\r\n            this.m_X = value;\r\n            this.UpdateHashKey();\r\n        },\r\n        Y$$: "System.Double",\r\n        get_Y: function (){\r\n            return this.m_Y;\r\n        },\r\n        set_Y: function (value){\r\n            this.m_Y = value;\r\n            this.UpdateHashKey();\r\n        },\r\n        UpdateHashKey: function (){\r\n            this._hashKey = "(" + this.get_X() + "," + this.get_Y() + ")";\r\n        },\r\n        Clone: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(this.m_X, this.m_Y);\r\n        },\r\n        Normalize: function (){\r\n            var length = this.get_Length();\r\n            if (length < Microsoft.Msagl.Core.Geometry.ApproximateComparer.get_Tolerance())\r\n                throw $CreateException(new System.InvalidOperationException.ctor(), new Error());\r\n            return Microsoft.Msagl.Core.Geometry.Point.op_Division(this, length);\r\n        },\r\n        CompareTo: function (other){\r\n            var r = this.get_X().CompareTo$$Double(other.get_X());\r\n            return r != 0 ? r : this.get_Y().CompareTo$$Double(other.get_Y());\r\n        },\r\n        ctor: function (){\r\n            this.m_X = 0;\r\n            this.m_Y = 0;\r\n            this._hashKey = null;\r\n            System.ValueType.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Point);\r\nvar Microsoft$Msagl$Core$DataStructures$DefaultComperer$1 = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.DefaultComperer$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["System.Collections.Generic.IComparer$1"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (T){\r\n            this.T = T;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Compare: function (x, y){\r\n            return (x).CompareTo(y);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$DefaultComperer$1);\r\nvar Microsoft$Msagl$Core$DataStructures$RBColor = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.RBColor",\r\n    staticDefinition: {\r\n        Red: 0,\r\n        Black: 1\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$RBColor);\r\nvar Microsoft$Msagl$Core$DataStructures$RBNode$1 = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.RBNode$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$RBColor: function (T, color){\r\n            this.T = T;\r\n            this.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n            this.Item = null;\r\n            this.parent = null;\r\n            this.left = null;\r\n            this.right = null;\r\n            System.Object.ctor.call(this);\r\n            this.color = color;\r\n        },\r\n        ctor$$RBColor$$T$$RBNode$1$$RBNode$1$$RBNode$1: function (T, color, item, p, left, right){\r\n            this.T = T;\r\n            this.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n            this.Item = null;\r\n            this.parent = null;\r\n            this.left = null;\r\n            this.right = null;\r\n            System.Object.ctor.call(this);\r\n            this.color = color;\r\n            this.parent = p;\r\n            this.left = left;\r\n            this.right = right;\r\n            this.Item = item;\r\n        },\r\n        toString: function (){\r\n            return this.Item.toString();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$RBNode$1);\r\nvar Microsoft$Msagl$Core$DataStructures$RbTree$1 = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.RbTree$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["System.Collections.Generic.IEnumerable$1"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$Func$3: function (T, func){\r\n            this.T = T;\r\n            this.comparer = null;\r\n            this.nil = null;\r\n            this.root = null;\r\n            this.count = 0;\r\n            Microsoft.Msagl.Core.DataStructures.RbTree$1.ctor$$IComparer$1.call(this, this.T, new Microsoft.Msagl.Core.DataStructures.ComparerOnDelegate$1.ctor(this.T, func));\r\n        },\r\n        FindLast$$Func$2: function (predicate){\r\n            return this.FindLast$$RBNode$1$$Func$2(this.root, predicate);\r\n        },\r\n        FindLast$$RBNode$1$$Func$2: function (n, p){\r\n            if (n == this.nil)\r\n                return null;\r\n            var good = null;\r\n            while (n != this.nil)\r\n                n = p(n.Item) ? (good = n).right : n.left;\r\n            return good;\r\n        },\r\n        Comparer$$: "System.Collections.Generic.IComparer`1[[`0]]",\r\n        get_Comparer: function (){\r\n            return this.comparer;\r\n        },\r\n        GetEnumerator: function (){\r\n            return new Microsoft.Msagl.Core.DataStructures.RBTreeEnumerator$1.ctor(this.T, this);\r\n        },\r\n        Nil$$: "Microsoft.Msagl.Core.DataStructures.RBNode`1[[`0]]",\r\n        get_Nil: function (){\r\n            return this.nil;\r\n        },\r\n        Root$$: "Microsoft.Msagl.Core.DataStructures.RBNode`1[[`0]]",\r\n        get_Root: function (){\r\n            return this.root;\r\n        },\r\n        Next: function (x){\r\n            if (x.right != this.nil)\r\n                return this.TreeMinimum$$RBNode$1(x.right);\r\n            var y = x.parent;\r\n            while (y != this.nil && x == y.right){\r\n                x = y;\r\n                y = y.parent;\r\n            }\r\n            return this.ToNull(y);\r\n        },\r\n        ToNull: function (y){\r\n            return y != this.nil ? y : null;\r\n        },\r\n        Previous: function (x){\r\n            if (x.left != this.nil)\r\n                return this.TreeMaximum(x.left);\r\n            var y = x.parent;\r\n            while (y != this.nil && x == y.left){\r\n                x = y;\r\n                y = y.parent;\r\n            }\r\n            return this.ToNull(y);\r\n        },\r\n        TreeMinimum$$RBNode$1: function (x){\r\n            while (x.left != this.nil)\r\n                x = x.left;\r\n            return this.ToNull(x);\r\n        },\r\n        TreeMinimum: function (){\r\n            return this.TreeMinimum$$RBNode$1(this.root);\r\n        },\r\n        TreeMaximum: function (x){\r\n            while (x.right != this.nil)\r\n                x = x.right;\r\n            return this.ToNull(x);\r\n        },\r\n        toString: function (){\r\n            var ret = "{";\r\n            var i = 0;\r\n            var $it49 = this.GetEnumerator();\r\n            while ($it49.MoveNext()){\r\n                var p = $it49.get_Current();\r\n                ret += p.toString();\r\n                if (i != this.count - 1){\r\n                    ret += ",";\r\n                }\r\n                i++;\r\n            }\r\n            return ret + "}";\r\n        },\r\n        DeleteSubtree: function (z){\r\n            var y;\r\n            if (z.left == this.nil || z.right == this.nil){\r\n                y = z;\r\n            }\r\n            else {\r\n                y = z.right;\r\n                while (y.left != this.nil)\r\n                    y = y.left;\r\n            }\r\n            var x = y.left != this.nil ? y.left : y.right;\r\n            x.parent = y.parent;\r\n            if (y.parent == this.nil)\r\n                this.root = x;\r\n            else {\r\n                if (y == y.parent.left)\r\n                    y.parent.left = x;\r\n                else\r\n                    y.parent.right = x;\r\n            }\r\n            if (y != z)\r\n                z.Item = y.Item;\r\n            if (y.color == Microsoft.Msagl.Core.DataStructures.RBColor.Black)\r\n                this.DeleteFixup(x);\r\n            return this.ToNull(z);\r\n        },\r\n        Count$$: "System.Int32",\r\n        get_Count: function (){\r\n            return this.count;\r\n        },\r\n        Remove: function (i){\r\n            var n = this.Find$$T(i);\r\n            if (n != null){\r\n                this.count--;\r\n                return this.DeleteSubtree(n);\r\n            }\r\n            return null;\r\n        },\r\n        DeleteNodeInternal: function (x){\r\n            this.count--;\r\n            this.DeleteSubtree(x);\r\n        },\r\n        Find$$RBNode$1$$T: function (x, i){\r\n            var compareResult;\r\n            while (x != this.nil && (compareResult = this.get_Comparer().Compare(i, x.Item)) != 0)\r\n                x = compareResult < 0 ? x.left : x.right;\r\n            return this.ToNull(x);\r\n        },\r\n        Find$$T: function (i){\r\n            return this.Find$$RBNode$1$$T(this.root, i);\r\n        },\r\n        DeleteFixup: function (x){\r\n            while (x != this.root && x.color == Microsoft.Msagl.Core.DataStructures.RBColor.Black){\r\n                if (x == x.parent.left){\r\n                    var w = x.parent.right;\r\n                    if (w.color == Microsoft.Msagl.Core.DataStructures.RBColor.Red){\r\n                        w.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        x.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                        this.LeftRotate(x.parent);\r\n                        w = x.parent.right;\r\n                    }\r\n                    if (w.left.color == Microsoft.Msagl.Core.DataStructures.RBColor.Black && w.right.color == Microsoft.Msagl.Core.DataStructures.RBColor.Black){\r\n                        w.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                        x = x.parent;\r\n                    }\r\n                    else {\r\n                        if (w.right.color == Microsoft.Msagl.Core.DataStructures.RBColor.Black){\r\n                            w.left.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                            w.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                            this.RightRotate(w);\r\n                            w = x.parent.right;\r\n                        }\r\n                        w.color = x.parent.color;\r\n                        x.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        w.right.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        this.LeftRotate(x.parent);\r\n                        x = this.root;\r\n                    }\r\n                }\r\n                else {\r\n                    var w = x.parent.left;\r\n                    if (w.color == Microsoft.Msagl.Core.DataStructures.RBColor.Red){\r\n                        w.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        x.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                        this.RightRotate(x.parent);\r\n                        w = x.parent.left;\r\n                    }\r\n                    if (w.right.color == Microsoft.Msagl.Core.DataStructures.RBColor.Black && w.left.color == Microsoft.Msagl.Core.DataStructures.RBColor.Black){\r\n                        w.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                        x = x.parent;\r\n                    }\r\n                    else {\r\n                        if (w.left.color == Microsoft.Msagl.Core.DataStructures.RBColor.Black){\r\n                            w.right.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                            w.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                            this.LeftRotate(w);\r\n                            w = x.parent.left;\r\n                        }\r\n                        w.color = x.parent.color;\r\n                        x.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        w.left.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        this.RightRotate(x.parent);\r\n                        x = this.root;\r\n                    }\r\n                }\r\n            }\r\n            x.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n        },\r\n        IsEmpty: function (){\r\n            return this.root == this.nil;\r\n        },\r\n        TreeInsert: function (z){\r\n            var y = this.nil;\r\n            var x = this.root;\r\n            var compareRes = 0;\r\n            while (x != this.nil){\r\n                y = x;\r\n                compareRes = this.get_Comparer().Compare(z, x.Item);\r\n                x = compareRes < 0 ? x.left : x.right;\r\n            }\r\n            var nz = new Microsoft.Msagl.Core.DataStructures.RBNode$1.ctor$$RBColor$$T$$RBNode$1$$RBNode$1$$RBNode$1(this.T, Microsoft.Msagl.Core.DataStructures.RBColor.Black, z, y, this.nil, this.nil);\r\n            if (y == this.nil)\r\n                this.root = nz;\r\n            else if (compareRes < 0)\r\n                y.left = nz;\r\n            else\r\n                y.right = nz;\r\n            return this.ToNull(nz);\r\n        },\r\n        InsertPrivate: function (x){\r\n            this.count++;\r\n            x.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n            while (x != this.root && x.parent.color == Microsoft.Msagl.Core.DataStructures.RBColor.Red){\r\n                if (x.parent == x.parent.parent.left){\r\n                    var y = x.parent.parent.right;\r\n                    if (y.color == Microsoft.Msagl.Core.DataStructures.RBColor.Red){\r\n                        x.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        y.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        x.parent.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                        x = x.parent.parent;\r\n                    }\r\n                    else {\r\n                        if (x == x.parent.right){\r\n                            x = x.parent;\r\n                            this.LeftRotate(x);\r\n                        }\r\n                        x.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        x.parent.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                        this.RightRotate(x.parent.parent);\r\n                    }\r\n                }\r\n                else {\r\n                    var y = x.parent.parent.left;\r\n                    if (y.color == Microsoft.Msagl.Core.DataStructures.RBColor.Red){\r\n                        x.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        y.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        x.parent.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                        x = x.parent.parent;\r\n                    }\r\n                    else {\r\n                        if (x == x.parent.left){\r\n                            x = x.parent;\r\n                            this.RightRotate(x);\r\n                        }\r\n                        x.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n                        x.parent.parent.color = Microsoft.Msagl.Core.DataStructures.RBColor.Red;\r\n                        this.LeftRotate(x.parent.parent);\r\n                    }\r\n                }\r\n            }\r\n            this.root.color = Microsoft.Msagl.Core.DataStructures.RBColor.Black;\r\n        },\r\n        Insert: function (v){\r\n            var x = this.TreeInsert(v);\r\n            this.InsertPrivate(x);\r\n            return this.ToNull(x);\r\n        },\r\n        LeftRotate: function (x){\r\n            var y = x.right;\r\n            x.right = y.left;\r\n            if (y.left != this.nil)\r\n                y.left.parent = x;\r\n            y.parent = x.parent;\r\n            if (x.parent == this.nil)\r\n                this.root = y;\r\n            else if (x == x.parent.left)\r\n                x.parent.left = y;\r\n            else\r\n                x.parent.right = y;\r\n            y.left = x;\r\n            x.parent = y;\r\n        },\r\n        RightRotate: function (x){\r\n            var y = x.left;\r\n            x.left = y.right;\r\n            if (y.right != this.nil)\r\n                y.right.parent = x;\r\n            y.parent = x.parent;\r\n            if (x.parent == this.nil)\r\n                this.root = y;\r\n            else if (x == x.parent.right)\r\n                x.parent.right = y;\r\n            else\r\n                x.parent.left = y;\r\n            y.right = x;\r\n            x.parent = y;\r\n        },\r\n        ctor$$IComparer$1: function (T, comparer){\r\n            this.T = T;\r\n            this.comparer = null;\r\n            this.nil = null;\r\n            this.root = null;\r\n            this.count = 0;\r\n            System.Object.ctor.call(this);\r\n            this.Clear();\r\n            this.comparer = comparer;\r\n        },\r\n        Clear: function (){\r\n            this.root = this.nil = new Microsoft.Msagl.Core.DataStructures.RBNode$1.ctor$$RBColor(this.T, Microsoft.Msagl.Core.DataStructures.RBColor.Black);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$RbTree$1);\r\nvar Microsoft$Msagl$Core$DataStructures$RBTreeEnumerator$1 = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.RBTreeEnumerator$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["System.Collections.Generic.IEnumerator$1"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (T, tree){\r\n            this.T = T;\r\n            this.initialState = false;\r\n            this.tree = null;\r\n            this.c = null;\r\n            System.Object.ctor.call(this);\r\n            this.tree = tree;\r\n            this.Reset();\r\n        },\r\n        Current$$: "`0",\r\n        get_Current: function (){\r\n            return this.c.Item;\r\n        },\r\n        Reset: function (){\r\n            this.initialState = true;\r\n        },\r\n        MoveNext: function (){\r\n            if (this.tree.IsEmpty())\r\n                return false;\r\n            if (this.initialState == true){\r\n                this.initialState = false;\r\n                this.c = this.tree.TreeMinimum();\r\n            }\r\n            else {\r\n                this.c = this.tree.Next(this.c);\r\n            }\r\n            return this.c != null;\r\n        },\r\n        Dispose: function (){\r\n            System.GC.SuppressFinalize(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$RBTreeEnumerator$1);\r\nvar Microsoft$Msagl$Core$Geometry$TriangleOrientation = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.TriangleOrientation",\r\n    staticDefinition: {\r\n        Clockwise: 0,\r\n        Counterclockwise: 1,\r\n        Collinear: 2\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$TriangleOrientation);\r\nvar Microsoft$Msagl$Core$GraphAlgorithms$BasicGraph$1 = {\r\n    fullname: "Microsoft.Msagl.Core.GraphAlgorithms.BasicGraph$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (TEdge){\r\n            this.TEdge = TEdge;\r\n            this.edges = null;\r\n            this.inEdges = null;\r\n            this.numberOfVertices = 0;\r\n            this.outEdges = null;\r\n            this.selfEdges = null;\r\n            System.Object.ctor.call(this);\r\n            this.SetEdges(new System.Collections.Generic.List$1.ctor(this.TEdge), 0);\r\n        },\r\n        ctor$$IEnumerable$1$$Int32: function (TEdge, edges, numberOfVerts){\r\n            this.TEdge = TEdge;\r\n            this.edges = null;\r\n            this.inEdges = null;\r\n            this.numberOfVertices = 0;\r\n            this.outEdges = null;\r\n            this.selfEdges = null;\r\n            System.Object.ctor.call(this);\r\n            this.SetEdges(edges, numberOfVerts);\r\n        },\r\n        NodeCount$$: "System.Int32",\r\n        get_NodeCount: function (){\r\n            return this.numberOfVertices;\r\n        },\r\n        OutEdges: function (vertex){\r\n            return this.outEdges[vertex];\r\n        },\r\n        InEdges: function (vertex){\r\n            return this.inEdges[vertex];\r\n        },\r\n        SetEdges: function (valEdges, nov){\r\n            this.edges = (As(valEdges, System.Collections.Generic.List$1.ctor) != null ? As(valEdges, System.Collections.Generic.List$1.ctor) : new System.Collections.Generic.List$1.ctor$$IEnumerable$1(this.TEdge, valEdges));\r\n            this.numberOfVertices = nov;\r\n            var outEdgesCounts = new Int32Array(this.numberOfVertices);\r\n            var inEdgesCounts = new Int32Array(this.numberOfVertices);\r\n            var selfEdgesCounts = new Int32Array(this.numberOfVertices);\r\n            this.outEdges = new Array(this.numberOfVertices);\r\n            this.inEdges = new Array(this.numberOfVertices);\r\n            this.selfEdges = new Array(this.numberOfVertices);\r\n            var $it50 = this.edges.GetEnumerator();\r\n            while ($it50.MoveNext()){\r\n                var e = $it50.get_Current();\r\n                if (e.get_Source() != e.get_Target()){\r\n                    outEdgesCounts[e.get_Source()]++;\r\n                    inEdgesCounts[e.get_Target()]++;\r\n                }\r\n                else {\r\n                    selfEdgesCounts[e.get_Source()]++;\r\n                }\r\n            }\r\n            for (var i = 0; i < this.numberOfVertices; i++){\r\n                this.outEdges[i] = new Array(outEdgesCounts[i]);\r\n                outEdgesCounts[i] = 0;\r\n                this.inEdges[i] = new Array(inEdgesCounts[i]);\r\n                inEdgesCounts[i] = 0;\r\n                this.selfEdges[i] = new Array(selfEdgesCounts[i]);\r\n                selfEdgesCounts[i] = 0;\r\n            }\r\n            var $it51 = this.edges.GetEnumerator();\r\n            while ($it51.MoveNext()){\r\n                var e = $it51.get_Current();\r\n                var u = e.get_Source();\r\n                var v = e.get_Target();\r\n                if (u != v){\r\n                    this.outEdges[u][outEdgesCounts[u]++] = e;\r\n                    this.inEdges[v][inEdgesCounts[v]++] = e;\r\n                }\r\n                else\r\n                    this.selfEdges[u][selfEdgesCounts[u]++] = e;\r\n            }\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$GraphAlgorithms$BasicGraph$1);\r\nvar Microsoft$Msagl$Core$Layout$Edge = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.Edge",\r\n    baseTypeName: "Microsoft.Msagl.Core.Layout.GeometryObject",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.Layout.ILabeledObject"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.labels = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Layout.Label.ctor);\r\n            this.source = null;\r\n            this.target = null;\r\n            Microsoft.Msagl.Core.Layout.GeometryObject.ctor.call(this);\r\n        },\r\n        Label$$: "Microsoft.Msagl.Core.Layout.Label",\r\n        get_Label: function (){\r\n            if (this.labels.get_Count() == 0)\r\n                return null;\r\n            return this.labels.get_Item$$Int32(0);\r\n        },\r\n        set_Label: function (value){\r\n            if (this.labels.get_Count() == 0){\r\n                this.labels.Add(value);\r\n            }\r\n            else {\r\n                this.labels.set_Item$$Int32(0, value);\r\n            }\r\n        },\r\n        Source$$: "Microsoft.Msagl.Core.Layout.Node",\r\n        get_Source: function (){\r\n            return this.source;\r\n        },\r\n        set_Source: function (value){\r\n            this.source = value;\r\n        },\r\n        Target$$: "Microsoft.Msagl.Core.Layout.Node",\r\n        get_Target: function (){\r\n            return this.target;\r\n        },\r\n        set_Target: function (value){\r\n            this.target = value;\r\n        },\r\n        toString: function (){\r\n            return this.source + "->" + this.target;\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        set_BoundingBox: function (value){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        RaiseLayoutChangeEvent: function (newValue){\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$Edge);\r\nvar Microsoft$Msagl$Core$GraphAlgorithms$IntPair = {\r\n    fullname: "Microsoft.Msagl.Core.GraphAlgorithms.IntPair",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.GraphAlgorithms.IEdge"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (first, second){\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this._hashKey = null;\r\n            System.Object.ctor.call(this);\r\n            this.x = first;\r\n            this.y = second;\r\n            this.UpdateHashKey();\r\n        },\r\n        First$$: "System.Int32",\r\n        get_First: function (){\r\n            return this.x;\r\n        },\r\n        set_First: function (value){\r\n            this.x = value;\r\n            this.UpdateHashKey();\r\n        },\r\n        Second$$: "System.Int32",\r\n        get_Second: function (){\r\n            return this.y;\r\n        },\r\n        set_Second: function (value){\r\n            this.y = value;\r\n            this.UpdateHashKey();\r\n        },\r\n        Equals$$Object: function (obj){\r\n            var other = As(obj, Microsoft.Msagl.Core.GraphAlgorithms.IntPair.ctor);\r\n            if (other == null)\r\n                return false;\r\n            return this.x == other.x && this.y == other.y;\r\n        },\r\n        UpdateHashKey: function (){\r\n            this._hashKey = "" + this.x + "," + this.y;\r\n        },\r\n        GetHashCode: function (){\r\n            var hc = (this.x.GetHashCode()) | 0;\r\n            return (((hc << 5 | hc >> 27) + this.y | 0)) | 0;\r\n        },\r\n        toString: function (){\r\n            return "(" + this.x + "," + this.y + ")";\r\n        },\r\n        Source$$: "System.Int32",\r\n        get_Source: function (){\r\n            return this.x;\r\n        },\r\n        set_Source: function (value){\r\n            this.x = value;\r\n            this.UpdateHashKey();\r\n        },\r\n        Target$$: "System.Int32",\r\n        get_Target: function (){\r\n            return this.y;\r\n        },\r\n        set_Target: function (value){\r\n            this.y = value;\r\n            this.UpdateHashKey();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$GraphAlgorithms$IntPair);\r\nvar Microsoft$Msagl$Core$Layout$Node = {\r\n    fullname: "Microsoft.Msagl.Core.Layout.Node",\r\n    baseTypeName: "Microsoft.Msagl.Core.Layout.GeometryObject",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.padding = 1;\r\n            this.boundaryCurve = null;\r\n            this.outEdges_ = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Core.Layout.Edge.ctor);\r\n            this.center = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            Microsoft.Msagl.Core.Layout.GeometryObject.ctor.call(this);\r\n        },\r\n        BoundaryCurve$$: "Microsoft.Msagl.Core.Geometry.Curves.ICurve",\r\n        get_BoundaryCurve: function (){\r\n            return this.boundaryCurve;\r\n        },\r\n        set_BoundaryCurve: function (value){\r\n            this.RaiseLayoutChangeEvent(value);\r\n            this.boundaryCurve = value;\r\n        },\r\n        toString: function (){\r\n            return System.Object.commonPrototype.toString.call(this);\r\n        },\r\n        OutEdges$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Core.Layout.Edge]]",\r\n        get_OutEdges: function (){\r\n            return this.outEdges_;\r\n        },\r\n        set_OutEdges: function (value){\r\n            this.outEdges_ = Cast(value, Microsoft.Msagl.Core.DataStructures.Set$1.ctor);\r\n        },\r\n        Center$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_Center: function (){\r\n            return this.center;\r\n        },\r\n        set_Center: function (value){\r\n            this.center = value;\r\n        },\r\n        FitBoundaryCurveToTarget: function (targetBounds){\r\n            if (this.get_BoundaryCurve() != null){\r\n                var rr = As(this.get_BoundaryCurve(), Microsoft.Msagl.Core.Geometry.Curves.RoundedRect.ctor);\r\n                if (rr == null){\r\n                    var scaleX = targetBounds.get_Width() / this.get_BoundaryCurve().get_BoundingBox().get_Width();\r\n                    var scaleY = targetBounds.get_Height() / this.get_BoundaryCurve().get_BoundingBox().get_Height();\r\n                    this.get_BoundaryCurve().Translate(Microsoft.Msagl.Core.Geometry.Point.op_UnaryNegation(this.get_BoundaryCurve().get_BoundingBox().get_LeftBottom()));\r\n                    this.set_BoundaryCurve(this.get_BoundaryCurve().ScaleFromOrigin(scaleX, scaleY));\r\n                    this.get_BoundaryCurve().Translate(targetBounds.get_LeftBottom());\r\n                }\r\n                else {\r\n                    this.set_BoundaryCurve(rr.FitTo(targetBounds));\r\n                }\r\n            }\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            return this.get_BoundaryCurve() != null ? this.get_BoundaryCurve().get_BoundingBox() : Microsoft.Msagl.Core.Geometry.Rectangle.CreateAnEmptyBox();\r\n        },\r\n        set_BoundingBox: function (value){\r\n            if (System.Math.Abs$$Double(value.get_Width() - this.get_Width()) < 0.01 && System.Math.Abs$$Double(value.get_Height() - this.get_Height()) < 0.01){\r\n                this.set_Center(value.get_Center());\r\n            }\r\n            else {\r\n                this.FitBoundaryCurveToTarget(value);\r\n            }\r\n        },\r\n        Width$$: "System.Double",\r\n        get_Width: function (){\r\n            return this.get_BoundaryCurve().get_BoundingBox().get_Width();\r\n        },\r\n        Height$$: "System.Double",\r\n        get_Height: function (){\r\n            return this.get_BoundaryCurve().get_BoundingBox().get_Height();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Layout$Node);\r\nvar Microsoft$Msagl$Core$DataStructures$Set$1 = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.Set$1",\r\n    baseTypeName: "System.MarshalByRefObject",\r\n    staticDefinition: {\r\n        op_Addition: function (set0, set1){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(set1, "set1");\r\n            var ret = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor$$IEnumerable$1(this.T, set0);\r\n            var $it56 = set1.GetEnumerator();\r\n            while ($it56.MoveNext()){\r\n                var t = $it56.get_Current();\r\n                ret.Insert(t);\r\n            }\r\n            return ret;\r\n        },\r\n        op_Subtraction: function (set0, set1){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(set1, "set1");\r\n            var ret = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor$$IEnumerable$1(this.T, set0);\r\n            var $it57 = set1.GetEnumerator();\r\n            while ($it57.MoveNext()){\r\n                var t = $it57.get_Current();\r\n                ret.Remove(t);\r\n            }\r\n            return ret;\r\n        },\r\n        op_Equality: function (set0, set1){\r\n            if (set0 == null && set1 == null)\r\n                return true;\r\n            if (set0 == null && set1 != null)\r\n                return false;\r\n            if (set1 == null && set0 != null)\r\n                return false;\r\n            var $it58 = set0.GetEnumerator();\r\n            while ($it58.MoveNext()){\r\n                var t = $it58.get_Current();\r\n                if (!set1.Contains$$T(t))\r\n                    return false;\r\n            }\r\n            var $it59 = set1.GetEnumerator();\r\n            while ($it59.MoveNext()){\r\n                var t = $it59.get_Current();\r\n                if (!set0.Contains$$T(t))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        op_Inequality: function (set0, set1){\r\n            return !(Microsoft.Msagl.Core.DataStructures.Set$1.op_Equality(set0, set1));\r\n        },\r\n        op_Multiply: function (set0, set1){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(set0, "set0");\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(set1, "set1");\r\n            return new Microsoft.Msagl.Core.DataStructures.Set$1.ctor$$IEnumerable$1(this.T, set0.get_Count() < set1.get_Count() ? System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(this.T, set0, function (a){\r\n                return set1.Contains$$T(a);\r\n            }) : System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(this.T, set1, function (a){\r\n                return set0.Contains$$T(a);\r\n            }));\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["System.Collections.Generic.ICollection$1"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$IEnumerable$1: function (T, enumerableCollection){\r\n            this.T = T;\r\n            this.hashSet = new System.Collections.Generic.HashSet$1.ctor(this.T);\r\n            this._hashKey = null;\r\n            System.MarshalByRefObject.ctor.call(this);\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(enumerableCollection, "enumerableCollection");\r\n            var $it52 = enumerableCollection.GetEnumerator();\r\n            while ($it52.MoveNext()){\r\n                var j = $it52.get_Current();\r\n                this.Insert(j);\r\n            }\r\n            this.UpdateHashKey();\r\n        },\r\n        Insert: function (element){\r\n            this.hashSet.Add(element);\r\n            this.UpdateHashKey();\r\n        },\r\n        Contains$$T: function (item){\r\n            return this.hashSet.Contains(item);\r\n        },\r\n        Delete: function (item){\r\n            this.hashSet.Remove(item);\r\n            this.UpdateHashKey();\r\n        },\r\n        Remove: function (item){\r\n            var ret = this.hashSet.Remove(item);\r\n            this.UpdateHashKey();\r\n            return ret;\r\n        },\r\n        Count$$: "System.Int32",\r\n        get_Count: function (){\r\n            return this.hashSet.get_Count();\r\n        },\r\n        GetEnumerator: function (){\r\n            return this.hashSet.GetEnumerator();\r\n        },\r\n        IsReadOnly$$: "System.Boolean",\r\n        get_IsReadOnly: function (){\r\n            return false;\r\n        },\r\n        CopyTo: function (array, arrayIndex){\r\n            this.hashSet.CopyTo$$T$Array$$Int32(array, arrayIndex);\r\n        },\r\n        toString: function (){\r\n            var r = "{";\r\n            var i = 0;\r\n            var $it53 = this.GetEnumerator();\r\n            while ($it53.MoveNext()){\r\n                var o = $it53.get_Current();\r\n                r += o.toString();\r\n                i++;\r\n                if (i < this.get_Count())\r\n                    r += ",";\r\n            }\r\n            r += "}";\r\n            return r;\r\n        },\r\n        Clear: function (){\r\n            this.hashSet.Clear();\r\n            this.UpdateHashKey();\r\n        },\r\n        Clone: function (){\r\n            var ret = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(this.T);\r\n            var $it54 = this.GetEnumerator();\r\n            while ($it54.MoveNext()){\r\n                var i = $it54.get_Current();\r\n                ret.Insert(i);\r\n            }\r\n            return ret;\r\n        },\r\n        ctor: function (T){\r\n            this.T = T;\r\n            this.hashSet = new System.Collections.Generic.HashSet$1.ctor(this.T);\r\n            this._hashKey = null;\r\n            System.MarshalByRefObject.ctor.call(this);\r\n        },\r\n        ToArray: function (type){\r\n            var ret = System.Array.CreateInstance(type, this.get_Count());\r\n            var i = 0;\r\n            var $it55 = this.GetEnumerator();\r\n            while ($it55.MoveNext()){\r\n                var o = $it55.get_Current();\r\n                ret.SetValue(o, i++);\r\n            }\r\n            return ret;\r\n        },\r\n        Equals$$Object: function (obj){\r\n            var set = As(obj, Microsoft.Msagl.Core.DataStructures.Set$1.ctor);\r\n            if (Microsoft.Msagl.Core.DataStructures.Set$1.op_Equality(set, null))\r\n                return false;\r\n            return Microsoft.Msagl.Core.DataStructures.Set$1.op_Equality(set, this);\r\n        },\r\n        GetHashCode: function (){\r\n            var ret = 0;\r\n            var $it60 = this.GetEnumerator();\r\n            while ($it60.MoveNext()){\r\n                var t = $it60.get_Current();\r\n                ret |= t.GetHashCode();\r\n            }\r\n            return ret;\r\n        },\r\n        Add: function (set0, set1){\r\n            return Microsoft.Msagl.Core.DataStructures.Set$1.op_Addition(set0, set1);\r\n        },\r\n        InsertRange: function (elements){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(elements, "elements");\r\n            var $it61 = elements.GetEnumerator();\r\n            while ($it61.MoveNext()){\r\n                var element = $it61.get_Current();\r\n                this.Insert(element);\r\n            }\r\n        },\r\n        IsContained: function (otherSet){\r\n            return System.Linq.Enumerable.All$1(this.T, this, $CreateAnonymousDelegate(this, function (p){\r\n                return otherSet.Contains$$T(p);\r\n            }));\r\n        },\r\n        Contains$$Set$1: function (otherSet){\r\n            return System.Linq.Enumerable.All$1(this.T, otherSet, $CreateAnonymousDelegate(this, function (p){\r\n                return this.Contains$$T(p);\r\n            }));\r\n        },\r\n        UpdateHashKey: function (){\r\n            this._hashKey = this.GetHashCode().toString();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$Set$1);\r\nvar Microsoft$Msagl$Core$Geometry$HitTestBehavior = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.HitTestBehavior",\r\n    staticDefinition: {\r\n        Continue: 0,\r\n        Stop: 1\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$HitTestBehavior);\r\nvar Microsoft$Msagl$Core$DataStructures$ComparerOnDelegate$1 = {\r\n    fullname: "Microsoft.Msagl.Core.DataStructures.ComparerOnDelegate$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["System.Collections.Generic.IComparer$1"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (T, compare){\r\n            this.T = T;\r\n            this.comparer = null;\r\n            System.Object.ctor.call(this);\r\n            this.comparer = compare;\r\n        },\r\n        Compare: function (x, y){\r\n            return this.comparer(x, y);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$DataStructures$ComparerOnDelegate$1);\r\nvar Microsoft$Msagl$Core$Geometry$RectangleNode$1 = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.RectangleNode$1",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        cctor: function (TData){\r\n            Microsoft.Msagl.Core.Geometry.RectangleNode$1.GroupSplitThreshold = 2;\r\n        },\r\n        VisitTreeStatic: function (rectangleNode, hitTest, hitRectangle){\r\n            if (rectangleNode.get_Rectangle().Intersects(hitRectangle)){\r\n                if (hitTest(rectangleNode.get_UserData()) == Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue){\r\n                    if (rectangleNode.get_Left() != null){\r\n                        if (Microsoft.Msagl.Core.Geometry.RectangleNode$1.VisitTreeStatic(rectangleNode.get_Left(), hitTest, hitRectangle) == Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue && Microsoft.Msagl.Core.Geometry.RectangleNode$1.VisitTreeStatic(rectangleNode.get_Right(), hitTest, hitRectangle) == Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue){\r\n                            return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue;\r\n                        }\r\n                        return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Stop;\r\n                    }\r\n                    return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue;\r\n                }\r\n                return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Stop;\r\n            }\r\n            return Microsoft.Msagl.Core.Geometry.HitTestBehavior.Continue;\r\n        },\r\n        CreateRectangleNodeOnEnumeration: function (nodes){\r\n            if (nodes == null)\r\n                return null;\r\n            var nodeList = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor, nodes);\r\n            return Microsoft.Msagl.Core.Geometry.RectangleNode$1.CreateRectangleNodeOnListOfNodes(nodeList);\r\n        },\r\n        CreateRectangleNodeOnData: function (dataEnumeration, rectangleDelegate){\r\n            if (dataEnumeration == null || rectangleDelegate == null)\r\n                return null;\r\n            var nodeList = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(this.TData, Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor, dataEnumeration, function (d){\r\n                return new Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor$$TData$$Rectangle(this.TData, d, rectangleDelegate(d));\r\n            }));\r\n            return Microsoft.Msagl.Core.Geometry.RectangleNode$1.CreateRectangleNodeOnListOfNodes(nodeList);\r\n        },\r\n        CreateRectangleNodeOnListOfNodes: function (nodes){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(nodes, "nodes");\r\n            if (nodes.get_Count() == 0)\r\n                return null;\r\n            if (nodes.get_Count() == 1)\r\n                return nodes.get_Item$$Int32(0);\r\n            var b0 = nodes.get_Item$$Int32(0).get_Rectangle();\r\n            var seed0 = 1;\r\n            var seed1 = (function (){\r\n                var $1 = {\r\n                    Value: b0\r\n                };\r\n                var $2 = {\r\n                    Value: seed0\r\n                };\r\n                var $res = Microsoft.Msagl.Core.Geometry.RectangleNode$1.ChooseSeeds(nodes, $1, $2);\r\n                b0 = $1.Value;\r\n                seed0 = $2.Value;\r\n                return $res;\r\n            })();\r\n            var gr0 = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor);\r\n            var gr1 = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor);\r\n            gr0.Add(nodes.get_Item$$Int32(seed0));\r\n            gr1.Add(nodes.get_Item$$Int32(seed1));\r\n            var box0 = nodes.get_Item$$Int32(seed0).get_Rectangle();\r\n            var box1 = nodes.get_Item$$Int32(seed1).get_Rectangle();\r\n            (function (){\r\n                var $1 = {\r\n                    Value: box0\r\n                };\r\n                var $2 = {\r\n                    Value: box1\r\n                };\r\n                var $res = Microsoft.Msagl.Core.Geometry.RectangleNode$1.DivideNodes(nodes, seed0, seed1, gr0, gr1, $1, $2, 2);\r\n                box0 = $1.Value;\r\n                box1 = $2.Value;\r\n                return $res;\r\n            })();\r\n            var ret = (function (){\r\n                var $v9 = new Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor$$Int32(this.TData, nodes.get_Count());\r\n                $v9.set_Rectangle(new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Rectangle$$Rectangle(box0, box1));\r\n                $v9.set_Left(Microsoft.Msagl.Core.Geometry.RectangleNode$1.CreateRectangleNodeOnListOfNodes(gr0));\r\n                $v9.set_Right(Microsoft.Msagl.Core.Geometry.RectangleNode$1.CreateRectangleNodeOnListOfNodes(gr1));\r\n                return $v9;\r\n            })();\r\n            return ret;\r\n        },\r\n        ChooseSeeds: function (nodes, b0, seed0){\r\n            var area = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Rectangle$$Rectangle(b0.Value, nodes.get_Item$$Int32(seed0.Value).get_Rectangle()).get_Area();\r\n            for (var i = 2; i < nodes.get_Count(); i++){\r\n                var area0 = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Rectangle$$Rectangle(b0.Value, nodes.get_Item$$Int32(i).get_Rectangle()).get_Area();\r\n                if (area0 > area){\r\n                    seed0.Value = i;\r\n                    area = area0;\r\n                }\r\n            }\r\n            var seed1 = 0;\r\n            for (var i = 0; i < nodes.get_Count(); i++){\r\n                if (i != seed0.Value){\r\n                    seed1 = i;\r\n                    break;\r\n                }\r\n            }\r\n            area = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Rectangle$$Rectangle(nodes.get_Item$$Int32(seed0.Value).get_Rectangle(), nodes.get_Item$$Int32(seed1).get_Rectangle()).get_Area();\r\n            for (var i = 0; i < nodes.get_Count(); i++){\r\n                if (i == seed0.Value)\r\n                    continue;\r\n                var area1 = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Rectangle$$Rectangle(nodes.get_Item$$Int32(seed0.Value).get_Rectangle(), nodes.get_Item$$Int32(i).get_Rectangle()).get_Area();\r\n                if (area1 > area){\r\n                    seed1 = i;\r\n                    area = area1;\r\n                }\r\n            }\r\n            return seed1;\r\n        },\r\n        DivideNodes: function (nodes, seed0, seed1, gr0, gr1, box0, box1, groupSplitThreshold){\r\n            for (var i = 0; i < nodes.get_Count(); i++){\r\n                if (i == seed0 || i == seed1)\r\n                    continue;\r\n                var box0_ = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Rectangle$$Rectangle(box0.Value, nodes.get_Item$$Int32(i).get_Rectangle());\r\n                var delta0 = box0_.get_Area() - box0.Value.get_Area();\r\n                var box1_ = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Rectangle$$Rectangle(box1.Value, nodes.get_Item$$Int32(i).get_Rectangle());\r\n                var delta1 = box1_.get_Area() - box1.Value.get_Area();\r\n                if (gr0.get_Count() * groupSplitThreshold < gr1.get_Count()){\r\n                    gr0.Add(nodes.get_Item$$Int32(i));\r\n                    box0.Value = box0_;\r\n                }\r\n                else if (gr1.get_Count() * groupSplitThreshold < gr0.get_Count()){\r\n                    gr1.Add(nodes.get_Item$$Int32(i));\r\n                    box1.Value = box1_;\r\n                }\r\n                else if (delta0 < delta1){\r\n                    gr0.Add(nodes.get_Item$$Int32(i));\r\n                    box0.Value = box0_;\r\n                }\r\n                else if (delta1 < delta0){\r\n                    gr1.Add(nodes.get_Item$$Int32(i));\r\n                    box1.Value = box1_;\r\n                }\r\n                else if (box0.Value.get_Area() < box1.Value.get_Area()){\r\n                    gr0.Add(nodes.get_Item$$Int32(i));\r\n                    box0.Value = box0_;\r\n                }\r\n                else {\r\n                    gr1.Add(nodes.get_Item$$Int32(i));\r\n                    box1.Value = box1_;\r\n                }\r\n            }\r\n        },\r\n        TraverseHierarchy: function (node, visitor){\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(node, "node");\r\n            Microsoft.Msagl.Core.ValidateArg.IsNotNull(visitor, "visitor");\r\n            visitor(node);\r\n            if (node.get_Left() != null)\r\n                Microsoft.Msagl.Core.Geometry.RectangleNode$1.TraverseHierarchy(node.get_Left(), visitor);\r\n            if (node.get_Right() != null)\r\n                Microsoft.Msagl.Core.Geometry.RectangleNode$1.TraverseHierarchy(node.get_Right(), visitor);\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (TData){\r\n            this.TData = TData;\r\n            this.left = null;\r\n            this.right = null;\r\n            this.rectangle = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            this._Count = 0;\r\n            this._UserData = null;\r\n            this._Parent = null;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Count$$: "System.Int32",\r\n        get_Count: function (){\r\n            return this._Count;\r\n        },\r\n        set_Count: function (value){\r\n            this._Count = value;\r\n        },\r\n        ctor$$TData$$Rectangle: function (TData, data, rect){\r\n            this.TData = TData;\r\n            this.left = null;\r\n            this.right = null;\r\n            this.rectangle = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            this._Count = 0;\r\n            this._UserData = null;\r\n            this._Parent = null;\r\n            System.Object.ctor.call(this);\r\n            this.set_UserData(data);\r\n            this.set_Rectangle(rect);\r\n            this.set_Count(1);\r\n        },\r\n        ctor$$Int32: function (TData, count){\r\n            this.TData = TData;\r\n            this.left = null;\r\n            this.right = null;\r\n            this.rectangle = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            this._Count = 0;\r\n            this._UserData = null;\r\n            this._Parent = null;\r\n            System.Object.ctor.call(this);\r\n            this.set_Count(count);\r\n        },\r\n        Rectangle$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_Rectangle: function (){\r\n            return this.rectangle;\r\n        },\r\n        set_Rectangle: function (value){\r\n            this.rectangle = value;\r\n        },\r\n        IsLeaf$$: "System.Boolean",\r\n        get_IsLeaf: function (){\r\n            return this.left == null;\r\n        },\r\n        Left$$: "Microsoft.Msagl.Core.Geometry.RectangleNode`1[[`0]]",\r\n        get_Left: function (){\r\n            return this.left;\r\n        },\r\n        set_Left: function (value){\r\n            if (this.left != null && this.left.get_Parent() == this)\r\n                this.left.set_Parent(null);\r\n            this.left = value;\r\n            if (this.left != null)\r\n                this.left.set_Parent(this);\r\n        },\r\n        Right$$: "Microsoft.Msagl.Core.Geometry.RectangleNode`1[[`0]]",\r\n        get_Right: function (){\r\n            return this.right;\r\n        },\r\n        set_Right: function (value){\r\n            if (this.right != null && this.right.get_Parent() == this)\r\n                this.right.set_Parent(null);\r\n            this.right = value;\r\n            if (this.right != null)\r\n                this.right.set_Parent(this);\r\n        },\r\n        UserData$$: "`0",\r\n        get_UserData: function (){\r\n            return this._UserData;\r\n        },\r\n        set_UserData: function (value){\r\n            this._UserData = value;\r\n        },\r\n        Parent$$: "Microsoft.Msagl.Core.Geometry.RectangleNode`1[[`0]]",\r\n        get_Parent: function (){\r\n            return this._Parent;\r\n        },\r\n        set_Parent: function (value){\r\n            this._Parent = value;\r\n        },\r\n        IsLeftChild$$: "System.Boolean",\r\n        get_IsLeftChild: function (){\r\n            return this.Equals$$Object(this.get_Parent().get_Left());\r\n        },\r\n        FirstHitNode$$Point$$Func$3: function (point, hitTestForPointDelegate){\r\n            if (this.rectangle.Contains(point)){\r\n                if (this.get_IsLeaf()){\r\n                    if (hitTestForPointDelegate != null){\r\n                        return hitTestForPointDelegate(point, this.get_UserData()) == Microsoft.Msagl.Core.Geometry.HitTestBehavior.Stop ? this : null;\r\n                    }\r\n                    return this;\r\n                }\r\n                return (this.get_Left().FirstHitNode$$Point$$Func$3(point, hitTestForPointDelegate) != null ? this.get_Left().FirstHitNode$$Point$$Func$3(point, hitTestForPointDelegate) : this.get_Right().FirstHitNode$$Point$$Func$3(point, hitTestForPointDelegate));\r\n            }\r\n            return null;\r\n        },\r\n        FirstIntersectedNode: function (r){\r\n            if (r.Intersects(this.rectangle)){\r\n                if (this.get_IsLeaf())\r\n                    return this;\r\n                return (this.get_Left().FirstIntersectedNode(r) != null ? this.get_Left().FirstIntersectedNode(r) : this.get_Right().FirstIntersectedNode(r));\r\n            }\r\n            return null;\r\n        },\r\n        FirstHitNode$$Point: function (point){\r\n            if (this.rectangle.Contains(point)){\r\n                if (this.get_IsLeaf())\r\n                    return this;\r\n                return (this.get_Left().FirstHitNode$$Point(point) != null ? this.get_Left().FirstHitNode$$Point(point) : this.get_Right().FirstHitNode$$Point(point));\r\n            }\r\n            return null;\r\n        },\r\n        AllHitItems$$Rectangle$$Func$2: function (rectanglePar, hitTestAccept){\r\n            var $yield = [];\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor);\r\n            stack.Push(this);\r\n            while (stack.get_Count() > 0){\r\n                var node = stack.Pop();\r\n                if (node.get_Rectangle().Intersects(rectanglePar)){\r\n                    if (node.get_IsLeaf()){\r\n                        if ((null == hitTestAccept) || hitTestAccept(node.get_UserData())){\r\n                            $yield.push(node.get_UserData());\r\n                        }\r\n                    }\r\n                    else {\r\n                        stack.Push(node.left);\r\n                        stack.Push(node.right);\r\n                    }\r\n                }\r\n            }\r\n            return $yield;\r\n        },\r\n        AllHitItems$$Point: function (point){\r\n            var $yield = [];\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor);\r\n            stack.Push(this);\r\n            while (stack.get_Count() > 0){\r\n                var node = stack.Pop();\r\n                if (node.get_Rectangle().Contains(point)){\r\n                    if (node.get_IsLeaf())\r\n                        $yield.push(node.get_UserData());\r\n                    else {\r\n                        stack.Push(node.left);\r\n                        stack.Push(node.right);\r\n                    }\r\n                }\r\n            }\r\n            return $yield;\r\n        },\r\n        VisitTree: function (hitTest, hitRectangle){\r\n            Microsoft.Msagl.Core.Geometry.RectangleNode$1.VisitTreeStatic(this, hitTest, hitRectangle);\r\n        },\r\n        Clone: function (){\r\n            var ret = (function (){\r\n                var $v8 = new Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor$$Int32(this.TData, this.get_Count());\r\n                $v8.set_UserData(this.get_UserData());\r\n                $v8.set_Rectangle(this.get_Rectangle());\r\n                return $v8;\r\n            }).call(this);\r\n            if (this.get_Left() != null)\r\n                ret.set_Left(this.get_Left().Clone());\r\n            if (this.get_Right() != null)\r\n                ret.set_Right(this.get_Right().Clone());\r\n            return ret;\r\n        },\r\n        GetNodeItemsIntersectingRectangle: function (rectanglePar){\r\n            return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor, this.TData, this.GetLeafRectangleNodesIntersectingRectangle(rectanglePar), $CreateAnonymousDelegate(this, function (node){\r\n                return node.get_UserData();\r\n            }));\r\n        },\r\n        GetLeafRectangleNodesIntersectingRectangle: function (rectanglePar){\r\n            var $yield = [];\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor);\r\n            stack.Push(this);\r\n            while (stack.get_Count() > 0){\r\n                var node = stack.Pop();\r\n                if (node.get_Rectangle().Intersects(rectanglePar)){\r\n                    if (node.get_IsLeaf()){\r\n                        $yield.push(node);\r\n                    }\r\n                    else {\r\n                        stack.Push(node.left);\r\n                        stack.Push(node.right);\r\n                    }\r\n                }\r\n            }\r\n            return $yield;\r\n        },\r\n        GetAllLeaves: function (){\r\n            return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor, this.TData, this.GetAllLeafNodes(), $CreateAnonymousDelegate(this, function (n){\r\n                return n.get_UserData();\r\n            }));\r\n        },\r\n        GetAllLeafNodes: function (){\r\n            return this.EnumRectangleNodes(true);\r\n        },\r\n        EnumRectangleNodes: function (leafOnly){\r\n            var $yield = [];\r\n            var stack = new System.Collections.Generic.Stack$1.ctor(Microsoft.Msagl.Core.Geometry.RectangleNode$1.ctor);\r\n            stack.Push(this);\r\n            while (stack.get_Count() > 0){\r\n                var node = stack.Pop();\r\n                if (node.get_IsLeaf() || !leafOnly){\r\n                    $yield.push(node);\r\n                }\r\n                if (!node.get_IsLeaf()){\r\n                    stack.Push(node.left);\r\n                    stack.Push(node.right);\r\n                }\r\n            }\r\n            return $yield;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$RectangleNode$1);\r\nvar Microsoft$Msagl$Core$Geometry$Curves$Curve = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Curves.Curve",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.Geometry.Curves.ICurve"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.segs = null;\r\n            this.parStart = 0;\r\n            this.parEnd = 0;\r\n            System.Object.ctor.call(this);\r\n            this.segs = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Geometry.Curves.ICurve.ctor);\r\n        },\r\n        ctor$$Int32: function (segmentCapacity){\r\n            this.segs = null;\r\n            this.parStart = 0;\r\n            this.parEnd = 0;\r\n            System.Object.ctor.call(this);\r\n            this.segs = new System.Collections.Generic.List$1.ctor$$Int32(Microsoft.Msagl.Core.Geometry.Curves.ICurve.ctor, segmentCapacity);\r\n        },\r\n        AdjustStartEndEndParametersToDomain: function (start, end){\r\n            if (start.Value > end.Value){\r\n                var t = start.Value;\r\n                start.Value = end.Value;\r\n                end.Value = t;\r\n            }\r\n            if (start.Value < this.get_ParStart())\r\n                start.Value = this.get_ParStart();\r\n            if (end.Value > this.get_ParEnd())\r\n                end.Value = this.get_ParEnd();\r\n        },\r\n        AddSegment: function (curve){\r\n            if (curve == null)\r\n                return this;\r\n            this.set_ParStart(0);\r\n            var c = As(curve, Microsoft.Msagl.Core.Geometry.Curves.Curve.ctor);\r\n            if (c == null){\r\n                this.segs.Add(curve);\r\n                this.set_ParEnd(this.get_ParEnd() + curve.get_ParEnd() - curve.get_ParStart());\r\n            }\r\n            else {\r\n                this.IncreaseSegmentCapacity(c.get_Segments().get_Count());\r\n                var $it62 = c.get_Segments().GetEnumerator();\r\n                while ($it62.MoveNext()){\r\n                    var cc = $it62.get_Current();\r\n                    this.segs.Add(cc);\r\n                    this.set_ParEnd(this.get_ParEnd() + cc.get_ParEnd() - cc.get_ParStart());\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        IncreaseSegmentCapacity: function (additionalAmount){\r\n            var capacityNeeded = this.segs.get_Count() + additionalAmount;\r\n            if (this.segs.get_Capacity() < capacityNeeded){\r\n                var capacity = System.Math.Max$$Int32$$Int32(this.segs.get_Capacity(), 1);\r\n                while (capacity < capacityNeeded)\r\n                    capacity *= 2;\r\n                this.segs.set_Capacity(capacity);\r\n            }\r\n        },\r\n        AddSegs: function (a, b, c, d){\r\n            this.IncreaseSegmentCapacity(4);\r\n            var r = this.AddSegment(a);\r\n            r = r.AddSegment(b);\r\n            r = r.AddSegment(c);\r\n            return r.AddSegment(d);\r\n        },\r\n        Segments$$: "System.Collections.Generic.IList`1[[Microsoft.Msagl.Core.Geometry.Curves.ICurve]]",\r\n        get_Segments: function (){\r\n            return this.segs;\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            if (this.get_Segments().get_Count() == 0)\r\n                return new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Double$$Double$$Double$$Double(0, 0, -1, -1);\r\n            var b = this.get_Segments().get_Item$$Int32(0).get_BoundingBox().Clone();\r\n            for (var i = 1; i < this.get_Segments().get_Count(); i++)\r\n                b.Add$$Rectangle(this.get_Segments().get_Item$$Int32(i).get_BoundingBox());\r\n            return b;\r\n        },\r\n        Clone: function (){\r\n            var c = new Microsoft.Msagl.Core.Geometry.Curves.Curve.ctor$$Int32(this.get_Segments().get_Count());\r\n            var $it63 = this.get_Segments().GetEnumerator();\r\n            while ($it63.MoveNext()){\r\n                var seg = $it63.get_Current();\r\n                c.AddSegment(seg.Clone());\r\n            }\r\n            return c;\r\n        },\r\n        ParStart$$: "System.Double",\r\n        get_ParStart: function (){\r\n            return this.parStart;\r\n        },\r\n        set_ParStart: function (value){\r\n            this.parStart = value;\r\n        },\r\n        ParEnd$$: "System.Double",\r\n        get_ParEnd: function (){\r\n            return this.parEnd;\r\n        },\r\n        set_ParEnd: function (value){\r\n            this.parEnd = value;\r\n        },\r\n        Translate: function (delta){\r\n        },\r\n        ScaleFromOrigin: function (xScale, yScale){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Curves$Curve);\r\nvar Microsoft$Msagl$Core$Geometry$Curves$CurveFactory = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Curves.CurveFactory",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        CreateRectangleWithRoundedCorners: function (c, width, height, radiusInXDirection, radiusInYDirection, center){\r\n            if (radiusInXDirection == 0 || radiusInYDirection == 0){\r\n                Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateRectangle(c, width, height, center);\r\n                return;\r\n            }\r\n            var w = width / 2;\r\n            if (radiusInXDirection > w / 2)\r\n                radiusInXDirection = w / 2;\r\n            var h = height / 2;\r\n            if (radiusInYDirection > h / 2)\r\n                radiusInYDirection = h / 2;\r\n            var x = center.get_X();\r\n            var y = center.get_Y();\r\n            var ox = w - radiusInXDirection;\r\n            var oy = h - radiusInYDirection;\r\n            var top = y + h;\r\n            var bottom = y - h;\r\n            var left = x - w;\r\n            var right = x + w;\r\n            var a = new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(radiusInXDirection, 0);\r\n            var b = new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, radiusInYDirection);\r\n            c.IncreaseSegmentCapacity(8);\r\n            if (ox > 0)\r\n                c.AddSegment(new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x - ox, bottom), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x + ox, bottom)));\r\n            c.AddSegment(new Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Double$$Double$$Point$$Point$$Double$$Double(4.71238898038469, 6.28318530717959, a, b, x + ox, y - oy));\r\n            if (oy > 0)\r\n                c.AddSegment(new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(right, y - oy), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(right, y + oy)));\r\n            c.AddSegment(new Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Double$$Double$$Point$$Point$$Double$$Double(0, 1.5707963267949, a, b, x + ox, y + oy));\r\n            if (ox > 0)\r\n                c.AddSegment(new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x + ox, top), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x - ox, top)));\r\n            c.AddSegment(new Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Double$$Double$$Point$$Point$$Double$$Double(1.5707963267949, 3.14159265358979, a, b, x - ox, y + oy));\r\n            if (oy > 0)\r\n                c.AddSegment(new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(left, y + oy), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(left, y - oy)));\r\n            c.AddSegment(new Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Double$$Double$$Point$$Point$$Double$$Double(3.14159265358979, 4.71238898038469, a, b, x - ox, y - oy));\r\n        },\r\n        CreateRectangle: function (c, width, height, center){\r\n            var w = width / 2;\r\n            var h = height / 2;\r\n            var x = center.get_X();\r\n            var y = center.get_Y();\r\n            var p = [new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x - w, y - h), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x + w, y - h), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x + w, y + h), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x - w, y + h)];\r\n            c.AddSegs(new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(p[0], p[1]), new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(p[1], p[2]), new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(p[2], p[3]), new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(p[3], p[0]));\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Curves$CurveFactory);\r\nvar Microsoft$Msagl$Core$Geometry$Curves$Ellipse = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Curves.Ellipse",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.Geometry.Curves.ICurve"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$Double$$Double$$Point$$Point$$Point: function (parStart, parEnd, axis0, axis1, center){\r\n            this.box = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            this.aAxis = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.bAxis = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.center = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.parStart = 0;\r\n            this.parEnd = 0;\r\n            System.Object.ctor.call(this);\r\n            this.set_ParStart(parStart);\r\n            this.set_ParEnd(parEnd);\r\n            this.set_AxisA(axis0);\r\n            this.set_AxisB(axis1);\r\n            this.center = center;\r\n            this.SetBoundingBox();\r\n        },\r\n        Reverse: function (){\r\n            return null;\r\n        },\r\n        Start$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_Start: function (){\r\n            return this.get_Item$$Double(this.get_ParStart());\r\n        },\r\n        End$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_End: function (){\r\n            return this.get_Item$$Double(this.get_ParEnd());\r\n        },\r\n        AxisA$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_AxisA: function (){\r\n            return this.aAxis;\r\n        },\r\n        set_AxisA: function (value){\r\n            this.aAxis = value;\r\n        },\r\n        AxisB$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_AxisB: function (){\r\n            return this.bAxis;\r\n        },\r\n        set_AxisB: function (value){\r\n            this.bAxis = value;\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            return this.box;\r\n        },\r\n        Item$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_Item$$Double: function (t){\r\n            return Microsoft.Msagl.Core.Geometry.Point.op_Addition(Microsoft.Msagl.Core.Geometry.Point.op_Addition(this.center, Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Double$$Point(System.Math.Cos(t), this.aAxis)), Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Double$$Point(System.Math.Sin(t), this.bAxis));\r\n        },\r\n        ParStart$$: "System.Double",\r\n        get_ParStart: function (){\r\n            return this.parStart;\r\n        },\r\n        set_ParStart: function (value){\r\n            this.parStart = value;\r\n        },\r\n        ParEnd$$: "System.Double",\r\n        get_ParEnd: function (){\r\n            return this.parEnd;\r\n        },\r\n        set_ParEnd: function (value){\r\n            this.parEnd = value;\r\n        },\r\n        SetBoundingBox: function (){\r\n            if (Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Double$$Double(this.get_ParStart(), 0) && Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Double$$Double(this.get_ParEnd(), 6.28318530717959))\r\n                this.box = this.FullBox();\r\n            else {\r\n                this.box = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Point$$Point(this.get_Start(), this.get_End());\r\n                var t;\r\n                for (var i = (System.Math.Ceiling$$Double(this.get_ParStart() / (1.5707963267949))) | 0; (t = i * 3.14159265358979 / 2) < this.get_ParEnd(); i++)\r\n                    if (t > this.parStart)\r\n                        this.box.Add$$Point(this.get_Item$$Double(t));\r\n            }\r\n        },\r\n        ctor$$Double$$Double$$Point$$Point$$Double$$Double: function (parStart, parEnd, axis0, axis1, centerX, centerY){\r\n            this.box = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();\r\n            this.aAxis = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.bAxis = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.center = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.parStart = 0;\r\n            this.parEnd = 0;\r\n            Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Double$$Double$$Point$$Point$$Point.call(this, parStart, parEnd, axis0, axis1, new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(centerX, centerY));\r\n        },\r\n        Translate: function (delta){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        ScaleFromOrigin: function (xScale, yScale){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        Clone: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Double$$Double$$Point$$Point$$Point(this.parStart, this.parEnd, this.aAxis, this.bAxis, this.center);\r\n        },\r\n        FullBox: function (){\r\n            var del = Microsoft.Msagl.Core.Geometry.Point.op_Addition(this.get_AxisA(), this.get_AxisB());\r\n            return new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Point$$Point(Microsoft.Msagl.Core.Geometry.Point.op_Addition(this.center, del), Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(this.center, del));\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Curves$Ellipse);\r\nvar Microsoft$Msagl$Core$Geometry$Curves$ICurve = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Curves.ICurve",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Interface"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Curves$ICurve);\r\nvar Microsoft$Msagl$Core$Geometry$Curves$LineSegment = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Curves.LineSegment",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.Geometry.Curves.ICurve"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (start, end){\r\n            this.a = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.b = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            System.Object.ctor.call(this);\r\n            this.a = start.Clone();\r\n            this.b = end.Clone();\r\n        },\r\n        Start$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_Start: function (){\r\n            return this.a;\r\n        },\r\n        set_Start: function (value){\r\n            this.a = value;\r\n        },\r\n        End$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_End: function (){\r\n            return this.b;\r\n        },\r\n        set_End: function (value){\r\n            this.b = value;\r\n        },\r\n        ParStart$$: "System.Double",\r\n        get_ParStart: function (){\r\n            return 0;\r\n        },\r\n        ParEnd$$: "System.Double",\r\n        get_ParEnd: function (){\r\n            return 1;\r\n        },\r\n        toString: function (){\r\n            return "{" + this.a + "," + this.b + "}";\r\n        },\r\n        Translate: function (delta){\r\n            this.a = Microsoft.Msagl.Core.Geometry.Point.op_Addition(this.a, delta);\r\n            this.b = Microsoft.Msagl.Core.Geometry.Point.op_Addition(this.b, delta);\r\n        },\r\n        ScaleFromOrigin: function (xScale, yScale){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Point$$Point(this.get_Start(), this.get_End());\r\n        },\r\n        Clone: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor(this.a, this.b);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Curves$LineSegment);\r\nvar Microsoft$Msagl$Core$Geometry$Curves$PolylinePoint = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Curves.PolylinePoint",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.point = new Microsoft.Msagl.Core.Geometry.Point.ctor();\r\n            this.next = null;\r\n            this.polyline = null;\r\n            System.Object.ctor.call(this);\r\n        },\r\n        Point$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_Point: function (){\r\n            return this.point;\r\n        },\r\n        set_Point: function (value){\r\n            this.point = value;\r\n            if (this.get_Polyline() != null)\r\n                this.get_Polyline().RequireInit();\r\n        },\r\n        Next$$: "Microsoft.Msagl.Core.Geometry.Curves.PolylinePoint",\r\n        get_Next: function (){\r\n            return this.next;\r\n        },\r\n        set_Next: function (value){\r\n            this.next = value;\r\n            if (this.get_Polyline() != null)\r\n                this.get_Polyline().RequireInit();\r\n        },\r\n        Polyline$$: "Microsoft.Msagl.Core.Geometry.Curves.Polyline",\r\n        get_Polyline: function (){\r\n            return this.polyline;\r\n        },\r\n        set_Polyline: function (value){\r\n            this.polyline = value;\r\n        },\r\n        toString: function (){\r\n            return this.point.toString();\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Curves$PolylinePoint);\r\nvar Microsoft$Msagl$Core$Geometry$Curves$Polyline = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Curves.Polyline",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["Microsoft.Msagl.Core.Geometry.Curves.ICurve", "System.Collections.Generic.IEnumerable$1"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            this.needToInit = true;\r\n            this.startPoint = null;\r\n            this.endPoint = null;\r\n            this.closed = false;\r\n            this.boundingBox = Microsoft.Msagl.Core.Geometry.Rectangle.CreateAnEmptyBox();\r\n            System.Object.ctor.call(this);\r\n        },\r\n        RequireInit: function (){\r\n            this.needToInit = true;\r\n        },\r\n        NeedToInit$$: "System.Boolean",\r\n        get_NeedToInit: function (){\r\n            return this.needToInit;\r\n        },\r\n        set_NeedToInit: function (value){\r\n            this.needToInit = value;\r\n        },\r\n        StartPoint$$: "Microsoft.Msagl.Core.Geometry.Curves.PolylinePoint",\r\n        get_StartPoint: function (){\r\n            return this.startPoint;\r\n        },\r\n        set_StartPoint: function (value){\r\n            this.RequireInit();\r\n            this.startPoint = value;\r\n        },\r\n        EndPoint$$: "Microsoft.Msagl.Core.Geometry.Curves.PolylinePoint",\r\n        get_EndPoint: function (){\r\n            return this.endPoint;\r\n        },\r\n        set_EndPoint: function (value){\r\n            this.RequireInit();\r\n            this.endPoint = value;\r\n        },\r\n        Closed$$: "System.Boolean",\r\n        get_Closed: function (){\r\n            return this.closed;\r\n        },\r\n        set_Closed: function (value){\r\n            if (this.closed != value){\r\n                this.closed = value;\r\n                this.RequireInit();\r\n            }\r\n        },\r\n        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n        get_BoundingBox: function (){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        ParStart$$: "System.Double",\r\n        get_ParStart: function (){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        ParEnd$$: "System.Double",\r\n        get_ParEnd: function (){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        Translate: function (delta){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        ScaleFromOrigin: function (xScale, yScale){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        },\r\n        GetEnumerator: function (){\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Curves$Polyline);\r\nvar Microsoft$Msagl$Core$Geometry$Rectangle = {\r\n    fullname: "Microsoft.Msagl.Core.Geometry.Rectangle",\r\n    baseTypeName: "System.ValueType",\r\n    staticDefinition: {\r\n        CreateAnEmptyBox: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Double$$Double$$Point(0, 0, new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(-1, -1));\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Struct",\r\n    definition: {\r\n        ctor$$Point$$Point: function (point0, point1){\r\n            this.left = 0;\r\n            this.right = 0;\r\n            this.top = 0;\r\n            this.bottom = 0;\r\n            System.ValueType.ctor.call(this);\r\n            this.left = this.right = point0.get_X();\r\n            this.top = this.bottom = point0.get_Y();\r\n            this.Add$$Point(point1);\r\n        },\r\n        toString: function (){\r\n            return "(" + this.get_LeftBottom() + " " + this.get_RightTop() + ")";\r\n        },\r\n        Intersects: function (rectangle){\r\n            return this.IntersectsOnX(rectangle) && this.IntersectsOnY(rectangle);\r\n        },\r\n        Center$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_Center: function (){\r\n            return Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Double$$Point(0.5, (Microsoft.Msagl.Core.Geometry.Point.op_Addition(this.get_LeftTop(), this.get_RightBottom())));\r\n        },\r\n        set_Center: function (value){\r\n            var shift = Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(value, this.get_Center());\r\n            this.set_LeftTop(Microsoft.Msagl.Core.Geometry.Point.op_Addition(this.get_LeftTop(), shift));\r\n            this.set_RightBottom(Microsoft.Msagl.Core.Geometry.Point.op_Addition(this.get_RightBottom(), shift));\r\n        },\r\n        IntersectsOnY: function (r){\r\n            if (r.get_Bottom() > this.top + Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return false;\r\n            if (r.get_Top() < this.bottom - Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return false;\r\n            return true;\r\n        },\r\n        IntersectsOnX: function (r){\r\n            if (r.get_Left() > this.right + Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return false;\r\n            if (r.get_Right() < this.left - Microsoft.Msagl.Core.Geometry.ApproximateComparer.DistanceEpsilon)\r\n                return false;\r\n            return true;\r\n        },\r\n        Equals$$Object: function (obj){\r\n            if (Is(obj, Microsoft.Msagl.Core.Geometry.Rectangle.ctor))\r\n                this.Equals$$Rectangle(Cast(obj, Microsoft.Msagl.Core.Geometry.Rectangle.ctor));\r\n            return false;\r\n        },\r\n        Equals$$Rectangle: function (rec){\r\n            return rec.get_Left() == this.get_Left() && rec.get_Right() == this.get_Right() && rec.get_Top() == this.get_Top() && rec.get_Bottom() == this.get_Bottom();\r\n        },\r\n        GetHashCode: function (){\r\n            return System.ValueType.commonPrototype.GetHashCode.call(this);\r\n        },\r\n        Left$$: "System.Double",\r\n        get_Left: function (){\r\n            return this.left;\r\n        },\r\n        set_Left: function (value){\r\n            this.left = value;\r\n        },\r\n        Right$$: "System.Double",\r\n        get_Right: function (){\r\n            return this.right;\r\n        },\r\n        set_Right: function (value){\r\n            this.right = value;\r\n        },\r\n        Top$$: "System.Double",\r\n        get_Top: function (){\r\n            return this.top;\r\n        },\r\n        set_Top: function (value){\r\n            this.top = value;\r\n        },\r\n        Bottom$$: "System.Double",\r\n        get_Bottom: function (){\r\n            return this.bottom;\r\n        },\r\n        set_Bottom: function (value){\r\n            this.bottom = value;\r\n        },\r\n        LeftBottom$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_LeftBottom: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(this.get_Left(), this.get_Bottom());\r\n        },\r\n        RightTop$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_RightTop: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(this.get_Right(), this.get_Top());\r\n        },\r\n        LeftTop$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_LeftTop: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(this.left, this.top);\r\n        },\r\n        set_LeftTop: function (value){\r\n            this.left = value.get_X();\r\n            this.top = value.get_Y();\r\n        },\r\n        RightBottom$$: "Microsoft.Msagl.Core.Geometry.Point",\r\n        get_RightBottom: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(this.right, this.bottom);\r\n        },\r\n        set_RightBottom: function (value){\r\n            this.right = value.get_X();\r\n            this.set_Bottom(value.get_Y());\r\n        },\r\n        ctor$$Point: function (point){\r\n            this.left = 0;\r\n            this.right = 0;\r\n            this.top = 0;\r\n            this.bottom = 0;\r\n            System.ValueType.ctor.call(this);\r\n            this.left = this.right = point.get_X();\r\n            this.top = this.bottom = point.get_Y();\r\n        },\r\n        ctor$$Double$$Double$$Point: function (left, bottom, sizeF){\r\n            this.left = 0;\r\n            this.right = 0;\r\n            this.top = 0;\r\n            this.bottom = 0;\r\n            System.ValueType.ctor.call(this);\r\n            this.left = left;\r\n            this.bottom = bottom;\r\n            this.right = left + sizeF.get_X();\r\n            this.top = bottom + sizeF.get_Y();\r\n        },\r\n        ctor$$Double$$Double$$Double$$Double: function (x0, y0, x1, y1){\r\n            this.left = 0;\r\n            this.right = 0;\r\n            this.top = 0;\r\n            this.bottom = 0;\r\n            System.ValueType.ctor.call(this);\r\n            this.left = this.right = x0;\r\n            this.top = this.bottom = y0;\r\n            this.Add$$Point(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(x1, y1));\r\n        },\r\n        Width$$: "System.Double",\r\n        get_Width: function (){\r\n            return this.right - this.left;\r\n        },\r\n        set_Width: function (value){\r\n            var hw = value / 2;\r\n            var cx = (this.left + this.right) / 2;\r\n            this.left = cx - hw;\r\n            this.right = cx + hw;\r\n        },\r\n        IsEmpty$$: "System.Boolean",\r\n        get_IsEmpty: function (){\r\n            return this.get_Width() < 0;\r\n        },\r\n        Height$$: "System.Double",\r\n        get_Height: function (){\r\n            return this.top - this.bottom;\r\n        },\r\n        set_Height: function (value){\r\n            var hw = value / 2;\r\n            var cx = (this.top + this.bottom) / 2;\r\n            this.top = cx + hw;\r\n            this.bottom = cx - hw;\r\n        },\r\n        ctor$$Rectangle$$Rectangle: function (rectangle0, rectangle1){\r\n            this.left = 0;\r\n            this.right = 0;\r\n            this.top = 0;\r\n            this.bottom = 0;\r\n            System.ValueType.ctor.call(this);\r\n            this.left = rectangle0.left;\r\n            this.right = rectangle0.right;\r\n            this.top = rectangle0.top;\r\n            this.bottom = rectangle0.bottom;\r\n            this.Add$$Rectangle(rectangle1);\r\n        },\r\n        Area$$: "System.Double",\r\n        get_Area: function (){\r\n            return (this.right - this.left) * (this.top - this.bottom);\r\n        },\r\n        Add$$Point: function (point){\r\n            if (!this.get_IsEmpty()){\r\n                if (this.left > point.get_X())\r\n                    this.left = point.get_X();\r\n                if (this.top < point.get_Y())\r\n                    this.top = point.get_Y();\r\n                if (this.right < point.get_X())\r\n                    this.right = point.get_X();\r\n                if (this.bottom > point.get_Y())\r\n                    this.bottom = point.get_Y();\r\n            }\r\n            else {\r\n                this.left = this.right = point.get_X();\r\n                this.top = this.bottom = point.get_Y();\r\n            }\r\n        },\r\n        Add$$Rectangle: function (rectangle){\r\n            this.Add$$Point(rectangle.get_LeftTop());\r\n            this.Add$$Point(rectangle.get_RightBottom());\r\n        },\r\n        Contains: function (point){\r\n            return (Microsoft.Msagl.Core.Geometry.ApproximateComparer.Compare(this.left, point.get_X()) <= 0) && (Microsoft.Msagl.Core.Geometry.ApproximateComparer.Compare(this.right, point.get_X()) >= 0) && (Microsoft.Msagl.Core.Geometry.ApproximateComparer.Compare(this.top, point.get_Y()) >= 0) && (Microsoft.Msagl.Core.Geometry.ApproximateComparer.Compare(this.bottom, point.get_Y()) <= 0);\r\n        },\r\n        PadWidth: function (padding){\r\n            this.set_Left(this.get_Left() - padding);\r\n            this.set_Right(this.get_Right() + padding);\r\n        },\r\n        PadHeight: function (padding){\r\n            this.set_Top(this.get_Top() + padding);\r\n            this.set_Bottom(this.get_Bottom() - padding);\r\n        },\r\n        Pad: function (padding){\r\n            if (padding < -this.get_Width() / 2)\r\n                padding = -this.get_Width() / 2;\r\n            if (padding < -this.get_Height() / 2)\r\n                padding = -this.get_Height() / 2;\r\n            this.PadWidth(padding);\r\n            this.PadHeight(padding);\r\n        },\r\n        Clone: function (){\r\n            return new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Point$$Point(this.get_LeftTop(), this.get_RightBottom());\r\n        },\r\n        Size$$: "Microsoft.Msagl.Core.DataStructures.Size",\r\n        get_Size: function (){\r\n            return new Microsoft.Msagl.Core.DataStructures.Size.ctor$$Double$$Double(this.get_Width(), this.get_Height());\r\n        },\r\n        set_Size: function (value){\r\n            this.set_Width(value.get_Width());\r\n            this.set_Height(value.get_Height());\r\n        },\r\n        ctor$$Size$$Point: function (size, center){\r\n            this.left = 0;\r\n            this.right = 0;\r\n            this.top = 0;\r\n            this.bottom = 0;\r\n            System.ValueType.ctor.call(this);\r\n            var w = size.get_Width() / 2;\r\n            this.left = center.get_X() - w;\r\n            this.right = center.get_X() + w;\r\n            var h = size.get_Height() / 2;\r\n            this.bottom = center.get_Y() - h;\r\n            this.top = center.get_Y() + h;\r\n        },\r\n        Add$$Size$$Point: function (size, point){\r\n            var w = size.get_Width() / 2;\r\n            var h = size.get_Height() / 2;\r\n            this.Add$$Point(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(point.get_X() - w, point.get_Y() - h));\r\n            this.Add$$Point(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(point.get_X() + w, point.get_Y() - h));\r\n            this.Add$$Point(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(point.get_X() - w, point.get_Y() + h));\r\n            this.Add$$Point(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(point.get_X() + w, point.get_Y() + h));\r\n        },\r\n        ctor: function (){\r\n            this.left = 0;\r\n            this.right = 0;\r\n            this.top = 0;\r\n            this.bottom = 0;\r\n            System.ValueType.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$Geometry$Rectangle);\r\nvar Microsoft$Msagl$Routing$Visibility$VisibilityKind = {\r\n    fullname: "Microsoft.Msagl.Routing.Visibility.VisibilityKind",\r\n    staticDefinition: {\r\n        Regular: 0,\r\n        Tangent: 1\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Microsoft$Msagl$Routing$Visibility$VisibilityKind);\r\nvar Microsoft$Msagl$Core$ValidateArg = {\r\n    fullname: "Microsoft.Msagl.Core.ValidateArg",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        IsNotNull: function (arg, parameterName){\r\n            if (arg == null){\r\n                throw $CreateException(new System.ArgumentNullException.ctor$$String(parameterName), new Error());\r\n            }\r\n        }\r\n    },\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$ValidateArg);\r\nvar Test$Test$TestEnum = {\r\n    fullname: "Test.Test.TestEnum",\r\n    staticDefinition: {\r\n        C: 0,\r\n        D: 1\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Test$Test$TestEnum);\r\nvar Test$Test$TestInner = {\r\n    fullname: "Test.Test.TestInner",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Test$Test$TestInner);\r\nvar Test$Test$TestInner$TestInnerEnum = {\r\n    fullname: "Test.Test.TestInner.TestInnerEnum",\r\n    staticDefinition: {\r\n        A: 0,\r\n        B: 1\r\n    },\r\n    Kind: "Enum"\r\n};\r\nJsTypes.push(Test$Test$TestInner$TestInnerEnum);\r\nvar Microsoft$Msagl$Core$ValidateArg$ValidatedNotNullAttribute = {\r\n    fullname: "Microsoft.Msagl.Core.ValidateArg.ValidatedNotNullAttribute",\r\n    baseTypeName: "System.Attribute",\r\n    assemblyName: "Microsoft.Msagl",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (){\r\n            System.Attribute.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(Microsoft$Msagl$Core$ValidateArg$ValidatedNotNullAttribute);\r\n\r\n'},function(e,t,n){n(0)(n(7))},function(e,t){e.exports='function $CombineDelegates(n,t){var r,i;if(n==null)return t;if(t==null)return n;if(r=$CreateMulticastDelegateFunction(),r.delegates=[],n.isMulticastDelegate)for(i=0;i<n.delegates.length;i++)r.delegates.push(n.delegates[i]);else r.delegates.push(n);if(t.isMulticastDelegate)for(i=0;i<t.delegates.length;i++)r.delegates.push(t.delegates[i]);else r.delegates.push(t);return r}function $CreateMulticastDelegateFunction(){var n=null,t=function(){for(var r,i=undefined,t=0;t<n.delegates.length;t++)r=n.delegates[t],i=r.apply(null,arguments);return i};return t.isMulticastDelegate=!0,n=t,t}function $RemoveDelegate(n,t){var i,r,u;if(t==null||n==null)return n;if(n.isMulticastDelegate){if(t.isMulticastDelegate)throw new Error("Multicast to multicast delegate removal is not implemented yet");for(i=$CreateMulticastDelegateFunction(),r=0;r<n.delegates.length;r++)u=n.delegates[r],u!=t&&(i.delegates==null&&(i.delegates=[]),i.delegates.push(u));return i.delegates==null?null:i.delegates.length==1?i.delegates[0]:i}if(t.isMulticastDelegate)throw new Error("single to multicast delegate removal is not supported");return n==t?null:n}function RemoveDelegate(n,t){var i,r,u;if(t==null||n==null)return n;if(n.isMulticastDelegate){if(t.isMulticastDelegate)throw $CreateException(new System.NotImplementedException.ctor$$String("Multicast to multicast delegate removal is not implemented yet"),new Error);for(i=CreateMulticastDelegateFunction(),r=0;r<n.delegates.length;r++)u=n.delegates[r],u!=t&&(i.delegates==null&&(i.delegates=[]),i.delegates.push(u));return i.delegates==null?null:i.delegates.length==1?i.delegates[0]:i}if(t.isMulticastDelegate)throw $CreateException(new System.NotImplementedException.ctor$$String("single to multicast delegate removal is not supported"),new Error);return n==t?null:n}function CombineDelegates(n,t){var r,i;if(n==null)return t;if(t==null)return n;if(r=CreateMulticastDelegateFunction(),r.delegates=[],n.isMulticastDelegate)for(i=0;i<n.delegates.length;i++)r.delegates.push(n.delegates[i]);else r.delegates.push(n);if(t.isMulticastDelegate)for(i=0;i<t.delegates.length;i++)r.delegates.push(t.delegates[i]);else r.delegates.push(t);return r}function CreateMulticastDelegateFunction(){var n=null,t=function(){for(var r,i=undefined,t=0;t<n.delegates.length;t++)r=n.delegates[t],i=r.apply(null,arguments);return i};return t.isMulticastDelegate=!0,n=t,t}function CreateClrDelegate(n,t,i,r){return JsTypeHelper.GetDelegate(i,r)}function Typeof(n){if(n==null)throw $CreateException(new Error("Unknown type."),new Error);return(typeof n=="function"&&(n=JsTypeHelper.GetType(n)),typeof n=="string")?System.Type.GetType$$String$$Boolean(n,!0):System.Type._TypeOf(n)}function JsTypeof(n){return JsTypeHelper.GetType(n,!1)}function New(n,t){var i=JsTypeHelper.GetType(n,!0),r;return t==null||t.length==0?JsCompiler.NewByFunc(i.ctor):JsCompiler.NewByFuncArgs(i.ctor,t)}function NewWithInitializer(n,t){var r=JsCompiler.NewByFunc(n.ctor),i,u;if(typeof t=="array")throw $CreateException(new System.Exception.ctor$$String("not implemented"),new Error);else for(i in t)u=r["set_"+i],typeof u=="function"?u.call(r,t[i]):r[i]=t[i];return r}function As(n,t){if(n==null)return n;var i=JsTypeHelper.GetType(t,!0);return Is(n,i)?n:null}function Cast(n,t){var i,r,u,f;if(n==null||(i=JsTypeHelper.GetType(t,!0),Is(n,i)))return n;if(r=TryImplicitConvert(n,i),r!=null)return r;u=typeof n;typeof n.getTypeName=="function"&&(u=n.getTypeName());f=["InvalidCastException: Cannot cast ",u," to ",i.fullname,"Exception generated by JsRuntime"].join("");throw $CreateException(new Error(f),new Error);}function _TestTypeInterfacesIs(n,t,i){var r,u;if(i[t.name])return!1;for(r=0;r<n.interfaces.length;r++)if((u=n.interfaces[r],u==t)||(i[u.name]=!0,_TestTypeInterfacesIs(u,t,i)))return!0;return!1}function TypeIs(n,t){var r,i;if(n==t)return!0;if(t.Kind=="Interface"){for(r={};n!=null;){if(n==t||_TestTypeInterfacesIs(n,t,r))return!0;n=n.baseType}return!1}if(t.Kind=="Delegate"&&n.fullname=="System.Delegate"||n.fullname=="System.Int32"&&(t.fullname=="System.Decimal"||t.fullname=="System.Double"||t.fullname=="System.Single"))return!0;for(i=n.baseType;i!=null;){if(i==t)return!0;i=i.baseType}return!1}function Is(n,t){var r,i,u,f;if(n==null)return!1;if(r=JsTypeHelper.GetType(t,!0),r==null){if(r==null&&typeof t=="function"){for(i=t,u=0;i!=null&&u<20;){if(n instanceof i)return!0;i=i.$baseCtor;u++}return!1}throw $CreateException(new Error("type expected"),new Error);}return(f=GetObjectType(n),f==null)?!1:TypeIs(f,r)}function Default(){return null}function GetObjectType(n){var t,i;if(n.constructor==null||n instanceof Node||n.constructor==HTMLImageElement||n.constructor==HTMLInputElement||n.constructor.name=="HTMLImageElement"||n.constructor.name=="HTMLInputElement"){if(i=SharpKit.Html4.HtmlDom.GetTypeNameFromHtmlNode(n),i==null)throw new Error;t=JsTypeHelper.GetType(i,!0)}else t=n.constructor._type;return t===undefined?null:t}function TryImplicitConvert(n,t){if(n instanceof Error){if(n._Exception!=null)return Is(n._Exception,t)?n._Exception:null;if(t.get_FullName()=="System.Exception")return n._Exception=new Exception(n.message),n._Exception}return null}function Compile(){JsCompiler.Compile_Direct()}function AfterCompilation(n){IsCompiled?n():AfterCompilationFunctions.push(n)}function AfterNextCompilation(n){AfterCompilationFunctions.push(n)}function BeforeCompilation(n){BeforeCompilationFunctions.push(n)}var $CreateException,$iKey,$pKey,$CreateDelegate,Int32Array,Uint8Array,JsCompiler,Node,JsTypeHelper,System$Activator,System$Array,SharpKit$JavaScript$Private$JsComparerHelper$1,System$Attribute,System$Collections$Comparer,SharpKit$JavaScript$Private$DefaultComparer,System$Collections$Generic$Comparer$1,System$Collections$Generic$KeyNotFoundException,System$Collections$Generic$IEnumerator$1,System$Collections$Generic$IEnumerable$1,System$Collections$Generic$IList$1,System$Collections$Generic$ICollection$1,System$Collections$Generic$IDictionary$2,System$Collections$Generic$ISet$1,System$Collections$IEqualityComparer,System$Collections$Generic$IEqualityComparer$1,System$Collections$Generic$IComparer$1,System$Comparison$1,System$Collections$IDictionary,System$Collections$IEnumerable,System$Collections$IEnumerator,System$Collections$ICollection,System$Collections$IList,System$Collections$IComparer,System$Collections$Specialized$NotifyCollectionChangedAction,System$Collections$Specialized$INotifyCollectionChanged,System$Collections$Specialized$NotifyCollectionChangedEventArgs,System$ComponentModel$AsyncCompletedEventHandler,System$ComponentModel$AsyncCompletedEventArgs,System$ComponentModel$CancelEventHandler,System$ComponentModel$CancelEventArgs,System$ComponentModel$INotifyPropertyChanging,System$ComponentModel$INotifyPropertyChanged,System$ComponentModel$PropertyChangedEventHandler,System$ComponentModel$PropertyChangedEventArgs,System$DateTime,System$DateTimeKind,System$Delegate,System$MulticastDelegate,System$Action,System$Action$1,System$Action$2,System$Action$3,System$Func$1,System$Func$2,System$Func$3,System$Func$4,System$EventHandler,System$EventHandler$1,System$Predicate$1,System$Enum,System$Environment,System$EventArgs,System$Exception,System$NotImplementedException,System$SystemException,System$ArgumentException,System$NullReferenceException,System$NotSupportedException,System$ArgumentOutOfRangeException,System$Guid,System$ICloneable,System$IDisposable,System$Int64,System$IComparable,System$IComparable$1,System$IEquatable$1,System$IFormattable,System$Nullable$1,System$Random,System$StringSplitOptions,System$Char,System$CharEnumerator,System$StringComparison,System$TimeSpan,System$Tuple,System$Tuple$1,System$Tuple$2,System$Tuple$3,System$Tuple$4,System$Tuple$5,System$Tuple$6,System$Tuple$7,System$UInt32,System$Uri,System$ValueType,SharpKit$Html4$HtmlDomEventHandler,JsRuntime,HTMLImageElement,HTMLInputElement,ENABLE_PROFILER,ENABLE_PROFILING,envDebugFunction,Debug,Arguments,System$IO$Path,System$Linq$Enumerable,System$Linq$_Error,System$Linq$IGrouping$2,System$Linq$IOrderedEnumerable$1,System$Linq$Error,System$Linq$_OrderedEnumerable$1,System$Linq$_OrderedEnumerable$2,System$Linq$Enumerable$Iterator,System$Linq$Enumerable$SelectManyEnumerableIterator,System$Linq$Enumerable$SelectManyListIterator,System$Linq$Enumerable$WhereArrayIterator,System$Linq$Enumerable$WhereEnumerableIterator,System$Linq$Enumerable$WhereListIterator,System$Linq$Enumerable$WhereSelectArrayIterator,System$Linq$Enumerable$WhereSelectEnumerableIterator,System$Linq$Enumerable$WhereSelectListIterator,System$Linq$Enumerable$OfTypeIterator,System$Linq$Enumerable$SkipIterator,System$Linq$Enumerable$TakeIterator,SharpKit$JavaScript$Private$Enumerable$ConcatEnumerable$1,SharpKit$JavaScript$Private$Enumerable$ConcatEnumerator$1,System$Linq$Enumerable$SelectManyArrayIterator,System$Collections$ArrayList,System$Collections$Generic$Dictionary$2,System$Collections$Generic$HashSet$1,System$StringComparer,SharpKit$JavaScript$Private$StringComparer_InvariantCultureIgnoreCase,System$Collections$Generic$KeyValuePair$2,System$Collections$Generic$List$1,System$Collections$Generic$Queue$1,System$Collections$Generic$Stack$1,System$Collections$Generic$JsArrayEnumerator$1,System$Collections$ObjectModel$Collection$1,System$Collections$ObjectModel$ObservableCollection$1,System$Collections$ObjectModel$ReadOnlyCollection$1,System$Collections$ObjectModel$ReadOnlyObservableCollection$1,System$Collections$IListEnumerator$1,System$Collections$ObjectModel$ObservableCollection$1$Reentrant,System$Reflection$BindingFlags,System$Reflection$MemberInfo,System$Reflection$MethodBase,System$Reflection$MethodInfo,System$Reflection$PropertyInfo,System$Type,System$Diagnostics$Debugger,System$Diagnostics$Trace,System$ComponentModel$ListSortDirection,System$Math,System$Text$StringBuilder,JsTypes,System$Runtime$Serialization$IExtensibleDataObject,System$Runtime$Serialization$ISerializable,SharpKit$PropertyInfoExtensions,SharpKit$Extensions2,SharpKit$JavaScript$Utils$Js,SharpKit$JsClr$Utils$JsClrClientSerializer,SharpKit$JavaScript$JsNamingHelper;typeof $CreateException=="undefined"&&($CreateException=function(n,t){t==null&&(t=new Error);n==null&&(n=new System.Exception.ctor);t.message=n.message;for(var i in n)t[i]=n[i];return t});typeof $CreateDelegate=="undefined"&&(typeof $iKey=="undefined"&&($iKey=0),typeof $pKey=="undefined"&&($pKey=String.fromCharCode(1)),$CreateDelegate=function(n,t){if(n==null||t==null||t.target==n&&t.func==t)return t;n.$delegateCache==null&&(n.$delegateCache={});t.$key==null&&(t.$key=$pKey+String(++$iKey));var i;return n.$delegateCache!=null&&(i=n.$delegateCache[t.$key]),i==null&&(i=function(){return t.apply(n,arguments)},i.func=t,i.target=n,i.isDelegate=!0,n.$delegateCache!=null&&(n.$delegateCache[t.$key]=i)),i});typeof Int32Array=="undefined"&&(Int32Array=Array);typeof Uint8Array=="undefined"&&(Uint8Array=Array);var AfterCompilationFunctions=[],BeforeCompilationFunctions=[],IsCompiled=!1;JsCompiler=function(){};JsCompiler.__LastException=null;JsCompiler.Types={};JsCompiler._hashKeyIndex=0;JsCompiler._hashKeyPrefix=String.fromCharCode(1);JsCompiler.Compile_Direct=function(){JsCompiler.Compile_Phase1();JsCompiler.Compile_Phase2();JsCompiler.Compile_Phase3()};JsCompiler.Compile_Phase1=function(){for(var t,f,u,i=0,o=BeforeCompilationFunctions.length,e=BeforeCompilationFunctions[i];i<o;i++,e=BeforeCompilationFunctions[i])e();BeforeCompilationFunctions=[];for(var r=0,s=JsTypes.length,n=JsTypes[r];r<s;r++,n=JsTypes[r])t=n.fullname,f=JsCompiler.Types[t],f==null?JsCompiler.Types[t]=n:(n.isPartial=!0,n.realType=f),n.derivedTypes==null&&(n.derivedTypes=[]),n.interfaces==null&&(n.interfaces=[]),n.definition==null&&(n.definition={}),u=t.lastIndexOf("."),u==-1?n.name=t:(n.name=t.substring(u+1),n.ns=t.substring(0,u)),n.Kind=="Enum"?(n.baseTypeName==null&&(n.baseTypeName="System.Object"),n.definition.toString==Object.prototype.toString&&(n.definition.toString=new Function("return this._Name;"))):n.Kind=="Struct"&&n.baseTypeName==null&&(n.baseTypeName="System.ValueType")};JsCompiler.Compile_Phase2=function(){for(var r,n=0;n<JsTypes.length;n++)r=JsTypes[n],JsCompiler.Compile_Phase2_TmpType(r);for(var t=0,u=JsTypes.length,i=JsTypes[t];t<u;t++,i=JsTypes[t])i.cctor!=null&&i.cctor();JsCompiler.LinkInterfaceMethods();JsTypes=[]};JsCompiler.Compile_Phase2_TmpType=function(n){var r=n.fullname,t=JsCompiler.CompileType(n),i;t!=null&&JsCompiler.CopyMemberIfNotDefined(t,t.fullname,window);t.ns!=null&&(i=JsCompiler.ResolveNamespace(t.ns),t!=null&&(i[t.name]=t))};JsCompiler.LinkInterfaceMethods=function(){for(var n,i,u,r,f,e,o,t=0;t<JsTypes.length;t++)for(n=JsTypes[t],i=0;i<n.interfaces.length;i++){u=n.interfaces[i];for(r in u.definition)f=u.name+"$$"+r,e=n.commonPrototype[f],e==undefined&&(o=n.commonPrototype[r],o!=undefined&&(n.commonPrototype[f]=n.commonPrototype[r]))}};JsCompiler.Compile_Phase3=function(){var t=AfterCompilationFunctions;AfterCompilationFunctions=[];for(var n=0,r=t.length,i=t[n];n<r;n++,i=t[n])i();IsCompiled=!0};JsCompiler.CopyMemberIfNotDefined=function(n,t,i){i[t]===undefined&&(i[t]=n)};JsCompiler._CopyObject=function(n,t){for(var i in n)t[i]=n[i];n.toString!=Object.prototype.toString&&t.toString==Object.prototype.toString&&(t.toString=n.toString)};JsCompiler._SafeCopyObject=function(n,t){for(var i in n)typeof t[i]!="undefined"||(t[i]=n[i]);n.toString!=Object.prototype.toString};JsCompiler._EnumTryParse=function(n){return this.staticDefintion[n]};JsCompiler.NewByFunc=function(n){return new n};JsCompiler.NewByFuncArgs=function(n,t){return new n.apply(null,t)};JsCompiler.GetNativeToStringFunction=function(){return Object.prototype.toString};JsCompiler.Throw=function(n){__LastException=n||__LastException;var t=new Error(n.ToString());t._Exception=n;throw t;};JsCompiler.CreateEmptyCtor=function(){return function(){}};JsCompiler.CreateBaseCtor=function(n){return function(){this.construct(n)}};typeof Node=="undefined"&&(Node=function(){});JsCompiler.ResolveNamespace=function(n){for(var i,t=window,u=n.split("."),r=0;r<u.length;r++)i=u[r],typeof t[i]=="undefined"&&(t[i]={}),t[i].name=u.slice(0,r).join("."),t=t[i];return t};JsCompiler.ResolveBaseType=function(n,t){var i=JsTypeHelper.GetType(n.baseTypeName);i==null&&(i=JsTypeHelper.GetTypeIgnoreNamespace(n.baseTypeName,!0));i.isCompiled||JsCompiler.CompileType(i);t.baseType=i;i.derivedTypes.push(t)};JsCompiler.ResolveInterfaces=function(n,t){var r,u,i;if(n.interfaceNames!=null)for(r=0;r<n.interfaceNames.length;r++)u=n.interfaceNames[r],i=JsTypeHelper.GetType(u),i==null&&(i=JsTypeHelper.GetTypeIgnoreNamespace(u,!0)),i.isCompiled||JsCompiler.CompileType(i),t.interfaces.push(i)};JsCompiler.CompileType=function(n){var t=JsCompiler.Types[n.fullname]!=null?JsCompiler.Types[n.fullname]:n,e,u,o,i,r,f;if(t.ctors==null&&(t.ctors={}),!n.isCompiled){e=!1;t.baseType==null&&t.baseTypeName!=null&&(JsCompiler.ResolveBaseType(n,t),t.baseType!=null&&(e=!0));JsCompiler.ResolveInterfaces(n,t);for(i in n.definition)i.search("ctor")==0&&(t[i]=n.definition[i],delete n.definition[i],typeof t.commonPrototype=="undefined"?t.commonPrototype=t[i].prototype:t[i].prototype=t.commonPrototype,t.ctors[i]=t[i]),i=="cctor"&&(t.cctor=i);t.ctor==null&&((t.ns==null||t.ns=="")&&(u=window[t.name],(typeof u=="function"||typeof u=="object")&&(t.ctor=u)),t.ctor==null&&t.ctors!=null&&(t.ctor=t.baseType!=null?JsCompiler.CreateBaseCtor(t):JsCompiler.CreateEmptyCtor()),t.ctor!=null&&(t.ctors.ctor=t.ctor,typeof t.commonPrototype=="undefined"?t.commonPrototype=t.ctor.prototype:t.ctor.prototype=t.commonPrototype));for(i in t.ctors)o=t.ctors[i],o._type==null&&(o._type=t);e&&JsCompiler._CopyObject(t.baseType.commonPrototype,t.commonPrototype);for(i in n.definition)r=n.definition[i],t.commonPrototype[i]=r,typeof r=="function"&&(r._name=i,r._type=t);n.definition.toString!=Object.prototype.toString&&(t.commonPrototype.toString=n.definition.toString,t.commonPrototype.toString._type=t);for(i in n.staticDefinition)r=n.staticDefinition[i],t[i]=r,typeof r=="function"&&(r._name=i,r._type=t);n.isCompiled=!0}if(JsCompiler.CompileEnum(t),t!=n&&n.customAttributes!=null)if(t.customAttributes!=null)for(f=0;f<n.customAttributes.length;f++)t.customAttributes.push(n.customAttributes[f]);else t.customAttributes=n.customAttributes;return t};JsCompiler.CompileEnum=function(n){var t,i;if(n.Kind=="Enum"){n.tryParse=JsCompiler._EnumTryParse;for(t in n.staticDefinition)typeof n.staticDefinition[t]=="string"&&(i=JsCompiler.NewByFunc(n.ctor),i._Name=t,n.staticDefinition[t]=i,n[t]=i)}};JsCompiler.GetHashKey=function(n){if(n==undefined)return"undefined";if(n==null)return"null";n.valueOf&&(n=n.valueOf());var t=typeof n;return t=="string"?n:t=="object"||t=="function"?(n._hashKey==null&&(n._hashKey=JsCompiler._hashKeyPrefix+JsCompiler._hashKeyIndex,JsCompiler._hashKeyIndex++),n._hashKey):n.toString()};JsTypeHelper=function(){};JsTypeHelper.GetTypeIgnoreNamespaceCache=null;JsTypeHelper.GetTypeIgnoreNamespace=function(n,t){var i,r=JsTypeHelper.GetTypeIgnoreNamespaceCache,f,e,u;if(r!=null&&(i=r[n],typeof i!="undefined")){if(t&&i==null)throw $CreateException(new Error("type "+n+" was not found with (with IgnoreNamespace)."),new Error);return i}if(n.search(".")>-1&&(f=n.split("."),n=f[f.length-1]),i=JsCompiler.Types[n],e="."+n,i==null)for(u in JsCompiler.Types)if(u==n||u.endsWith(e)){i=JsCompiler.Types[u];break}if(t&&i==null)throw $CreateException(new Error("type "+n+" was not found with (with IgnoreNamespace)."),new Error);return r!=null&&(r[n]=i!=null?i:null),i};JsTypeHelper._HasTypeArguments=function(n){return n.indexOf("[")>-1};JsTypeHelper._GetTypeWithArguments=function(n,t){var f=n,h=f.indexOf("`"),i,e,r,o,u,s;if(h!=-1&&f.indexOf("[")>-1){if((i=JsTypeHelper._ParseTypeNameArgs(f),i==null)||(e=JsTypeHelper.GetType(i[0],t),e==null))return null;for(r=new Array(0),r.push(e),o=new Array(0),u=0;u<i[1].length;u++){if(s=JsTypeHelper.GetType(i[1][u][0],t),s==null)return null;o.push(s)}return r.push(o),r}return null};JsTypeHelper._ParseTypeNameArgs=function(n){var t=n.replace(/, [a-zA-Z0-9, =.]+\\]/g,"]");t=t.replace(/`([0-9])/g,"$$$1,");t="["+t+"]";try{return eval(t)}catch(i){return null}};JsTypeHelper.GetType=function(n,t){var i,r,u;if(typeof n!="string")return typeof n=="function"?n._type:n;if(i=n,r=i.indexOf("`"),r!=-1&&(i=i.substr(0,r+2).replace("`","$")),u=JsCompiler.Types[i],u==null){if(t)throw $CreateException(new Error("JsType "+i+" was not found"),new Error);return null}return u};JsTypeHelper.FindType=function(n,t){var i=JsTypeHelper.GetType(n,!1);return i==null&&(i=JsTypeHelper.GetTypeIgnoreNamespace(n,t)),i};JsTypeHelper.GetAssemblyQualifiedName=function(n){if(n._AssemblyQualifiedName==null){var t=n.fullname;n.assemblyName!=null&&(t+=", "+n.assemblyName);n._AssemblyQualifiedName=t}return n._AssemblyQualifiedName};JsTypeHelper.GetName=function(n){return n.name};JsTypeHelper.getMemberTypeName=function(n,t){var r=n[t+"$$"],i,u;return r==null?null:(i=r.split(" "),u=i[i.length-1],u)};JsTypeHelper.GetDelegate=function(n,t){var u=n,r,f,i;return u==null?t:(typeof t=="string"&&(t=u[t]),r=u.__delegateCache,r==null&&(r={},u.__delegateCache=r),f=JsCompiler.GetHashKey(t),i=r[f],i==null&&(i=function(){var n=arguments.callee;return n.func.apply(i.target,arguments)},i.func=t,i.target=u,i.isDelegate=!0,r[f]=i),i)};typeof JsTypes=="undefined"&&(JsTypes=[]);System$Activator={fullname:"System.Activator",baseTypeName:"System.Object",staticDefinition:{CreateInstance$$Type:function(n){return new n._JsType.ctor},CreateInstance$$Type$$BindingFlags$$Binder$$Object$Array$$CultureInfo:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},CreateInstance$$Type$$BindingFlags$$Binder$$Object$Array$$CultureInfo$$Object$Array:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},CreateInstance$$Type$$Object$Array:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},CreateInstance$$Type$$Object$Array$$Object$Array:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},CreateInstance$$Type$$Boolean:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},CreateInstance$1:function(n){return System.Activator.CreateInstance$$Type(Typeof(n))}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Activator);System$Array={fullname:"System.Array",baseTypeName:"System.Object",staticDefinition:{Sort$$Array:function(n){System.Array.Sort$1$$T$Array(System.Object.ctor,n)},Sort$1$$T$Array:function(n,t){System.Array.Sort$1$$T$Array$$Comparison$1(n,t,null)},Sort$1$$T$Array$$Comparison$1:function(n,t,i){var f=!(t instanceof Array),u,r;if(f)for(u=new Array(t.length),r=0;r<t.length;r++)u[r]=t[r];else u=t;if(i==null&&(i=$CreateDelegate(System.Collections.Generic.Comparer$1.get_Default(),System.Collections.Generic.Comparer$1.get_Default().Compare)),i==null?u.sort():u.sort(i),f)for(r=0;r<t.length;r++)t[r]=u[r]},Sort$1$$T$Array$$IComparer$1:function(n,t,i){System.Array.Sort$1$$T$Array$$Comparison$1(n,t,$CreateDelegate(new SharpKit.JavaScript.Private.JsComparerHelper$1.ctor(n,i),new SharpKit.JavaScript.Private.JsComparerHelper$1.ctor(n,i).Compare))},Sort$$Array$$IComparer:function(n,t){System.Array.Sort$1$$T$Array$$IComparer$1(System.Object.ctor,n,t)}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Array);SharpKit$JavaScript$Private$JsComparerHelper$1={fullname:"SharpKit.JavaScript.Private.JsComparerHelper$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IComparer$1"],Kind:"Class",definition:{ctor:function(n,t){this.T=n;this.cmp=null;System.Object.ctor.call(this);this.cmp=t},Compare:function(n,t){return this.cmp.Compare(n,t)}}};JsTypes.push(SharpKit$JavaScript$Private$JsComparerHelper$1);System$Attribute={fullname:"System.Attribute",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Attribute);System$Collections$Comparer={fullname:"System.Collections.Comparer",baseTypeName:"System.Object",staticDefinition:{cctor:function(){System.Collections.Comparer._Default=null},Default$$:"SharpKit.JavaScript.Private.JsImplComparer",get_Default:function(){return System.Collections.Comparer._Default==null&&(System.Collections.Comparer._Default=new SharpKit.JavaScript.Private.DefaultComparer.ctor),System.Collections.Comparer._Default}},assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.IComparer"],Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Collections$Comparer);SharpKit$JavaScript$Private$DefaultComparer={fullname:"SharpKit.JavaScript.Private.DefaultComparer",baseTypeName:"System.Collections.Comparer",staticDefinition:{cctor:function(){}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Collections.Comparer.ctor.call(this)},Compare:function(n,t){var i=n,r=t;return i.CompareTo?i.CompareTo(t):i>r?1:i<r?-1:0}}};JsTypes.push(SharpKit$JavaScript$Private$DefaultComparer);System$Collections$Generic$Comparer$1={fullname:"System.Collections.Generic.Comparer$1",baseTypeName:"System.Object",staticDefinition:{cctor:function(){System.Collections.Generic.Comparer$1._Default=null},Default$$:"SharpKit.JavaScript.Private.JsImplComparer`1[[`0]]",get_Default:function(){return System.Collections.Generic.Comparer$1._Default==null&&(System.Collections.Generic.Comparer$1._Default=new SharpKit.JavaScript.Private.DefaultComparer.ctor),System.Collections.Generic.Comparer$1._Default}},assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IComparer$1"],Kind:"Class",definition:{ctor:function(n){this.T=n;System.Object.ctor.call(this)}}};JsTypes.push(System$Collections$Generic$Comparer$1);System$Collections$Generic$KeyNotFoundException={fullname:"System.Collections.Generic.KeyNotFoundException",baseTypeName:"System.Exception",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Exception.ctor$$String.call(this,"JsImplKeyNotFoundException")},ctor$$String:function(n){System.Exception.ctor$$String.call(this,"JsImplKeyNotFoundException: "+n)},ctor$$String$$Exception:function(n,t){System.Exception.ctor$$String$$Exception.call(this,"JsImplKeyNotFoundException: "+n,t)}}};JsTypes.push(System$Collections$Generic$KeyNotFoundException);System$Collections$Generic$IEnumerator$1={fullname:"System.Collections.Generic.IEnumerator$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$Generic$IEnumerator$1);System$Collections$Generic$IEnumerable$1={fullname:"System.Collections.Generic.IEnumerable$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.IEnumerable"],Kind:"Interface"};JsTypes.push(System$Collections$Generic$IEnumerable$1);System$Collections$Generic$IList$1={fullname:"System.Collections.Generic.IList$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.ICollection$1"],Kind:"Interface"};JsTypes.push(System$Collections$Generic$IList$1);System$Collections$Generic$ICollection$1={fullname:"System.Collections.Generic.ICollection$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerable$1"],Kind:"Interface"};JsTypes.push(System$Collections$Generic$ICollection$1);System$Collections$Generic$IDictionary$2={fullname:"System.Collections.Generic.IDictionary$2",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$Generic$IDictionary$2);System$Collections$Generic$ISet$1={fullname:"System.Collections.Generic.ISet$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.ICollection$1","System.Collections.Generic.IEnumerable$1","System.Collections.IEnumerable"],Kind:"Interface"};JsTypes.push(System$Collections$Generic$ISet$1);System$Collections$IEqualityComparer={fullname:"System.Collections.IEqualityComparer",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$IEqualityComparer);System$Collections$Generic$IEqualityComparer$1={fullname:"System.Collections.Generic.IEqualityComparer$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$Generic$IEqualityComparer$1);System$Collections$Generic$IComparer$1={fullname:"System.Collections.Generic.IComparer$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$Generic$IComparer$1);System$Comparison$1={fullname:"System.Comparison$1",Kind:"Delegate",definition:{ctor:function(n,t,i){this.T=n;System.MulticastDelegate.ctor.call(this,t,i)}}};JsTypes.push(System$Comparison$1);System$Collections$IDictionary={fullname:"System.Collections.IDictionary",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.ICollection","System.Collections.IEnumerable"],Kind:"Interface"};JsTypes.push(System$Collections$IDictionary);System$Collections$IEnumerable={fullname:"System.Collections.IEnumerable",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$IEnumerable);System$Collections$IEnumerator={fullname:"System.Collections.IEnumerator",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$IEnumerator);System$Collections$ICollection={fullname:"System.Collections.ICollection",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.IEnumerable"],Kind:"Interface"};JsTypes.push(System$Collections$ICollection);System$Collections$IList={fullname:"System.Collections.IList",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.ICollection"],Kind:"Interface"};JsTypes.push(System$Collections$IList);System$Collections$IComparer={fullname:"System.Collections.IComparer",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$IComparer);System$Collections$Specialized$NotifyCollectionChangedAction={fullname:"System.Collections.Specialized.NotifyCollectionChangedAction",staticDefinition:{Add:0,Remove:1,Replace:2,Move:3,Reset:4},Kind:"Enum"};JsTypes.push(System$Collections$Specialized$NotifyCollectionChangedAction);System$Collections$Specialized$INotifyCollectionChanged={fullname:"System.Collections.Specialized.INotifyCollectionChanged",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Collections$Specialized$INotifyCollectionChanged);System$Collections$Specialized$NotifyCollectionChangedEventArgs={fullname:"System.Collections.Specialized.NotifyCollectionChangedEventArgs",baseTypeName:"System.EventArgs",staticDefinition:{cctor:function(){}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor$$NotifyCollectionChangedAction:function(n){if(this.action=0,this.oldItems=null,this.newItems=null,this.oldIndex=-1,this.newIndex=-1,System.EventArgs.ctor.call(this),this.action=n,n!=4)throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action.","action"),new Error);},ctor$$NotifyCollectionChangedAction$$IList:function(n,t){this.action=0;this.oldItems=null;this.newItems=null;this.oldIndex=-1;this.newIndex=-1;System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$IList$$Int32.call(this,n,t,-1)},ctor$$NotifyCollectionChangedAction$$Object:function(n,t){this.action=0;this.oldItems=null;this.newItems=null;this.oldIndex=-1;this.newIndex=-1;System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$Object$$Int32.call(this,n,t,-1)},ctor$$NotifyCollectionChangedAction$$IList$$IList:function(n,t,i){this.action=0;this.oldItems=null;this.newItems=null;this.oldIndex=-1;this.newIndex=-1;System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$IList$$IList$$Int32.call(this,n,t,i,-1)},ctor$$NotifyCollectionChangedAction$$IList$$Int32:function(n,t,i){if(this.action=0,this.oldItems=null,this.newItems=null,this.oldIndex=-1,this.newIndex=-1,System.EventArgs.ctor.call(this),this.action=n,n==0||n==1){if(t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("changedItems"),new Error);if(i<-1)throw $CreateException(new System.ArgumentException.ctor$$String$$String("The value of startingIndex must be -1 or greater.","startingIndex"),new Error);n==0?this.InitializeAdd(t,i):this.InitializeRemove(t,i)}else if(n==4){if(t!=null)throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action if changedItems is null","changedItems"),new Error);if(i!=-1)throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action if startingIndex is -1","startingIndex"),new Error);}else throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset, Add, or Remove actions.","action"),new Error);},ctor$$NotifyCollectionChangedAction$$Object$$Int32:function(n,t,i){this.action=0;this.oldItems=null;this.newItems=null;this.oldIndex=-1;this.newIndex=-1;System.EventArgs.ctor.call(this);var r=[t];if(this.action=n,n==0)this.InitializeAdd(r,i);else if(n==1)this.InitializeRemove(r,i);else if(n==4){if(t!=null)throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action if changedItem is null","changedItem"),new Error);if(i!=-1)throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action if index is -1","index"),new Error);}else throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset, Add, or Remove actions.","action"),new Error);},ctor$$NotifyCollectionChangedAction$$Object$$Object:function(n,t,i){this.action=0;this.oldItems=null;this.newItems=null;this.oldIndex=-1;this.newIndex=-1;System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$Object$$Object$$Int32.call(this,n,t,i,-1)},ctor$$NotifyCollectionChangedAction$$IList$$IList$$Int32:function(n,t,i,r){if(this.action=0,this.oldItems=null,this.newItems=null,this.oldIndex=-1,this.newIndex=-1,System.EventArgs.ctor.call(this),this.action=n,n!=2)throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Replace action.","action"),new Error);if(t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("newItems"),new Error);if(i==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("oldItems"),new Error);this.oldItems=i;this.newItems=t;this.oldIndex=r;this.newIndex=r},ctor$$NotifyCollectionChangedAction$$IList$$Int32$$Int32:function(n,t,i,r){if(this.action=0,this.oldItems=null,this.newItems=null,this.oldIndex=-1,this.newIndex=-1,System.EventArgs.ctor.call(this),this.action=n,n!=3)throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Move action.","action"),new Error);if(i<-1)throw $CreateException(new System.ArgumentException.ctor$$String$$String("The value of index must be -1 or greater.","index"),new Error);this.InitializeMove(t,i,r)},ctor$$NotifyCollectionChangedAction$$Object$$Int32$$Int32:function(n,t,i,r){this.action=0;this.oldItems=null;this.newItems=null;this.oldIndex=-1;this.newIndex=-1;System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$IList$$Int32$$Int32.call(this,n,[t],i,r)},ctor$$NotifyCollectionChangedAction$$Object$$Object$$Int32:function(n,t,i,r){if(this.action=0,this.oldItems=null,this.newItems=null,this.oldIndex=-1,this.newIndex=-1,System.EventArgs.ctor.call(this),this.action=n,n!=2)throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Replace action.","action"),new Error);this.InitializeReplace([t],[i],r)},Action$$:"System.Collections.Specialized.NotifyCollectionChangedAction",get_Action:function(){return this.action},NewItems$$:"System.Collections.IList",get_NewItems:function(){return this.newItems},NewStartingIndex$$:"System.Int32",get_NewStartingIndex:function(){return this.newIndex},OldItems$$:"System.Collections.IList",get_OldItems:function(){return this.oldItems},OldStartingIndex$$:"System.Int32",get_OldStartingIndex:function(){return this.oldIndex},InitializeAdd:function(n,t){var i,r;for(this.newItems=new System.Collections.Generic.List$1.ctor(System.Object.ctor),i=n.GetEnumerator();i.MoveNext();)r=i.get_Current(),this.newItems.Add(r);this.newIndex=t},InitializeRemove:function(n,t){var i,r;for(this.oldItems=new System.Collections.Generic.List$1.ctor(System.Object.ctor),i=n.GetEnumerator();i.MoveNext();)r=i.get_Current(),this.oldItems.Add(r);this.oldIndex=t},InitializeMove:function(n,t,i){this.InitializeAdd(n,t);this.InitializeRemove(n,i)},InitializeReplace:function(n,t,i){this.InitializeAdd(n,i);this.InitializeRemove(t,i)}}};JsTypes.push(System$Collections$Specialized$NotifyCollectionChangedEventArgs);System$ComponentModel$AsyncCompletedEventHandler={fullname:"System.ComponentModel.AsyncCompletedEventHandler",Kind:"Delegate",definition:{ctor:function(n,t){System.MulticastDelegate.ctor.call(this,n,t)}}};JsTypes.push(System$ComponentModel$AsyncCompletedEventHandler);System$ComponentModel$AsyncCompletedEventArgs={fullname:"System.ComponentModel.AsyncCompletedEventArgs",baseTypeName:"System.EventArgs",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i){this._error=null;this._cancelled=!1;this._userState=null;System.EventArgs.ctor.call(this);this._error=n;this._cancelled=t;this._userState=i},RaiseExceptionIfNecessary:function(){if(this._error!=null)throw $CreateException(new System.Reflection.TargetInvocationException.ctor$$Exception(this._error),new Error);else if(this._cancelled)throw $CreateException(new System.InvalidOperationException.ctor$$String("The operation was cancelled"),new Error);},Cancelled$$:"System.Boolean",get_Cancelled:function(){return this._cancelled},Error$$:"System.Exception",get_Error:function(){return this._error},UserState$$:"System.Object",get_UserState:function(){return this._userState}}};JsTypes.push(System$ComponentModel$AsyncCompletedEventArgs);System$ComponentModel$CancelEventHandler={fullname:"System.ComponentModel.CancelEventHandler",Kind:"Delegate",definition:{ctor:function(n,t){System.MulticastDelegate.ctor.call(this,n,t)}}};JsTypes.push(System$ComponentModel$CancelEventHandler);System$ComponentModel$CancelEventArgs={fullname:"System.ComponentModel.CancelEventArgs",baseTypeName:"System.EventArgs",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this._Cancel=!1;System.EventArgs.ctor.call(this);this._Cancel=!1},ctor$$Boolean:function(n){this._Cancel=!1;System.EventArgs.ctor.call(this);this._Cancel=n},Cancel$$:"System.Boolean",get_Cancel:function(){return this._Cancel},set_Cancel:function(n){this._Cancel=n}}};JsTypes.push(System$ComponentModel$CancelEventArgs);System$ComponentModel$INotifyPropertyChanging={fullname:"System.ComponentModel.INotifyPropertyChanging",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$ComponentModel$INotifyPropertyChanging);System$ComponentModel$INotifyPropertyChanged={fullname:"System.ComponentModel.INotifyPropertyChanged",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$ComponentModel$INotifyPropertyChanged);System$ComponentModel$PropertyChangedEventHandler={fullname:"System.ComponentModel.PropertyChangedEventHandler",Kind:"Delegate",definition:{ctor:function(n,t){System.MulticastDelegate.ctor.call(this,n,t)}}};JsTypes.push(System$ComponentModel$PropertyChangedEventHandler);System$ComponentModel$PropertyChangedEventArgs={fullname:"System.ComponentModel.PropertyChangedEventArgs",baseTypeName:"System.EventArgs",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n){this._PropertyName=null;System.EventArgs.ctor.call(this);this._PropertyName=n},PropertyName$$:"System.String",get_PropertyName:function(){return this._PropertyName}}};JsTypes.push(System$ComponentModel$PropertyChangedEventArgs);System$DateTime={fullname:"System.DateTime",baseTypeName:"Date",staticDefinition:{cctor:function(){System.DateTime.MinValue=null;System.DateTime.MaxValue=null;System.DateTime.MinValue=new Date(0);System.DateTime.MinValue.setUTCFullYear(1,0,1);System.DateTime.MaxValue=new Date(0);System.DateTime.MaxValue.setUTCFullYear(9999,11,31)},Parse$$String:function(n){return new Date(Date.parse(n))},DaysInMonth:function(n,t){return 32-new Date(n,t-1,32).getDate()},Compare:function(n,t){return n.valueOf()-t.valueOf()},op_Equality:function(n,t){return System.DateTime.Compare(n,t)==0},op_Inequality:function(n,t){return System.DateTime.Compare(n,t)!=0},op_GreaterThan$$DateTime$$DateTime:function(n,t){return System.DateTime.Compare(n,t)>0},op_LessThan$$DateTime$$DateTime:function(n,t){return System.DateTime.Compare(n,t)<0},op_LessThanOrEqual$$DateTime$$DateTime:function(n,t){return System.DateTime.Compare(n,t)<=0},op_GreaterThanOrEqual$$DateTime$$DateTime:function(n,t){return System.DateTime.Compare(n,t)>=0},op_Subtraction$$DateTime$$DateTime:function(n,t){return System.TimeSpan.FromMilliseconds(n.valueOf()-t.valueOf())},op_Subtraction$$DateTime$$TimeSpan:function(n,t){return new Date(n.valueOf()-Cast(t.get_TotalMilliseconds(),System.Int64.ctor))},op_Addition$$DateTime$$DateTime:function(n,t){return System.TimeSpan.FromMilliseconds(n.valueOf()+t.valueOf())},op_Addition$$DateTime$$TimeSpan:function(n,t){return new Date(n.valueOf()+Cast(t.get_TotalMilliseconds(),System.Int64.ctor))},CompareJsDates:function(n,t){return n==t?0:n==null?1:t==null?-1:n.valueOf()-t.valueOf()},Now$$:"SharpKit.JavaScript.Private.JsImplDateTime",get_Now:function(){return new Date},UtcNow$$:"SharpKit.JavaScript.Private.JsImplDateTime",get_UtcNow:function(){return System.DateTime.get_Now()},Today$$:"SharpKit.JavaScript.Private.JsImplDateTime",get_Today:function(){return Date.get_Today()}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){return System.DateTime.MinValue},ctor$$Int64:function(){throw $CreateException(new System.NotSupportedException.ctor$$String("Ticks are not available due to JavaScript number limitation"),new Error);},ctor$$Int32$$Int32$$Int32:function(n,t,i){var r=new Date;return r.set_Year(n),r.set_Month(t),r.set_Day(i),r},ctor$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32:function(n,t,i,r,u,f){return new Date(n,t-1,i,r,u,f)},ctor$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$DateTimeKind:function(n,t,i,r,u,f,e){var o;return o=e==1?new Date(Date.UTC(n,t-1,i,r,u,f)):new Date(n,t-1,i,r,u,f),o._Kind=e,o},Equals$$Object:function(n){return n==null?!1:n.valueOf()==this.valueOf()},GetHashCode:function(){return this.valueOf()}}};JsTypes.push(System$DateTime);System$DateTimeKind={fullname:"System.DateTimeKind",staticDefinition:{Unspecified:0,Utc:1,Local:2},Kind:"Enum"};JsTypes.push(System$DateTimeKind);System$Delegate={fullname:"System.Delegate",baseTypeName:"System.Object",staticDefinition:{Combine$$Delegate$Array:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Combine$$Delegate$$Delegate:function(n,t){return CombineDelegates(n,t)},Remove:function(n,t){return RemoveDelegate(n,t)}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)},DynamicInvoke:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);}}};JsTypes.push(System$Delegate);System$MulticastDelegate={fullname:"System.MulticastDelegate",baseTypeName:"System.Delegate",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Delegate.ctor.call(this)},GetInvocationList:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Equals$$MulticastDelegate:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Invoke:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);}}};JsTypes.push(System$MulticastDelegate);System$Action={fullname:"System.Action",Kind:"Delegate",definition:{ctor:function(n,t){System.MulticastDelegate.ctor.call(this,n,t)}}};JsTypes.push(System$Action);System$Action$1={fullname:"System.Action$1",Kind:"Delegate",definition:{ctor:function(n,t,i){this.T=n;System.MulticastDelegate.ctor.call(this,t,i)}}};JsTypes.push(System$Action$1);System$Action$2={fullname:"System.Action$2",Kind:"Delegate",definition:{ctor:function(n,t,i,r){this.T1=n;this.T2=t;System.MulticastDelegate.ctor.call(this,i,r)}}};JsTypes.push(System$Action$2);System$Action$3={fullname:"System.Action$3",Kind:"Delegate",definition:{ctor:function(n,t,i,r,u){this.T1=n;this.T2=t;this.T3=i;System.MulticastDelegate.ctor.call(this,r,u)}}};JsTypes.push(System$Action$3);System$Func$1={fullname:"System.Func$1",Kind:"Delegate",definition:{ctor:function(n,t,i){this.TResult=n;System.MulticastDelegate.ctor.call(this,t,i)}}};JsTypes.push(System$Func$1);System$Func$2={fullname:"System.Func$2",Kind:"Delegate",definition:{ctor:function(n,t,i,r){this.T=n;this.TResult=t;System.MulticastDelegate.ctor.call(this,i,r)}}};JsTypes.push(System$Func$2);System$Func$3={fullname:"System.Func$3",Kind:"Delegate",definition:{ctor:function(n,t,i,r,u){this.T1=n;this.T2=t;this.TResult=i;System.MulticastDelegate.ctor.call(this,r,u)}}};JsTypes.push(System$Func$3);System$Func$4={fullname:"System.Func$4",Kind:"Delegate",definition:{ctor:function(n,t,i,r,u,f){this.T1=n;this.T2=t;this.T3=i;this.TResult=r;System.MulticastDelegate.ctor.call(this,u,f)}}};JsTypes.push(System$Func$4);System$EventHandler={fullname:"System.EventHandler",Kind:"Delegate",definition:{ctor:function(n,t){System.MulticastDelegate.ctor.call(this,n,t)}}};JsTypes.push(System$EventHandler);System$EventHandler$1={fullname:"System.EventHandler$1",Kind:"Delegate",definition:{ctor:function(n,t,i){this.TEventArgs=n;System.MulticastDelegate.ctor.call(this,t,i)}}};JsTypes.push(System$EventHandler$1);System$Predicate$1={fullname:"System.Predicate$1",Kind:"Delegate",definition:{ctor:function(n,t,i){this.T=n;System.MulticastDelegate.ctor.call(this,t,i)}}};JsTypes.push(System$Predicate$1);System$Enum={fullname:"System.Enum",baseTypeName:"System.Object",staticDefinition:{GetName:function(n,t){var r,i;if(n==null||t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("enumType"),new Error);r=n._JsType;for(i in r.staticDefinition)if(i==t)return i;throw $CreateException(new System.ArgumentException.ctor$$String("value"),new Error);},GetNames:function(n){var i,t,r;if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("enumType"),new Error);i=n._JsType;t=[];for(r in i.staticDefinition)t.push(r);return t},GetValues:function(n){var t,i,r;if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("enumType"),new Error);t=n._JsType;i=[];for(r in t.staticDefinition)i.push(t.staticDefinition[r]);return i},Parse$$Type$$String:function(n,t){return System.Enum.Parse$$Type$$String$$Boolean(n,t,!1)},Parse$$Type$$String$$Boolean:function(n,t,i){var u,r;if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("enumType"),new Error);if(t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("value"),new Error);if(t.trim()==System.String.Empty)throw $CreateException(new System.ArgumentException.ctor$$String("value is either an empty string or only contains white space."),new Error);u=n._JsType;for(r in u.staticDefinition)if(i?r.toUpperCase()==t.toUpperCase():r==t)return u.staticDefinition[r];throw $CreateException(new System.ArgumentException.ctor$$String("value is a name, but not one of the named constants defined for the enumeration."),new Error);}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Enum);System$Environment={fullname:"System.Environment",baseTypeName:"System.Object",staticDefinition:{GetResourceString:function(n){return n},TickCount$$:"System.Int32",get_TickCount:function(){return(new Date).valueOf()}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Environment);System$EventArgs={fullname:"System.EventArgs",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$EventArgs);System$Exception={fullname:"System.Exception",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor$$String$$Exception:function(n,t){this._InnerException=null;this._Message=null;System.Object.ctor.call(this);this._Message=n;this._InnerException=t},ctor$$String:function(n){this._InnerException=null;this._Message=null;System.Object.ctor.call(this);this._Message=n},ctor:function(){this._InnerException=null;this._Message=null;System.Object.ctor.call(this)},InnerException$$:"System.Exception",get_InnerException:function(){return this._InnerException},Message$$:"System.String",get_Message:function(){return this._Message},toString:function(){var n=this.get_InnerException();return n==null?this.get_Message():this.get_Message()+", "+this.get_InnerException()},SetErrorCode:function(){}}};JsTypes.push(System$Exception);System$NotImplementedException={fullname:"System.NotImplementedException",baseTypeName:"System.Exception",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Exception.ctor$$String.call(this,"NotImplementedException")},ctor$$String:function(n){System.Exception.ctor$$String.call(this,"NotImplementedException: "+n)}}};JsTypes.push(System$NotImplementedException);System$SystemException={fullname:"System.SystemException",baseTypeName:"System.Exception",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Exception.ctor$$String.call(this,System.Environment.GetResourceString("Arg_SystemException"));this.SetErrorCode(-2146233087)},ctor$$String:function(n){System.Exception.ctor$$String.call(this,n);this.SetErrorCode(-2146233087)},ctor$$String$$Exception:function(n,t){System.Exception.ctor$$String$$Exception.call(this,n,t);this.SetErrorCode(-2146233087)}}};JsTypes.push(System$SystemException);System$ArgumentException={fullname:"System.ArgumentException",baseTypeName:"System.SystemException",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this.m_paramName=null;System.SystemException.ctor$$String.call(this,System.Environment.GetResourceString("Arg_ArgumentException"));this.SetErrorCode(-2147024809)},ctor$$String:function(n){this.m_paramName=null;System.SystemException.ctor$$String.call(this,n);this.SetErrorCode(-2147024809)},ctor$$String$$Exception:function(n,t){this.m_paramName=null;System.SystemException.ctor$$String$$Exception.call(this,n,t)},ctor$$String$$String:function(n,t){this.m_paramName=null;System.SystemException.ctor$$String.call(this,n);this.m_paramName=t;this.SetErrorCode(-2147024809)},ctor$$String$$String$$Exception:function(n,t,i){this.m_paramName=null;System.SystemException.ctor$$String$$Exception.call(this,n,i);this.m_paramName=t;this.SetErrorCode(-2147024809)},ParamName$$:"System.String",get_ParamName:function(){return this.m_paramName}}};JsTypes.push(System$ArgumentException);System$NullReferenceException={fullname:"System.NullReferenceException",baseTypeName:"System.SystemException",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.SystemException.ctor$$String.call(this,"Object reference not set to an instance of object")},ctor$$String:function(n){System.SystemException.ctor$$String.call(this,n)}}};JsTypes.push(System$NullReferenceException);System$NotSupportedException={fullname:"System.NotSupportedException",baseTypeName:"System.SystemException",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.SystemException.ctor$$String.call(this,"Arg_NotSupportedException")},ctor$$String:function(n){System.SystemException.ctor$$String.call(this,n)},ctor$$String$$Exception:function(n,t){System.SystemException.ctor$$String$$Exception.call(this,n,t)}}};JsTypes.push(System$NotSupportedException);System$ArgumentOutOfRangeException={fullname:"System.ArgumentOutOfRangeException",baseTypeName:"System.ArgumentException",staticDefinition:{cctor:function(){System.ArgumentOutOfRangeException._rangeMessage=null}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this.m_actualValue=null;System.ArgumentException.ctor$$String.call(this,"Arg_ArgumentOutOfRangeException");this.SetErrorCode(-2146233086)},ctor$$String:function(n){this.m_actualValue=null;System.ArgumentException.ctor$$String$$String.call(this,"Arg_ArgumentOutOfRangeException",n);this.SetErrorCode(-2146233086)},ctor$$String$$Exception:function(n,t){this.m_actualValue=null;System.ArgumentException.ctor$$String$$Exception.call(this,n,t);this.SetErrorCode(-2146233086)},ctor$$String$$String:function(n,t){this.m_actualValue=null;System.ArgumentException.ctor$$String$$String.call(this,t,n);this.SetErrorCode(-2146233086)},ctor$$String$$Object$$String:function(n,t,i){this.m_actualValue=null;System.ArgumentException.ctor$$String$$String.call(this,i,n);this.m_actualValue=t;this.SetErrorCode(-2146233086)},ActualValue$$:"System.Object",get_ActualValue:function(){return this.m_actualValue},RangeMessage$$:"System.String",get_RangeMessage:function(){return System.ArgumentOutOfRangeException._rangeMessage==null&&(System.ArgumentOutOfRangeException._rangeMessage="Arg_ArgumentOutOfRangeException"),System.ArgumentOutOfRangeException._rangeMessage}}};JsTypes.push(System$ArgumentOutOfRangeException);System$Guid={fullname:"System.Guid",baseTypeName:"System.ValueType",staticDefinition:{cctor:function(){System.Guid.Empty=new System.Guid.ctor;System.Guid._random=new System.Random.ctor;System.Guid._hexChars="0123456789abcdef"},NewGuid:function(){for(var n,i=new Uint8Array(16),t=0;t<16;t++)i[t]=System.Guid._random.Next$$Int32(256);return n=new System.Guid.ctor$$Byte$Array(i),n._d=n._d&63|128,n._c=n._c&4095|16384,n},AppendByte:function(n,t){n.Append$$String(System.Guid.ToHex(t>>4&15));n.Append$$String(System.Guid.ToHex(t&15))},AppendInt:function(n,t){n.Append$$String(System.Guid.ToHex(t>>28&15));n.Append$$String(System.Guid.ToHex(t>>24&15));n.Append$$String(System.Guid.ToHex(t>>20&15));n.Append$$String(System.Guid.ToHex(t>>16&15));n.Append$$String(System.Guid.ToHex(t>>12&15));n.Append$$String(System.Guid.ToHex(t>>8&15));n.Append$$String(System.Guid.ToHex(t>>4&15));n.Append$$String(System.Guid.ToHex(t&15))},AppendShort:function(n,t){n.Append$$String(System.Guid.ToHex(t>>12&15));n.Append$$String(System.Guid.ToHex(t>>8&15));n.Append$$String(System.Guid.ToHex(t>>4&15));n.Append$$String(System.Guid.ToHex(t&15))},CheckArray:function(n,t){System.Guid.CheckNull(n);System.Guid.CheckLength(n,t)},CheckLength:function(n,t){if(n.length!=t)throw $CreateException(new System.ArgumentException.ctor$$String(System.String.Format$$String$$Object("Array should be exactly {0} bytes long.",t)),new Error);},CheckNull:function(n){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("Value cannot be null."),new Error);},Compare:function(n,t){return n>=t?1:-1},CreateFormatException:function(n){return new System.FormatException.ctor$$String(System.String.Format$$String$$Object("Invalid Guid format: {0}",n))},ToHex:function(n){return System.Guid._hexChars.substr(n,1)},op_Equality:function(n,t){return n.Equals$$Guid(t)},op_Inequality:function(n,t){return!n.Equals$$Guid(t)}},assemblyName:"SharpKit.JsClr",Kind:"Struct",definition:{ctor$$Byte$Array:function(n){this._i=0;this._h=0;this._k=0;this._j=0;this._g=0;this._c=0;this._b=0;this._a=0;this._f=0;this._e=0;this._d=0;System.ValueType.ctor.call(this);this._a=n[0]|n[1]<<8|n[2]<<16|n[3]<<24;this._b=n[4]|n[5]<<8;this._c=n[6]|n[7]<<8;this._d=n[8];this._e=n[9];this._f=n[10];this._g=n[11];this._h=n[12];this._i=n[13];this._j=n[14];this._k=n[15]},ctor$$UInt32$$UInt16$$UInt16$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte:function(n,t,i,r,u,f,e,o,s,h,c){this._i=0;this._h=0;this._k=0;this._j=0;this._g=0;this._c=0;this._b=0;this._a=0;this._f=0;this._e=0;this._d=0;System.Guid.ctor$$Int32$$Int16$$Int16$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte.call(this,n,t,i,r,u,f,e,o,s,h,c)},ctor$$Int32$$Int16$$Int16$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte:function(n,t,i,r,u,f,e,o,s,h,c){this._i=0;this._h=0;this._k=0;this._j=0;this._g=0;this._c=0;this._b=0;this._a=0;this._f=0;this._e=0;this._d=0;System.ValueType.ctor.call(this);this._a=n;this._b=t;this._c=i;this._d=r;this._e=u;this._f=f;this._g=e;this._h=o;this._i=s;this._j=h;this._k=c},BaseToString:function(n,t,i){var r=new System.Text.StringBuilder.ctor$$Int32(40);return t?r.Append$$Char("("):i&&r.Append$$Char("{"),System.Guid.AppendInt(r,this._a),n&&r.Append$$Char("-"),System.Guid.AppendShort(r,this._b),n&&r.Append$$Char("-"),System.Guid.AppendShort(r,this._c),n&&r.Append$$Char("-"),System.Guid.AppendByte(r,this._d),System.Guid.AppendByte(r,this._e),n&&r.Append$$Char("-"),System.Guid.AppendByte(r,this._f),System.Guid.AppendByte(r,this._g),System.Guid.AppendByte(r,this._h),System.Guid.AppendByte(r,this._i),System.Guid.AppendByte(r,this._j),System.Guid.AppendByte(r,this._k),t?r.Append$$Char(")"):i&&r.Append$$Char("}"),r.toString()},CompareTo$$Guid:function(n){return this._a!=n._a?System.Guid.Compare(this._a,n._a):this._b!=n._b?System.Guid.Compare(this._b,n._b):this._c!=n._c?System.Guid.Compare(this._c,n._c):this._d!=n._d?System.Guid.Compare(this._d,n._d):this._e!=n._e?System.Guid.Compare(this._e,n._e):this._f!=n._f?System.Guid.Compare(this._f,n._f):this._g!=n._g?System.Guid.Compare(this._g,n._g):this._h!=n._h?System.Guid.Compare(this._h,n._h):this._i!=n._i?System.Guid.Compare(this._i,n._i):this._j!=n._j?System.Guid.Compare(this._j,n._j):this._k!=n._k?System.Guid.Compare(this._k,n._k):0},CompareTo$$Object:function(n){if(n==null)return 1;if(!Is(n,System.Guid.ctor))throw $CreateException(new System.ArgumentException.ctor$$String$$String("value","Argument of System.Guid.CompareTo should be a Guid."),new Error);return this.CompareTo$$Guid(Cast(n,System.Guid.ctor))},Equals$$Object:function(n){return Is(n,System.Guid.ctor)&&this.CompareTo$$Guid(Cast(n,System.Guid.ctor))==0},Equals$$Guid:function(n){return this.CompareTo$$Guid(n)==0},GetHashCode:function(){var n=this._a;return n^=this._b<<16|this._c,n^=this._d<<24,n^=this._e<<16,n^=this._f<<8,n^=this._g,n^=this._h<<24,n^=this._i<<16,n^=this._j<<8,n^this._k},toString:function(){return this.BaseToString(!0,!1,!1)},ToString$$String:function(n){var i=!0,r=!1,u=!1,t;if(n!=null)if(t=n.ToLowerInvariant(),t=="b")u=!0;else if(t=="p")r=!0;else if(t=="n")i=!1;else if(t!="d"&&t!=System.String.Empty)throw $CreateException(new System.FormatException.ctor$$String(\'Argument to Guid.ToString(string format) should be "b", "B", "d", "D", "n", "N", "p" or "P"\'),new Error);return this.BaseToString(i,r,u)},ToString$$String$$IFormatProvider:function(n){return this.ToString$$String(n)},ctor:function(){this._i=0;this._h=0;this._k=0;this._j=0;this._g=0;this._c=0;this._b=0;this._a=0;this._f=0;this._e=0;this._d=0;System.ValueType.ctor.call(this)}}};JsTypes.push(System$Guid);System$ICloneable={fullname:"System.ICloneable",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$ICloneable);System$IDisposable={fullname:"System.IDisposable",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$IDisposable);System$Int64={fullname:"System.Int64",baseTypeName:"System.Object",staticDefinition:{op_Implicit$$UInt32:function(n){return new System.Int64.ctor$$Object(n)},op_Explicit:function(n){return new System.Int64.ctor$$Object(n)},op_Implicit$$Int64:function(n){return n._value}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this._value=null;System.Int64.ctor$$Object.call(this,0)},ctor$$Object:function(n){this._value=null;System.Object.ctor.call(this);this._value=this.Convert(n)},Convert:function(n){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor,new Error);var i=new RegExp("^-?([0-9]+)[^0-9]"),t=i.exec(n.toString());if(t==null)throw $CreateException(new System.FormatException.ctor,new Error);return new Number(t[1])}}};JsTypes.push(System$Int64);System$IComparable={fullname:"System.IComparable",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$IComparable);System$IComparable$1={fullname:"System.IComparable$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$IComparable$1);System$IEquatable$1={fullname:"System.IEquatable$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$IEquatable$1);System$IFormattable={fullname:"System.IFormattable",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$IFormattable);Date.prototype.CompareTo=function(n){return this.valueOf()-n.valueOf()};Date.prototype.get_Year=function(){return this._Kind==1?this.getUTCFullYear():this.getFullYear()};Date.prototype.set_Year=function(n){this._Kind==1?this.setUTCFullYear(n):this.setFullYear(n)};Date.prototype.get_Month=function(){return this._Kind==1?this.getUTCMonth()+1:this.getMonth()+1};Date.prototype.set_Month=function(n){this._Kind==1?this.setUTCMonth(n-1):this.setMonth(n-1)};Date.prototype.get_Day=function(){return this._Kind==1?this.getUTCDate():this.getDate()};Date.prototype.set_Day=function(n){this._Kind==1?this.setUTCDate(n):this.setDate(n)};Date.prototype.get_Hour=function(){return this._Kind==1?this.getUTCHours():this.getHours()};Date.prototype.set_Hour=function(n){this._Kind==1?this.setUTCHours(n):this.setHours(n)};Date.prototype.get_Minute=function(){return this._Kind==1?this.getUTCMinutes():this.getMinutes()};Date.prototype.set_Minute=function(n){this._Kind==1?this.setUTCMinutes(n):this.setMinutes(n)};Date.prototype.get_Second=function(){return this._Kind==1?this.getUTCSeconds():this.getSeconds()};Date.prototype.set_Second=function(n){this._Kind==1?this.setUTCSeconds(n):this.setSeconds(n)};Date.prototype.get_Millisecond=function(){return this._Kind==1?this.getUTCMilliseconds():this.getMilliseconds()};Date.prototype.set_Millisecond=function(n){this._Kind==1?this.setUTCMilliseconds(n):this.setMilliseconds(n)};Date.prototype.get_Ticks=function(){return this._Kind==1?this.getUTCMilliseconds()*1e4:this.getMilliseconds()*1e4};Date.prototype.set_Ticks=function(n){var t=n/1e4;this._Kind==1?this.setUTCMilliseconds(t):this.setMilliseconds(t)};Date.prototype.get_DayOfWeek=function(){return this.getDay()};Date.prototype.ToLocalTime=function(){if(this._Kind!=1)return this;var n=this.Clone();return n._Kind=2,n};Date.prototype.ToUniversalTime=function(){if(this._Kind==1)return this;var n=this.Clone();return n._Kind=1,n};Date.get_Today=function(){return(new Date).RemoveTime()};Date.prototype.Subtract$$DateTime=function(n){var t=this.valueOf()-n.valueOf();return new System.TimeSpan.ctor$$Int64(t*1e4)};Date.prototype.Subtract$$TimeSpan=function(n){var t=this.Clone();return t.setMilliseconds(this.getMilliseconds()+n.get_TotalMilliseconds()),t};Date.prototype.ToString$$String=function(n){return n=n.Replace$$String$$String("yyyy",this.get_Year().ToString$$String("0000")),n=n.Replace$$String$$String("yy",this.get_Year().ToString$$String("00")),n=n.Replace$$String$$String("y",this.get_Year().toString()),n=n.Replace$$String$$String("MM",this.get_Month().ToString$$String("00")),n=n.Replace$$String$$String("M",this.get_Month().toString()),n=n.Replace$$String$$String("dd",this.get_Day().ToString$$String("00")),n=n.Replace$$String$$String("d",this.get_Day().toString()),n=n.Replace$$String$$String("HH",this.get_Hour().ToString$$String("00")),n=n.Replace$$String$$String("H",this.get_Hour().toString()),n=n.Replace$$String$$String("mm",this.get_Minute().ToString$$String("00")),n=n.Replace$$String$$String("m",this.get_Minute().toString()),n=n.Replace$$String$$String("ss",this.get_Second().ToString$$String("00")),n.Replace$$String$$String("s",this.get_Second().toString())};Date.prototype.Clone=function(){var n=new Date(this.valueOf());return n._Kind=this._Kind,n};Date.prototype.Clone2=function(n){var t=new Date(n);return t._Kind=this._Kind,t};Date.prototype.AddMilliseconds=function(n){return this.Clone2(this.valueOf()+n)};Date.prototype.AddSeconds=function(n){var t=this.valueOf()+n*1e3;return this.Clone2(t)};Date.prototype.AddMinutes=function(n){var t=this.Clone();return t.setMinutes(t.getMinutes()+n),t};Date.prototype.AddHours=function(n){var t=this.Clone();return t.setHours(t.getHours()+n),t};Date.prototype.AddDays=function(n){var t=this.Clone();return t.setDate(t.getDate()+n),t};Date.prototype.AddMonths=function(n){var t=this.Clone();return t.setMonth(t.getMonth()+n),t};Date.prototype.AddYears=function(n){var t=this.Clone();return t.setMonth(t.getFullYear()+n),t};Date.prototype.RemoveTime=function(){var n=this.Clone();return n.setHours(0,0,0,0),n};Date.prototype.Equals$$Object=function(n){return n==null?!1:n.valueOf()==this.valueOf()};Date.prototype.GetHashCode=function(){return this.valueOf()};Date.prototype.GetType=function(){return Typeof(System.DateTime.ctor)};Date.prototype.get_Kind=function(){return this._Kind==null?2:this._Kind};Number.prototype.CompareTo$$Double=function(n){return this<n?-1:this>n?1:this==n?0:System.Double.IsNaN(this)?System.Double.IsNaN(n)?0:-1:1};Number.prototype.CompareTo$$Int32=function(n){return this<n?-1:this>n?1:0};System$Nullable$1={fullname:"System.Nullable$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t){this.T=n;this.hasValue=!1;this.value=null;System.Object.ctor.call(this);this.value=t;this.hasValue=!0},HasValue$$:"System.Boolean",get_HasValue:function(){return this.hasValue},Value$$:"`0",get_Value:function(){if(!this.get_HasValue())throw $CreateException(new System.InvalidOperationException.ctor$$String("InvalidOperation_NoValue"),new Error);return this.value},GetValueOrDefault:function(){return this.value},GetValueOrDefault$$T:function(n){return this.get_HasValue()?this.value:n},Equals$$Object:function(n){return this.get_HasValue()?n==null?!1:this.value.Equals$$Object(n):n==null},GetHashCode:function(){return this.get_HasValue()?this.value.GetHashCode():0},toString:function(){return this.get_HasValue()?this.value.toString():""}}};JsTypes.push(System$Nullable$1);System$Random={fullname:"System.Random",baseTypeName:"System.Object",staticDefinition:{cctor:function(){System.Random.MBIG=2147483647;System.Random.MSEED=161803398;System.Random.MZ=0}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this.inext=0;this.inextp=0;this.SeedArray=new Int32Array(56);System.Random.ctor$$Int32.call(this,System.Environment.get_TickCount())},ctor$$Int32:function(n){var r,i,u,f,e,t;for(this.inext=0,this.inextp=0,this.SeedArray=new Int32Array(56),System.Object.ctor.call(this),r=161803398-System.Math.Abs$$Int32(n),this.SeedArray[55]=r,i=1,u=1;u<55;u++)f=21*u%55,this.SeedArray[f]=i,i=r-i,i<0&&(i+=2147483647),r=this.SeedArray[f];for(e=1;e<5;e++)for(t=1;t<56;t++)this.SeedArray[t]-=this.SeedArray[1+(t+30)%55],this.SeedArray[t]<0&&(this.SeedArray[t]+=2147483647);this.inext=0;this.inextp=21;n=1},Sample:function(){return this.InternalSample()*46566128752458e-23},InternalSample:function(){var n=this.inext,i=this.inextp,t;return++n>=56&&(n=1),++i>=56&&(i=1),t=this.SeedArray[n]-this.SeedArray[i],t<0&&(t+=2147483647),this.SeedArray[n]=t,this.inext=n,this.inextp=i,t},Next:function(){return this.InternalSample()},GetSampleForLargeRange:function(){var n=this.InternalSample(),i=this.InternalSample()%2==0,t;return i&&(n=-n),t=n,t+=2147483646,t/4294967293},Next$$Int32$$Int32:function(n,t){if(n>t)throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("minValue","Argument_MinMaxValue"),new Error);var i=t-n;return i<=2147483647?this.Sample()*i+n:this.GetSampleForLargeRange()*i+n},Next$$Int32:function(n){if(n<0)throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("maxValue","ArgumentOutOfRange_MustBePositive"),new Error);return this.Sample()*n},NextDouble:function(){return this.Sample()},NextBytes:function(n){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"),new Error);for(var t=0;t<n.length;t++)n[t]=this.InternalSample()%256}}};JsTypes.push(System$Random);System$StringSplitOptions={fullname:"System.StringSplitOptions",staticDefinition:{None:0,RemoveEmptyEntries:1},Kind:"Enum"};JsTypes.push(System$StringSplitOptions);System$Char={fullname:"System.Char",baseTypeName:"System.Object",staticDefinition:{IsWhiteSpace:function(n){return/\\s/.test(n)},IsUpper:function(n){return n.toUpperCase()==n},IsDigit$$Char:function(n){return/[0-9]/.test(n)}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Char);System$CharEnumerator={fullname:"System.CharEnumerator",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerator$1","System.Collections.IEnumerator"],Kind:"Class",definition:{ctor:function(n){this.currentElement="\\0";this.index=0;this.str=null;System.Object.ctor.call(this);this.str=n;this.index=-1},MoveNext:function(){return this.index<this.str.length-1?(this.index++,this.currentElement=this.str.charAt(this.index),!0):(this.index=this.str.length,!1)},Reset:function(){this.currentElement="\\0";this.index=-1},Current$$:"System.Char",get_Current:function(){if(this.index==-1)throw $CreateException(new System.InvalidOperationException.ctor$$String("Enum Not Started"),new Error);if(this.index>=this.str.length)throw $CreateException(new System.InvalidOperationException.ctor$$String("Enum Ended"),new Error);return this.currentElement}}};JsTypes.push(System$CharEnumerator);System$StringComparison={fullname:"System.StringComparison",staticDefinition:{CurrentCulture:0,CurrentCultureIgnoreCase:1,InvariantCulture:2,InvariantCultureIgnoreCase:3,Ordinal:4,OrdinalIgnoreCase:5},Kind:"Enum"};JsTypes.push(System$StringComparison);System$TimeSpan={fullname:"System.TimeSpan",baseTypeName:"System.Object",staticDefinition:{cctor:function(){System.TimeSpan.TicksPerMillisecond=1e4;System.TimeSpan.MillisecondsPerTick=.0001;System.TimeSpan.TicksPerSecond=1e7;System.TimeSpan.SecondsPerTick=1e-7;System.TimeSpan.TicksPerMinute=6e8;System.TimeSpan.MinutesPerTick=166666666666667e-23;System.TimeSpan.TicksPerHour=36e9;System.TimeSpan.HoursPerTick=277777777777778e-25;System.TimeSpan.TicksPerDay=864e9;System.TimeSpan.DaysPerTick=115740740740741e-26;System.TimeSpan.MillisPerSecond=1e3;System.TimeSpan.MillisPerMinute=6e4;System.TimeSpan.MillisPerHour=36e5;System.TimeSpan.MillisPerDay=864e5;System.TimeSpan.MaxSeconds=922337203685;System.TimeSpan.MinSeconds=-922337203685;System.TimeSpan.MaxMilliSeconds=922337203685477;System.TimeSpan.MinMilliSeconds=-922337203685477;System.TimeSpan.TicksPerTenthSecond=1e6;System.TimeSpan.Zero=new System.TimeSpan.ctor$$Int64(0);System.TimeSpan.MaxValue=new System.TimeSpan.ctor$$Int64(9223372036854775807);System.TimeSpan.MinValue=new System.TimeSpan.ctor$$Int64(-9223372036854775808)},Compare:function(n,t){return n.get__ticks()>t.get__ticks()?1:n.get__ticks()<t.get__ticks()?-1:0},FromDays:function(n){return System.TimeSpan.Interval(n,864e5)},Equals$$TimeSpan$$TimeSpan:function(n,t){return n.get__ticks()==t.get__ticks()},FromHours:function(n){return System.TimeSpan.Interval(n,36e5)},Interval:function(n,t){if(System.Double.IsNaN(n))throw $CreateException(new System.ArgumentException.ctor$$String("Arg_CannotBeNaN"),new Error);var r=n*t,i=r+(n>=0?.5:-.5);if(i>922337203685477||i<-922337203685477)throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"),new Error);return new System.TimeSpan.ctor$$Int64(i*1e4)},FromMilliseconds:function(n){var t=new System.TimeSpan.ctor;return t._TotalMilliseconds=n,t},FromMinutes:function(n){return System.TimeSpan.Interval(n,6e4)},FromSeconds:function(n){return System.TimeSpan.Interval(n,1e3)},FromTicks:function(n){return new System.TimeSpan.ctor$$Int64(n)},TimeToTicks:function(n,t,i){var r=n*3600+t*60+i;if(r>922337203685||r<-922337203685)throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null,"Overflow_TimeSpanTooLong"),new Error);return r*1e7},TimeToMs:function(n,t,i){var r=n*3600+t*60+i;if(r>922337203685||r<-922337203685)throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null,"Overflow_TimeSpanTooLong"),new Error);return r*1e3},op_UnaryNegation:function(n){if(n.get__ticks()==System.TimeSpan.MinValue.get__ticks())throw $CreateException(new System.OverflowException.ctor$$String("Overflow_NegateTwosCompNum"),new Error);return new System.TimeSpan.ctor$$Int64(-n.get__ticks())},op_Subtraction:function(n,t){return n.Subtract(t)},op_UnaryPlus:function(n){return n},op_Addition:function(n,t){return n.Add(t)},op_Equality:function(n,t){return n.get__ticks()==t.get__ticks()},op_Inequality:function(n,t){return n.get__ticks()!=t.get__ticks()},op_LessThan:function(n,t){return n.get__ticks()<t.get__ticks()},op_LessThanOrEqual:function(n,t){return n.get__ticks()<=t.get__ticks()},op_GreaterThan:function(n,t){return n.get__ticks()>t.get__ticks()},op_GreaterThanOrEqual:function(n,t){return n.get__ticks()>=t.get__ticks()}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this._TotalMilliseconds=0;System.Object.ctor.call(this)},Ticks$$:"System.Int64",get_Ticks:function(){return this._TotalMilliseconds*1e4},_ticks$$:"System.Int64",get__ticks:function(){return this._TotalMilliseconds*1e4},Days$$:"System.Int32",get_Days:function(){return this.get__ticks()/864e9},Hours$$:"System.Int32",get_Hours:function(){return this.get__ticks()/36e9%24},Milliseconds$$:"System.Int32",get_Milliseconds:function(){return this.get__ticks()/1e4%1e3},Minutes$$:"System.Int32",get_Minutes:function(){return this.get__ticks()/6e8%60},Seconds$$:"System.Int32",get_Seconds:function(){return this.get__ticks()/1e7%60},TotalDays$$:"System.Double",get_TotalDays:function(){return this._TotalMilliseconds/864e5},TotalHours$$:"System.Double",get_TotalHours:function(){return this._TotalMilliseconds/36e5},TotalMilliseconds$$:"System.Double",get_TotalMilliseconds:function(){return this._TotalMilliseconds},TotalMinutes$$:"System.Double",get_TotalMinutes:function(){return this._TotalMilliseconds/6e4},TotalSeconds$$:"System.Double",get_TotalSeconds:function(){return this._TotalMilliseconds/1e3},ctor$$Int64:function(n){this._TotalMilliseconds=0;System.Object.ctor.call(this);this._TotalMilliseconds=n/1e4},ctor$$Int32$$Int32$$Int32:function(n,t,i){this._TotalMilliseconds=0;System.Object.ctor.call(this);this._TotalMilliseconds=System.TimeSpan.TimeToMs(n,t,i)},ctor$$Int32$$Int32$$Int32$$Int32:function(n,t,i,r){this._TotalMilliseconds=0;System.TimeSpan.ctor$$Int32$$Int32$$Int32$$Int32$$Int32.call(this,n,t,i,r,0)},ctor$$Int32$$Int32$$Int32$$Int32$$Int32:function(n,t,i,r,u){this._TotalMilliseconds=0;System.Object.ctor.call(this);var f=(n*86400+t*3600+i*60+r)*1e3+u;if(f>922337203685477||f<-922337203685477)throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null,"Overflow_TimeSpanTooLong"),new Error);this._TotalMilliseconds=f},Add:function(n){var t=this._TotalMilliseconds+n._TotalMilliseconds;return System.TimeSpan.FromMilliseconds(t)},CompareTo$$Object:function(n){if(n==null)return 1;if(!Is(n,System.TimeSpan.ctor))throw $CreateException(new System.ArgumentException.ctor$$String("Arg_MustBeTimeSpan"),new Error);var t=Cast(n,System.TimeSpan.ctor).get__ticks();return this.get__ticks()>t?1:this.get__ticks()<t?-1:0},CompareTo$$TimeSpan:function(n){var t=n.get__ticks();return this.get__ticks()>t?1:this.get__ticks()<t?-1:0},Duration:function(){if(this.get_Ticks()==System.TimeSpan.MinValue.get_Ticks())throw $CreateException(new System.OverflowException.ctor$$String("Overflow_Duration"),new Error);return new System.TimeSpan.ctor$$Int64(this.get__ticks()>=0?this.get__ticks():-this.get__ticks())},Equals$$Object:function(n){return Is(n,System.TimeSpan.ctor)&&this.get__ticks()==Cast(n,System.TimeSpan.ctor).get__ticks()},Equals$$TimeSpan:function(n){return this.get__ticks()==n.get__ticks()},GetHashCode:function(){return this.get__ticks()^this.get__ticks()>>32},Negate:function(){if(this.get_Ticks()==System.TimeSpan.MinValue.get_Ticks())throw $CreateException(new System.OverflowException.ctor$$String("Overflow_NegateTwosCompNum"),new Error);return new System.TimeSpan.ctor$$Int64(-this.get__ticks())},Subtract:function(n){var t=this.get__ticks()-n.get__ticks();if(this.get__ticks()>>63!=n.get__ticks()>>63&&this.get__ticks()>>63!=t>>63)throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"),new Error);return new System.TimeSpan.ctor$$Int64(t)}}};JsTypes.push(System$TimeSpan);System$Tuple={fullname:"System.Tuple",baseTypeName:"System.Object",staticDefinition:{Create$1$$T1:function(n,t){return new System.Tuple$1.ctor(n,t)},Create$2$$T1$$T2:function(n,t,i,r){return new System.Tuple$2.ctor(n,t,i,r)},Create$3$$T1$$T2$$T3:function(n,t,i,r,u,f){return new System.Tuple$3.ctor(n,t,i,r,u,f)},Create$4$$T1$$T2$$T3$$T4:function(n,t,i,r,u,f,e,o){return new System.Tuple$4.ctor(n,t,i,r,u,f,e,o)},Create$5$$T1$$T2$$T3$$T4$$T5:function(n,t,i,r,u,f,e,o,s,h){return new System.Tuple$5.ctor(n,t,i,r,u,f,e,o,s,h)},Create$6$$T1$$T2$$T3$$T4$$T5$$T6:function(n,t,i,r,u,f,e,o,s,h,c,l){return new System.Tuple$6.ctor(n,t,i,r,u,f,e,o,s,h,c,l)},Create$7$$T1$$T2$$T3$$T4$$T5$$T6$$T7:function(n,t,i,r,u,f,e,o,s,h,c,l,a,v){return new System.Tuple$7.ctor(n,t,i,r,u,f,e,o,s,h,c,l,a,v)},Create$8$$T1$$T2$$T3$$T4$$T5$$T6$$T7$$T8:function(n,t,i,r,u,f,e,o,s,h,c,l,a,v,y,p){return new System.Tuple$8.ctor(n,t,i,r,u,f,e,System.Tuple$1.ctor,s,h,c,l,a,v,y,new System.Tuple$1.ctor(o,p))}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Tuple);System$Tuple$1={fullname:"System.Tuple$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t){this.T1=n;this._item1=null;System.Object.ctor.call(this);this._item1=t},Item1$$:"`0",get_Item1:function(){return this._item1}}};JsTypes.push(System$Tuple$1);System$Tuple$2={fullname:"System.Tuple$2",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r){this.T1=n;this.T2=t;this._item1=null;this._item2=null;System.Object.ctor.call(this);this._item1=i;this._item2=r},Item1$$:"`0",get_Item1:function(){return this._item1},Item2$$:"`1",get_Item2:function(){return this._item2}}};JsTypes.push(System$Tuple$2);System$Tuple$3={fullname:"System.Tuple$3",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u,f){this.T1=n;this.T2=t;this.T3=i;this._item1=null;this._item2=null;this._item3=null;System.Object.ctor.call(this);this._item1=r;this._item2=u;this._item3=f},Item1$$:"`0",get_Item1:function(){return this._item1},Item2$$:"`1",get_Item2:function(){return this._item2},Item3$$:"`2",get_Item3:function(){return this._item3}}};JsTypes.push(System$Tuple$3);System$Tuple$4={fullname:"System.Tuple$4",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u,f,e,o){this.T1=n;this.T2=t;this.T3=i;this.T4=r;this._item1=null;this._item2=null;this._item3=null;this._item4=null;System.Object.ctor.call(this);this._item1=u;this._item2=f;this._item3=e;this._item4=o},Item1$$:"`0",get_Item1:function(){return this._item1},Item2$$:"`1",get_Item2:function(){return this._item2},Item3$$:"`2",get_Item3:function(){return this._item3},Item4$$:"`3",get_Item4:function(){return this._item4}}};JsTypes.push(System$Tuple$4);System$Tuple$5={fullname:"System.Tuple$5",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u,f,e,o,s,h){this.T1=n;this.T2=t;this.T3=i;this.T4=r;this.T5=u;this._item1=null;this._item2=null;this._item3=null;this._item4=null;this._item5=null;System.Object.ctor.call(this);this._item1=f;this._item2=e;this._item3=o;this._item4=s;this._item5=h},Item1$$:"`0",get_Item1:function(){return this._item1},Item2$$:"`1",get_Item2:function(){return this._item2},Item3$$:"`2",get_Item3:function(){return this._item3},Item4$$:"`3",get_Item4:function(){return this._item4},Item5$$:"`4",get_Item5:function(){return this._item5}}};JsTypes.push(System$Tuple$5);System$Tuple$6={fullname:"System.Tuple$6",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u,f,e,o,s,h,c,l){this.T1=n;this.T2=t;this.T3=i;this.T4=r;this.T5=u;this.T6=f;this._item1=null;this._item2=null;this._item3=null;this._item4=null;this._item5=null;this._item6=null;System.Object.ctor.call(this);this._item1=e;this._item2=o;this._item3=s;this._item4=h;this._item5=c;this._item6=l},Item1$$:"`0",get_Item1:function(){return this._item1},Item2$$:"`1",get_Item2:function(){return this._item2},Item3$$:"`2",get_Item3:function(){return this._item3},Item4$$:"`3",get_Item4:function(){return this._item4},Item5$$:"`4",get_Item5:function(){return this._item5},Item6$$:"`5",get_Item6:function(){return this._item6}}};JsTypes.push(System$Tuple$6);System$Tuple$7={fullname:"System.Tuple$7",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u,f,e,o,s,h,c,l,a,v){this.T1=n;this.T2=t;this.T3=i;this.T4=r;this.T5=u;this.T6=f;this.T7=e;this._item1=null;this._item2=null;this._item3=null;this._item4=null;this._item5=null;this._item6=null;this._item7=null;System.Object.ctor.call(this);this._item1=o;this._item2=s;this._item3=h;this._item4=c;this._item5=l;this._item6=a;this._item7=v},Item1$$:"`0",get_Item1:function(){return this._item1},Item2$$:"`1",get_Item2:function(){return this._item2},Item3$$:"`2",get_Item3:function(){return this._item3},Item4$$:"`3",get_Item4:function(){return this._item4},Item5$$:"`4",get_Item5:function(){return this._item5},Item6$$:"`5",get_Item6:function(){return this._item6},Item7$$:"`6",get_Item7:function(){return this._item7}}};JsTypes.push(System$Tuple$7);System$UInt32={fullname:"System.UInt32",baseTypeName:"System.Object",staticDefinition:{op_Implicit$$UInt32:function(n){return n._value},op_Explicit:function(n){return new System.UInt32.ctor$$Object(n)}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this._value=null;System.UInt32.ctor$$Object.call(this,0)},ctor$$Object:function(n){this._value=null;System.Object.ctor.call(this);this._value=this.Convert(n)},Convert:function(n){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor,new Error);var i=new RegExp("^-?([0-9]+)[^0-9]"),t=i.exec(n.toString());if(t==null)throw $CreateException(new System.FormatException.ctor,new Error);return new Number(t[1])}}};JsTypes.push(System$UInt32);System$Uri={fullname:"System.Uri",baseTypeName:"System.Object",staticDefinition:{op_Equality:function(n,t){return n==t?!0:n==null?!1:t==null?!1:n._OriginalString==t._OriginalString},op_Inequality:function(n,t){return!System.Uri.op_Equality(n,t)}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this._OriginalString=null;this._Fragment=null;this._Query=null;System.Object.ctor.call(this);this._OriginalString=null},ctor$$String:function(n){this._OriginalString=null;this._Fragment=null;this._Query=null;System.Object.ctor.call(this);this._OriginalString=n},OriginalString$$:"System.String",get_OriginalString:function(){return this._OriginalString},AbsoluteUri$$:"System.String",get_AbsoluteUri:function(){return this._OriginalString},toString:function(){return this._OriginalString},Equals$$Object:function(n){return System.Uri.op_Equality(this,Cast(n,System.Uri.ctor))},GetHashCode:function(){return System.Object.commonPrototype.GetHashCode.call(this)},Fragment$$:"System.String",get_Fragment:function(){if(this._Fragment==null){var n=this._OriginalString.indexOf("#");this._Fragment=n==-1?"":this._OriginalString.substr(n)}return this._Fragment},Query$$:"System.String",get_Query:function(){var n,t;return this._Query==null&&(n=this._OriginalString.indexOf("?"),n==-1?this._Query="":(t=this._OriginalString.indexOf("#"),this._Query=t==-1?this._OriginalString.substr(n):this._OriginalString.substr(n,t-n))),this._Query}}};JsTypes.push(System$Uri);System$ValueType={fullname:"System.ValueType",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$ValueType);SharpKit$Html4$HtmlDomEventHandler={fullname:"SharpKit.Html4.HtmlDomEventHandler",Kind:"Delegate",definition:{ctor:function(n,t){System.MulticastDelegate.ctor.call(this,n,t)}}};JsTypes.push(SharpKit$Html4$HtmlDomEventHandler);JsRuntime=function(){};JsRuntime.Start=function(){Compile()};var isIE=navigator.userAgent.toLowerCase().indexOf("msie")>-1,isMoz=document.implementation&&document.implementation.createDocument,isWebkit=navigator.userAgent.indexOf("WebKit")>-1;isMoz||(HTMLImageElement=null,HTMLInputElement=null);String.Format=function(){return String.format.apply(String,arguments)};String.prototype.startsWith=function(n){return this.indexOf(n)==0};String.prototype.endsWith=function(n){return this.substr(this.length-n.length,n.length)==n};Object.ctor=Object;Array.ctor=Array;Date.ctor=Date;Function.ctor=Function;typeof ActiveXObject!="undefined"&&(ActiveXObject.ctor$$String=ActiveXObject);Number.prototype.get_Value=function(){return this};Number.prototype.ToString$$String=function(n){for(var r,t=this.toString(),i=0;i<n.length;i++)if(r=n.charAt(i),r=="0")t.length<i+1&&(t="0"+t);else throw new Error("not implemented");return t};ENABLE_PROFILER=typeof appConfig=="object"?appConfig.enableProfiler:!1;ENABLE_PROFILING=typeof appConfig=="object"?appConfig.enableProfiling:!1;ENABLE_PROFILER&&BeforeCompilation(function(){Profiler.Initialize()});envDebugFunction=typeof Debug!="undefined"&&Debug!=null&&Debug.writeln||typeof console!="undefined"&&console!=null&&console.log||function(){};typeof Debug!="undefined"&&(Debug={writeln:envDebugFunction});Array.parse=function(n){return eval("("+n+")")};JsTypes.push({fullname:"System.Object",definition:{ctor:function(){},toString:function(){return"{"+this.constructor._type.fullname+"}"},construct:function(n){n.baseType.ctor.apply(this,arguments)},GetType:function(){return System.Type._TypeOf(this.constructor._type)},getType:function(){return this.constructor._type},getTypeName:function(){return this.constructor._type.name},base:function(){return arguments.callee.caller._type.baseType.ctor.prototype[arguments.callee.caller._name].apply(this,arguments)},callBase:function(n){return arguments.callee.caller._type.baseType.ctor.prototype[n].apply(this,Arguments.from(arguments,1))}},staticDefinition:{Equals$$Object$$Object:function(n,t){return n==t},ReferenceEquals:function(n,t){return n==t},ReferenceEquals$$Object$$Object:function(n,t){return n==t}}});JsTypes.push({fullname:"Object"});JsTypes.push({fullname:"Int8Array"});JsTypes.push({fullname:"Uint8Array"});JsTypes.push({fullname:"Int16Array"});JsTypes.push({fullname:"Uint16Array"});JsTypes.push({fullname:"Int32Array"});JsTypes.push({fullname:"Uint32Array"});JsTypes.push({fullname:"Float32Array"});JsTypes.push({fullname:"Float64Array"});JsTypes.push({fullname:"Array",baseTypeName:"Object",definition:{GetEnumerator:function(){return new ArrayEnumerator.ctor(this)},getItem:function(n){return this[n]},getCount:function(){return this.length},get_Count:function(){return this.length},selectSingle:function(n){for(var u,t,r=[],i=0;i<this.length;i++)u=this[i],t=u[n],t===undefined&&(t=null),r.push(t);return r},Clone:function(){return this.concat()},toArray:function(){return this},Add:function(n){this.push(n)},AddRange:function(n){for(var r=n.length,i=this.length,t=0;t<r;t++)this[i]=n[t],i++},Clear:function(){this.length>0&&this.splice(0,this.length)},clone:function(){return this.slice(0)},contains:function(n){var t=this.indexOf(n);return t>=0},Contains$$Object:function(n){return Contains(n)},Contains:function(n){var t=this.indexOf(n);return t>=0},dequeue:function(){return this.shift()},indexOf:function(n,t){var r,i;if(t==null&&(t=0),r=this.length,r!=0)for(i=t;i<r;i++)if(this[i]==n)return i;return-1},insert:function(n,t){this.splice(n,0,t)},addAt:function(n,t){this.splice(n,0,t)},queue:function(n){this.push(n)},Remove$$Object:function(n){return this.Remove(n)},Remove:function(n){var t=this.indexOf(n);return t>=0&&this.splice(t,1),t},RemoveAt:function(n){this.splice(n,1)},copyTo:function(n,t){for(var i=t;i<this.length;i++)n.push(this[i])},filter:function(n){for(var i,t=0,t=0,r=this.length;t<r;t++)i=this[t],n(i)||(this.splice(t,1),t--,r--);return this},filterOut:function(n){return this.filter(function(t){return!n(t)})},apply:function(n){for(var t=0,i=this.length;t<i;t++)this[t]=n(this[t]);return this},findFirst:function(n){for(var t,i=0,r=this.length;i<r;i++)if(t=this[i],n(t))return t;return null},ToArray:function(){return this},peek:function(){return this[this.length-1]},getLast:function(){return this[this.length-1]},getIterator:function(){return new ArrayIterator(this)},get_Length:function(){return this.length},get_Item:function(n){return this[n]},get_Item$$Int32:function(n){return this[n]}}});JsTypes.push({fullname:"ArrayEnumerator",baseTypeName:"System.Object",definition:{ctor:function(n){this._array=n;this._idx=-1},Reset:function(){this._idx=-1},get_Current:function(){return this._array[this._idx]},MoveNext:function(){return this._idx++,this._array.length>this._idx},Dispose:function(){}}});AfterCompilation(function(){Function._type=System.Delegate});JsTypes.push({fullname:"System.Boolean",baseTypeName:"System.ValueType",definition:{ctor:Boolean,toString:function(){return this==!0?"true":"false"}},staticDefinition:{tryParse:function(n){return n==null?!1:n.toLowerCase().trim()=="true"},Parse:function(n){return n==null?!1:n.toLowerCase().trim()=="true"}}});JsTypes.push({fullname:"System.Int32",baseTypeName:"System.ValueType",definition:{ctor:Number,toString:Number.prototype.toString},staticDefinition:{tryParse:function(n){return parseInt(n)},Parse$$String:function(n){return parseInt(n)}}});JsTypes.push({fullname:"System.Single",baseTypeName:"System.ValueType",definition:{ctor:Number,toString:Number.prototype.toString},staticDefinition:{tryParse:function(n){return parseFloat(n)},Parse$$String:function(n){return parseFloat(n)}}});JsTypes.push({fullname:"System.Decimal",baseTypeName:"System.ValueType",definition:{ctor:function(n){return new Number(n)},toString:function(){return this.toString()}},staticDefinition:{tryParse:function(n){return parseFloat(n)}}});JsTypes.push({fullname:"System.Double",baseTypeName:"System.ValueType",definition:{ctor:function(n){return new Number(n)}},staticDefinition:{tryParse:function(n){return parseFloat(n)},IsNaN:isNaN,PositiveInfinity:Number.POSITIVE_INFINITY,NegativeInfinity:Number.NEGATIVE_INFINITY}});String.prototype._toString=String.prototype.toString;JsTypes.push({fullname:"System.String",baseTypeName:"System.Object",definition:{ctor:String,GetEnumerator:function(){return new System.CharEnumerator.ctor(this)},GetType:function(){return Typeof(System.String)},Insert$$Int32$$String:function(n,t){var i=this.substring(0,n),r=this.substring(n);return i+t+r},Split$$Char$Array:function(n){var r,f,i,u,t,e,o;if(arguments.length!=1){for(r="[",t=0;t<arguments.length;t++)r+=arguments[t];if(r+="]",f=new RegExp(r),i=this.split(f),isMoz){for(u=[],t=0,e=i.length;t<e;t++)i[t].length>0&&u.push(i[t]);i=u}return i}return o=n,this.split(o)},ReplaceFirst:function(n,t){return this.replace(n,t)},Replace$$Char$$Char:function(n,t){return this.Replace(n,t)},Replace$$String$$String:function(n,t){return this.Replace(n,t)},Replace:function(n,t){var i=function(n){return n.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,"\\\\$&")},r=new RegExp(i(n),"g");return this.replace(r,t)},Substring$$Int32:function(n){return this.substr(n)},Substring$$Int32$$Int32:function(n,t){return this.substr(n,t)},Substring:function(n,t){return this.substr(n,t)},ToLower$$:function(){return this.toLowerCase()},ToLower:function(){return this.toLowerCase()},ToUpper:function(){return this.toUpperCase()},getItem:function(n){return this.charAt(n)},IndexOf$$String:function(n){return this.indexOf(n)},IndexOf$$Char:function(n){return this.indexOf(n)},Split$$Char$Array$$StringSplitOptions:function(n,t){if(t==System.StringSplitOptions.None)throw new Error("Not Implemented");return this.Split$$Char$Array.apply(this,n)},IndexOfAny$$Char$Array:function(n){for(var i,r=n.join(""),t=0;t<this.length;t++)if(i=this.charAt(t),r.search(i)>=0)return t;return-1},IndexOf:function(){return this.indexOf.apply(this,arguments)},LastIndexOf:function(){return this.lastIndexOf.apply(this,arguments)},LastIndexOf$$Char:function(n){return this.lastIndexOf(n)},LastIndexOf$$String:function(n){return this.lastIndexOf(n)},Remove$$Int32$$Int32:function(n,t){return this.substr(0,n)+this.substr(n+t)},StartsWith$$String:function(n){if(n==null)throw new System.ArgumentNullException.ctor;return this.indexOf(n)==0},EndsWith$$String:function(n){return this.lastIndexOf(n)==this.length-n.length},Contains:function(n){return this.indexOf(n)!=-1},toString:function(){return this._toString()},getLength:function(){return this.length},get_Chars$$Int32:String.prototype.charAt,get_Chars:String.prototype.charAt,get_Length:function(){return this.length},trim:function(){return this.replace(/^\\s+|\\s+$/g,"")},Trim:function(){return this.replace(/^\\s+|\\s+$/g,"")},ltrim:function(){return this.replace(/^\\s+/,"")},rtrim:function(){return this.replace(/\\s+$/,"")},FormatObject$$String$$Object$Array:function(n){for(var t=n,u=t.match(/{[A-Za-z]+}/g),i=0,f=u.length;i<f;i++){var r=u[i],e=r.substring(1,r.length-1),o=dataObject["get"+e]();t=t.split(r).join(o)}return t},GetHashCode:function(){var i=this.toString(),n=0,r=0,u=0,t,f;for(n=n^-1,t=0,f=i.length;t<f;t++)r=(n^i.charCodeAt(t))&255,u="0x"+"00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D".substr(r*9,8),n=n>>>8^u;return n^-1}},staticDefinition:{Empty:"",Format:function(n){for(var i,n=arguments[0],t=1;t<arguments.length;t++)i="{"+(t-1)+"}",n=n.split(i).join(arguments[t]);return n},Format$$String$$Object$Array:function(n,t){for(var r,i=0;i<t.length;i++)r="{"+i+"}",n=n.split(r).join(t[i]);return n},Format$$String$$Object$$Object$$Object:function(n,t,i,r){return System.String.Format$$String$$Object$Array(n,[t,i,r])},Format$$String$$Object$$Object:function(n,t,i){return System.String.Format$$String$$Object$Array(n,[t,i])},Format$$String$$Object:function(n,t){return System.String.Format$$String$$Object$Array(n,[t])},Join$$String$$String$Array:function(n,t){return t.join(n)},Compare$$String$$String$$Boolean:function(n,t,i){return i&&(n=n.toLowerCase(),t=t.toLowerCase()),n>t?1:n<t?-1:0},IsNullOrEmpty:function(n){return n==null||n.length==0}}});Arguments=function(){};Arguments.from=function(n,t){return Array.prototype.slice.call(n,t)};Arguments.Range=function(n,t,i){var u,r;for(i==null&&(i=n.length-1),u=[],r=t;r<=i;r++)u.push(n[r]);return u};Arguments.Contains=function(n,t){for(var i=0;i<n.length;i++)if(n[i]==t)return!0;return!1};JsTypes.push({fullname:"Date",definition:{removeTime:function(){return new Date(this.getFullYear(),this.getMonth(),this.getDate())},getStartMonthDayOfWeek:function(){return new Date(this.getFullYear(),this.getMonth(),1).getDay()},getShortDayOfWeek:function(){return Date.shortDays[this.getDay()]},addMonths:function(n){return new Date(this.getFullYear(),this.getMonth()+n,this.getDate(),this.getHours(),this.getMinutes(),this.getSeconds(),this.getMilliseconds())},addDays:function(n){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+n,this.getHours(),this.getMinutes(),this.getSeconds(),this.getMilliseconds())},isInMonth:function(n){return this.getFullYear()==n.getFullYear()&&this.getMonth()==n.getMonth()}},staticDefinition:{shortDays:["Su","Mo","Tu","We","Th","Fr","Sa"],getNow:function(){return new Date},getToday:function(){return(new Date).removeTime()}}});JsTypes.push({fullname:"VM",definition:{},staticDefinition:{tryParse:function(n,t){if(t==null)return null;var i=t._type;return this._TryParse(n,i)},TryParse:function(n,t){return(typeof t=="string"&&(t=Typeof(t)),t==null)?null:this._TryParse(n,t._JsType)},_TryParse:function(n,t){return t==null?null:typeof t=="string"&&(t=this.getType(t),t==null)?null:t.tryParse==null?null:t.tryParse(n)},PropertyIs:function(n,t,i){var r=VM.getPropertyType(n,t),u,f;return r!=null?(u=r._type,f=Type.GetType(i,!0),TypeIs(u,f)):!1}}});JsTypes.push({fullname:"SharpKit.DataModel.NotifyCollectionChangedEventArgs",baseTypeName:"System.Object",definition:{ctor:function(n,t){if(arguments.length!=0)if(this._Action=n,n=="Add")this._NewItems=[t];else if(n=="Remove")this._OldItems=[t];else throw new Error("Not implemented");},get_OldItems:function(){return this._OldItems},get_NewItems:function(){return this._NewItems},get_Action:function(){return this._Action}}});JsTypes.push({fullname:"Uint8Array",definition:{GetEnumerator:function(){return new ArrayEnumerator.ctor(this)},Clone:function(){return new Uint8Array(this)}}});JsTypes.push({fullname:"Int16Array",definition:{GetEnumerator:function(){return new ArrayEnumerator.ctor(this)},Clone:function(){return new Int16Array(this)}}});JsTypes.push({fullname:"Uint16Array",definition:{GetEnumerator:function(){return new ArrayEnumerator.ctor(this)},Clone:function(){return new Uint16Array(this)}}});JsTypes.push({fullname:"Int32Array",definition:{GetEnumerator:function(){return new ArrayEnumerator.ctor(this)},Clone:function(){return new Int32Array(this)}}});JsTypes.push({fullname:"Uint32Array",definition:{GetEnumerator:function(){return new ArrayEnumerator.ctor(this)},Clone:function(){return new Uint32Array(this)}}});JsTypes.push({fullname:"Float32Array",definition:{GetEnumerator:function(){return new ArrayEnumerator.ctor(this)},Clone:function(){return new Float32Array(this)}}});JsTypes.push({fullname:"Float64Array",definition:{GetEnumerator:function(){return new ArrayEnumerator.ctor(this)},Clone:function(){return new Float64Array(this)}}});AfterCompilation(function(){System.IO.Path.ctor()});typeof JsTypes=="undefined"&&(JsTypes=[]);System$IO$Path={fullname:"System.IO.Path",baseTypeName:"System.Object",staticDefinition:{cctor:function(){System.IO.Path.AltDirectorySeparatorChar="/";System.IO.Path.DirectorySeparatorChar="\\\\";System.IO.Path.InvalidFileNameChars=[\'"\',"<",">","|","\\0","\\x01","\\x02","\\x03","\\x04","\\x05","\\x06","\\x07","\\b","\\t","\\n","\\x0b","\\f","\\r","\\x0e","\\x0f","\\x10","\\x11","\\x12","\\x13","\\x14","\\x15","\\x16","\\x17","\\x18","\\x19","\\x1a","\\x1b","\\x1c","\\x1d","\\x1e","\\x1f",":","*","?","\\\\","/"];System.IO.Path.InvalidPathChars=[\'"\',"<",">","|","\\0","\\x01","\\x02","\\x03","\\x04","\\x05","\\x06","\\x07","\\b","\\t","\\n","\\x0b","\\f","\\r","\\x0e","\\x0f","\\x10","\\x11","\\x12","\\x13","\\x14","\\x15","\\x16","\\x17","\\x18","\\x19","\\x1a","\\x1b","\\x1c","\\x1d","\\x1e","\\x1f"];System.IO.Path.MAX_DIRECTORY_PATH=248;System.IO.Path.MAX_PATH=260;System.IO.Path.MaxPath=260;System.IO.Path.PathSeparator=";";System.IO.Path.RealInvalidPathChars=[\'"\',"<",">","|","\\0","\\x01","\\x02","\\x03","\\x04","\\x05","\\x06","\\x07","\\b","\\t","\\n","\\x0b","\\f","\\r","\\x0e","\\x0f","\\x10","\\x11","\\x12","\\x13","\\x14","\\x15","\\x16","\\x17","\\x18","\\x19","\\x1a","\\x1b","\\x1c","\\x1d","\\x1e","\\x1f"];System.IO.Path.VolumeSeparatorChar=":"},ChangeExtension:function(n,t){var i,u,r;if(n==null)return null;for(System.IO.Path.CheckInvalidPathChars(n),i=n,u=n.length;--u>=0;){if(r=n.charAt(u),r=="."){i=n.substr(0,u);break}if(r==System.IO.Path.DirectorySeparatorChar||r==System.IO.Path.AltDirectorySeparatorChar||r==System.IO.Path.VolumeSeparatorChar)break}return t==null||n.length==0?i:((t.length==0||t.charAt(0)!=".")&&(i=i+"."),i+t)},CharArrayStartsWithOrdinal:function(n,t,i,r){var f,u;if(t<i.length)return!1;if(r)return f=new System.String.ctor$$Char$Array$$Int32$$Int32(n,0,i.length),i.Equals$$String$$StringComparison(f,5);for(u=0;u<i.length;u++)if(n[u]!=i.charAt(u))return!1;return!0},CheckInvalidPathChars:function(n){for(var t,i=0;i<n.length;i++)if(t=n.charCodeAt(i),t==34||t==60||t==62||t==124||t<32)throw $CreateException(new System.ArgumentException.ctor$$String(System.Environment.GetResourceString("Argument_InvalidPathChars")),new Error);},CheckSearchPattern:function(n){for(var t;(t=n.indexOf("..",4))!=-1;){if(t+2==n.length)throw $CreateException(new System.ArgumentException.ctor$$String(System.Environment.GetResourceString("Arg_InvalidSearchPattern")),new Error);if(n.charAt(t+2)==System.IO.Path.DirectorySeparatorChar||n.charAt(t+2)==System.IO.Path.AltDirectorySeparatorChar)throw $CreateException(new System.ArgumentException.ctor$$String(System.Environment.GetResourceString("Arg_InvalidSearchPattern")),new Error);n=n.substr(t+2)}},Combine:function(n,t){if(n==null||t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String(n==null?"path1":"path2"),new Error);if(System.IO.Path.CheckInvalidPathChars(n),System.IO.Path.CheckInvalidPathChars(t),t.length==0)return n;if(n.length==0||System.IO.Path.IsPathRooted(t))return t;var i=n.charAt(n.length-1);return i!=System.IO.Path.DirectorySeparatorChar&&i!=System.IO.Path.AltDirectorySeparatorChar&&i!=System.IO.Path.VolumeSeparatorChar?n+System.IO.Path.DirectorySeparatorChar+t:n+t},FixupPath:function(n){return System.IO.Path.NormalizePath(n,!1)},GetDirectoryName:function(n){var i,t;if(n!=null&&(System.IO.Path.CheckInvalidPathChars(n),n=System.IO.Path.FixupPath(n),i=System.IO.Path.GetRootLength(n),n.length>i)){if(t=n.length,t==i)return null;while(t>i&&n.charAt(--t)!=System.IO.Path.DirectorySeparatorChar&&n.charAt(t)!=System.IO.Path.AltDirectorySeparatorChar);return n.substr(0,t)}return null},GetExtension:function(n){var r,t,i;if(n==null)return null;for(System.IO.Path.CheckInvalidPathChars(n),r=n.length,t=r;--t>=0;){if(i=n.charAt(t),i==".")return t!=r-1?n.substr(t,r-t):System.String.Empty;if(i==System.IO.Path.DirectorySeparatorChar||i==System.IO.Path.AltDirectorySeparatorChar||i==System.IO.Path.VolumeSeparatorChar)break}return System.String.Empty},GetFileName:function(n){var r,t,i;if(n!=null)for(System.IO.Path.CheckInvalidPathChars(n),r=n.length,t=r;--t>=0;)if(i=n.charAt(t),i==System.IO.Path.DirectorySeparatorChar||i==System.IO.Path.AltDirectorySeparatorChar||i==System.IO.Path.VolumeSeparatorChar)return n.substr(t+1,r-t-1);return n},GetFileNameWithoutExtension:function(n){if(n=System.IO.Path.GetFileName(n),n==null)return null;var t=n.lastIndexOf(".");return t==-1?n:n.substr(0,t)},GetFullPath:function(n){return System.IO.Path.GetFullPathInternal(n)},GetFullPathInternal:function(n){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("path"),new Error);return System.IO.Path.NormalizePath(n,!0)},GetInvalidFileNameChars:function(){return System.IO.Path.InvalidFileNameChars},GetInvalidPathChars:function(){return System.IO.Path.RealInvalidPathChars},GetPathRoot:function(n){return n==null?null:(n=System.IO.Path.FixupPath(n),n.substr(0,System.IO.Path.GetRootLength(n)))},GetRandomFileName:function(){throw $CreateException(new System.NotSupportedException.ctor,new Error);},GetRootLength:function(n){var t,i,r;if(System.IO.Path.CheckInvalidPathChars(n),t=0,i=n.length,i>=1&&System.IO.Path.IsDirectorySeparator(n.charAt(0))){if(t=1,i>=2&&System.IO.Path.IsDirectorySeparator(n.charAt(1)))for(t=2,r=2;t<i&&(n.charAt(t)!=System.IO.Path.DirectorySeparatorChar&&n.charAt(t)!=System.IO.Path.AltDirectorySeparatorChar||--r>0);)t++;return t}return i>=2&&n.charAt(1)==System.IO.Path.VolumeSeparatorChar&&(t=2,i>=3&&System.IO.Path.IsDirectorySeparator(n.charAt(2))&&t++),t},GetTempFileName:function(){throw $CreateException(new System.NotSupportedException.ctor,new Error);},GetTempPath:function(){throw $CreateException(new System.NotSupportedException.ctor,new Error);},HasExtension:function(n){var i,t;if(n!=null)for(System.IO.Path.CheckInvalidPathChars(n),i=n.length;--i>=0;){if(t=n.charAt(i),t==".")return i!=n.length-1;if(t==System.IO.Path.DirectorySeparatorChar||t==System.IO.Path.AltDirectorySeparatorChar||t==System.IO.Path.VolumeSeparatorChar)break}return!1},InternalCombine:function(n,t){var r,i;if(n==null||t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String(n==null?"path1":"path2"),new Error);if(System.IO.Path.CheckInvalidPathChars(n),System.IO.Path.CheckInvalidPathChars(t),t.length==0)throw $CreateException(new System.ArgumentException.ctor$$String$$String(System.Environment.GetResourceString("Argument_PathEmpty"),"path2"),new Error);if(System.IO.Path.IsPathRooted(t))throw $CreateException(new System.ArgumentException.ctor$$String$$String(System.Environment.GetResourceString("Arg_Path2IsRooted"),"path2"),new Error);return(r=n.length,r==0)?t:(i=n.charAt(r-1),i!=System.IO.Path.DirectorySeparatorChar&&i!=System.IO.Path.AltDirectorySeparatorChar&&i!=System.IO.Path.VolumeSeparatorChar)?n+System.IO.Path.DirectorySeparatorChar+t:n+t},IsDirectorySeparator:function(n){return n!=System.IO.Path.DirectorySeparatorChar?n==System.IO.Path.AltDirectorySeparatorChar:!0},IsPathRooted:function(n){if(n!=null){System.IO.Path.CheckInvalidPathChars(n);var t=n.length;if(t>=1&&(n.charAt(0)==System.IO.Path.DirectorySeparatorChar||n.charAt(0)==System.IO.Path.AltDirectorySeparatorChar)||t>=2&&n.charAt(1)==System.IO.Path.VolumeSeparatorChar)return!0}return!1},NormalizePath:function(n,t){return System.IO.Path.NormalizePathSlow(n,t)},NormalizePathSlow:function(n){return n}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$IO$Path);typeof JsTypes=="undefined"&&(JsTypes=[]);System$Linq$Enumerable={fullname:"System.Linq.Enumerable",baseTypeName:"System.Object",staticDefinition:{CombinePredicates$1:function(n,t,i){return function(n){return t(n)&&i(n)}},CombineSelectors$3:function(n,t,i,r,u){return function(n){return u(r(n))}},First$1$$IEnumerable$1:function(n,t){var i,r;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i=As(t,System.Collections.Generic.IList$1.ctor),i!=null){if(i.get_Count()>0)return i.get_Item$$Int32(0)}else{r=t.GetEnumerator();try{if(r.MoveNext())return r.get_Current()}finally{r.Dispose()}}throw $CreateException(System.Linq.Error.NoElements(),new Error);},First$1$$IEnumerable$1$$Func$2:function(n,t,i){var r,u;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);for(r=t.GetEnumerator();r.MoveNext();)if(u=r.get_Current(),i(u))return u;throw $CreateException(System.Linq.Error.NoMatch(),new Error);},FirstOrDefault$1$$IEnumerable$1:function(n,t){var i,r;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i=As(t,System.Collections.Generic.IList$1.ctor),i!=null){if(i.get_Count()>0)return i.get_Item$$Int32(0)}else{r=t.GetEnumerator();try{if(r.MoveNext())return r.get_Current()}finally{r.Dispose()}}return Default(n)},FirstOrDefault$1$$IEnumerable$1$$Func$2:function(n,t,i){var r,u;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);for(r=t.GetEnumerator();r.MoveNext();)if(u=r.get_Current(),i(u))return u;return Default(n)},Single$1$$IEnumerable$1:function(n,t){var i,r;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i=As(t,System.Collections.Generic.IList$1.ctor),i!=null){if(i.get_Count()==1)return i.get_Item$$Int32(0);throw $CreateException(new System.InvalidOperationException.ctor,new Error);}else{r=t.GetEnumerator();try{if(r.MoveNext())return r.get_Current()}finally{r.Dispose()}}throw $CreateException(System.Linq.Error.NoElements(),new Error);},Single$1$$IEnumerable$1$$Func$2:function(n,t,i){var r,u;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);for(r=t.GetEnumerator();r.MoveNext();)if(u=r.get_Current(),i(u))return u;throw $CreateException(System.Linq.Error.NoMatch(),new Error);},SingleOrDefault$1$$IEnumerable$1:function(n,t){var i,r;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i=As(t,System.Collections.Generic.IList$1.ctor),i!=null){if(i.get_Count()==1)return i.get_Item$$Int32(0);throw $CreateException(new System.InvalidOperationException.ctor,new Error);}else{r=t.GetEnumerator();try{if(r.MoveNext())return r.get_Current()}finally{r.Dispose()}}return Default(n)},SingleOrDefault$1$$IEnumerable$1$$Func$2:function(n,t,i){var r,u;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);for(r=t.GetEnumerator();r.MoveNext();)if(u=r.get_Current(),i(u))return u;return Default(n)},Last$1$$IEnumerable$1:function(n,t){var r,u,i,f;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(r=As(t,System.Collections.Generic.IList$1.ctor),r!=null){if(u=r.get_Count(),u>0)return r.get_Item$$Int32(u-1)}else{i=t.GetEnumerator();try{if(i.MoveNext()){do f=i.get_Current();while(i.MoveNext());return f}}finally{i.Dispose()}}throw $CreateException(System.Linq.Error.NoElements(),new Error);},Last$1$$IEnumerable$1$$Func$2:function(n,t,i){var r;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);for(var u=Default(n),f=!1,e=t.GetEnumerator();e.MoveNext();)r=e.get_Current(),i(r)&&(u=r,f=!0);if(!f)throw $CreateException(System.Linq.Error.NoMatch(),new Error);return u},LastOrDefault$1$$IEnumerable$1:function(n,t){var r,u,i,f;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(r=As(t,System.Collections.Generic.IList$1.ctor),r!=null){if(u=r.get_Count(),u>0)return r.get_Item$$Int32(u-1)}else{i=t.GetEnumerator();try{if(i.MoveNext()){do f=i.get_Current();while(i.MoveNext());return f}}finally{i.Dispose()}}return Default(n)},LastOrDefault$1$$IEnumerable$1$$Func$2:function(n,t,i){var r,u,f;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);for(r=Default(n),u=t.GetEnumerator();u.MoveNext();)f=u.get_Current(),i(f)&&(r=f);return r},Where$1$$IEnumerable$1$$Func$2:function(n,t,i){if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);return Is(t,System.Linq.Enumerable.Iterator.ctor)?Cast(t,System.Linq.Enumerable.Iterator.ctor).Where(i):t instanceof Array?new System.Linq.Enumerable.WhereArrayIterator.ctor(n,t instanceof Array||t==null?t:function(){throw new Error("InvalidCastException");}(),i):Is(t,System.Collections.Generic.List$1.ctor)?new System.Linq.Enumerable.WhereListIterator.ctor(n,Cast(t,System.Collections.Generic.List$1.ctor),i):new System.Linq.Enumerable.WhereEnumerableIterator.ctor(n,t,i)},Where$1$$IEnumerable$1$$Func$3:function(n,t,i){if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);throw $CreateException(new System.NotImplementedException.ctor,new Error);},Contains$1$$IEnumerable$1$$TSource:function(n,t,i){var r,u,f;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(r=As(t,System.Collections.Generic.ICollection$1.ctor),r!=null)return r.Contains(i);for(u=t.GetEnumerator();u.MoveNext();)if(f=u.get_Current(),f==i)return!0;return!1},Contains$1$$IEnumerable$1$$TSource$$IEqualityComparer$1:function(n,t,i,r){var u,f;if(r==null)return System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(n,t,i);if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);for(u=t.GetEnumerator();u.MoveNext();)if(f=u.get_Current(),r.Equals$$T$$T(f,i))return!0;return!1},Any$1$$IEnumerable$1:function(n,t){if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);var i=t.GetEnumerator();try{if(i.MoveNext())return!0}finally{i.Dispose()}return!1},Any$1$$IEnumerable$1$$Func$2:function(n,t,i){var r,u;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);for(r=t.GetEnumerator();r.MoveNext();)if(u=r.get_Current(),i(u))return!0;return!1},Concat$1:function(n,t,i){if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("first"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("second"),new Error);return new SharpKit.JavaScript.Private.Enumerable.ConcatEnumerable$1.ctor(n,t,i)},Count$1$$IEnumerable$1:function(n,t){var i,r,u;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i=As(t,System.Collections.Generic.ICollection$1.ctor),i!=null)return i.get_Count();r=0;u=t.GetEnumerator();try{while(u.MoveNext())r++}finally{u.Dispose()}return r},Count$1$$IEnumerable$1$$Func$2:function(n,t,i){var r,u,f;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("predicate"),new Error);for(r=0,u=t.GetEnumerator();u.MoveNext();)f=u.get_Current(),i(f)&&r++;return r},OfType$1:function(n,t){if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);return new System.Linq.Enumerable.OfTypeIterator.ctor(n,t)},OrderBy$2$$IEnumerable$1$$Func$2:function(n,t,i,r){return new System.Linq._OrderedEnumerable$2.ctor(n,t,i,r,null,!1)},OrderBy$2$$IEnumerable$1$$Func$2$$IComparer$1:function(n,t,i,r,u){return new System.Linq._OrderedEnumerable$2.ctor(n,t,i,r,u,!1)},OrderByDescending$2$$IEnumerable$1$$Func$2:function(n,t,i,r){return new System.Linq._OrderedEnumerable$2.ctor(n,t,i,r,null,!0)},OrderByDescending$2$$IEnumerable$1$$Func$2$$IComparer$1:function(n,t,i,r,u){return new System.Linq._OrderedEnumerable$2.ctor(n,t,i,r,u,!0)},ThenBy$2$$IOrderedEnumerable$1$$Func$2:function(n,t,i,r){if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);return i.CreateOrderedEnumerable$1(t,r,null,!1)},ThenBy$2$$IOrderedEnumerable$1$$Func$2$$IComparer$1:function(n,t,i,r,u){if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);return i.CreateOrderedEnumerable$1(t,r,u,!1)},ThenByDescending$2$$IOrderedEnumerable$1$$Func$2:function(n,t,i,r){if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);return i.CreateOrderedEnumerable$1(t,r,null,!0)},ThenByDescending$2$$IOrderedEnumerable$1$$Func$2$$IComparer$1:function(n,t,i,r,u){if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);return i.CreateOrderedEnumerable$1(t,r,u,!0)},Select$2$$IEnumerable$1$$Func$2:function(n,t,i,r){if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(r==null)throw $CreateException(System.Linq.Error.ArgumentNull("selector"),new Error);return Is(i,System.Linq.Enumerable.Iterator.ctor)?Cast(i,System.Linq.Enumerable.Iterator.ctor).Select$1(t,r):i instanceof Array?new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(n,t,i instanceof Array||i==null?i:function(){throw new Error("InvalidCastException");}(),null,r):Is(i,System.Collections.Generic.List$1.ctor)?new System.Linq.Enumerable.WhereSelectListIterator.ctor(n,t,Cast(i,System.Collections.Generic.List$1.ctor),null,r):new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(n,t,i,null,r)},Select$2$$IEnumerable$1$$Func$3:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},SelectMany$2$$IEnumerable$1$$Func$2:function(n,t,i,r){if(i==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(r==null)throw $CreateException(System.Linq.Error.ArgumentNull("selector"),new Error);return i instanceof Array?new System.Linq.Enumerable.SelectManyArrayIterator.ctor(n,t,i instanceof Array||i==null?i:function(){throw new Error("InvalidCastException");}(),r):Is(i,System.Collections.Generic.List$1.ctor)?new System.Linq.Enumerable.SelectManyListIterator.ctor(n,t,Cast(i,System.Collections.Generic.List$1.ctor),r):new System.Linq.Enumerable.SelectManyEnumerableIterator.ctor(n,t,i,r)},SelectMany$2$$IEnumerable$1$$Func$3:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},SelectMany$3$$IEnumerable$1$$Func$2$$Func$3:function(n,t,i,r,u,f){if(r==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);if(u==null)throw $CreateException(System.Linq.Error.ArgumentNull("collectionSelector"),new Error);if(f==null)throw $CreateException(System.Linq.Error.ArgumentNull("resultSelector"),new Error);return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.Tuple$2.ctor,i,System.Linq.Enumerable.SelectMany$2$$IEnumerable$1$$Func$2(n,System.Tuple$2.ctor,r,function(i){return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(t,System.Tuple$2.ctor,u(i),function(r){return System.Tuple.Create$2$$T1$$T2(n,t,i,r)})}),function(n){return f(n.get_Item1(),n.get_Item2())})},Skip$1:function(n,t,i){if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);return new System.Linq.Enumerable.SkipIterator.ctor(n,t,i)},Take$1:function(n,t,i){if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);return new System.Linq.Enumerable.TakeIterator.ctor(n,t,i)},ToArray$1:function(n,t){var i,r,u;if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);for(i=[],r=t.GetEnumerator();r.MoveNext();)u=r.get_Current(),i.push(u);return i},ToList$1:function(n,t){if(t==null)throw $CreateException(System.Linq.Error.ArgumentNull("source"),new Error);return new System.Collections.Generic.List$1.ctor$$IEnumerable$1(n,t)}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Linq$Enumerable);System$Linq$_Error={fullname:"System.Linq._Error",baseTypeName:"System.Object",staticDefinition:{ArgumentArrayHasTooManyElements:function(){return new System.ArgumentException.ctor$$String("ArgumentArrayHasTooManyElements(p0")},ArgumentNotIEnumerableGeneric:function(){return new System.ArgumentException.ctor$$String("ArgumentNotIEnumerableGeneric(p0")},ArgumentNotSequence:function(){return new System.ArgumentException.ctor$$String("ArgumentNotSequence(p0")},ArgumentNotValid:function(){return new System.ArgumentException.ctor$$String("ArgumentNotValid(p0")},IncompatibleElementTypes:function(){return new System.ArgumentException.ctor$$String("IncompatibleElementTypes")},ArgumentNotLambda:function(){return new System.ArgumentException.ctor$$String("ArgumentNotLambda(p0")},MoreThanOneElement:function(){return new System.InvalidOperationException.ctor$$String("MoreThanOneElement")},MoreThanOneMatch:function(){return new System.InvalidOperationException.ctor$$String("MoreThanOneMatch")},NoArgumentMatchingMethodsInQueryable:function(){return new System.InvalidOperationException.ctor$$String("NoArgumentMatchingMethodsInQueryable(p0")},NoElements:function(){return new System.InvalidOperationException.ctor$$String("NoElements")},NoMatch:function(){return new System.InvalidOperationException.ctor$$String("NoMatch")},NoMethodOnType:function(){return new System.InvalidOperationException.ctor$$String("NoMethodOnType(p0, p1")},NoMethodOnTypeMatchingArguments:function(){return new System.InvalidOperationException.ctor$$String("NoMethodOnTypeMatchingArguments(p0, p1")},NoNameMatchingMethodsInQueryable:function(){return new System.InvalidOperationException.ctor$$String("NoNameMatchingMethodsInQueryable(p0")},ArgumentNull:function(n){return new System.ArgumentNullException.ctor$$String(n)},ArgumentOutOfRange:function(n){return new System.ArgumentOutOfRangeException.ctor$$String(n)},NotImplemented:function(){return new System.NotImplementedException.ctor},NotSupported:function(){return new System.NotSupportedException.ctor}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Linq$_Error);System$Linq$IGrouping$2={fullname:"System.Linq.IGrouping$2",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerable$1","System.Collections.IEnumerable"],Kind:"Interface"};JsTypes.push(System$Linq$IGrouping$2);System$Linq$IOrderedEnumerable$1={fullname:"System.Linq.IOrderedEnumerable$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerable$1","System.Collections.IEnumerable"],Kind:"Interface"};JsTypes.push(System$Linq$IOrderedEnumerable$1);System$Linq$Error={fullname:"System.Linq.Error",baseTypeName:"System.Object",staticDefinition:{ArgumentNull:function(n){return new System.Exception.ctor$$String("ArgumentNull "+n)},NoElements:function(){return new System.Exception.ctor$$String("NoElements")},NoMatch:function(){return new System.Exception.ctor$$String("NoMatch")}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Linq$Error);System$Linq$_OrderedEnumerable$1={fullname:"System.Linq._OrderedEnumerable$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Linq.IOrderedEnumerable$1","System.Collections.Generic.IEnumerable$1","System.Collections.IEnumerable"],Kind:"Class",definition:{ctor:function(n){this.TElement=n;this.source=null;this.sorted=null;System.Object.ctor.call(this)},GetEnumerator:function(){return this.sorted==null&&(this.sorted=this.SortSource()),this.sorted.GetEnumerator()},SortSource:function(){var n=System.Linq.Enumerable.ToArray$1(this.TElement,this.source);return n.sort($CreateDelegate(this,this.Compare)),n},CreateOrderedEnumerable$1:function(n,t,i,r){return function(){var u=new System.Linq._OrderedEnumerable$2.ctor(this.TElement,n,this.source,t,i,r);return u.parent=this,u}.call(this)}}};JsTypes.push(System$Linq$_OrderedEnumerable$1);System$Linq$_OrderedEnumerable$2={fullname:"System.Linq._OrderedEnumerable$2",baseTypeName:"System.Linq._OrderedEnumerable$1",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u,f){if(this.TElement=n,this.TKey=t,this.parent=null,this.keySelector=null,this.comparer=null,this.descending=!1,System.Linq._OrderedEnumerable$1.ctor.call(this,this.TElement),i==null)throw $CreateException(System.Linq._Error.ArgumentNull("source"),new Error);if(r==null)throw $CreateException(System.Linq._Error.ArgumentNull("keySelector"),new Error);this.source=i;this.keySelector=r;this.comparer=u!=null?u:System.Collections.Generic.Comparer$1.get_Default();this.descending=f},Compare:function(n,t){var i;if(this.parent!=null&&(i=this.parent.Compare(n,t),i!=0))return i;var u=this.keySelector(n),f=this.keySelector(t),r=this.comparer.Compare(u,f);return this.descending&&(r*=-1),r}}};JsTypes.push(System$Linq$_OrderedEnumerable$2);System$Linq$Enumerable$Iterator={fullname:"System.Linq.Enumerable.Iterator",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerable$1","System.Collections.IEnumerable","System.Collections.Generic.IEnumerator$1","System.IDisposable","System.Collections.IEnumerator"],Kind:"Class",definition:{ctor:function(n){this.TSource=n;this.state=0;this.current=null;System.Object.ctor.call(this)},Current$$:"`0",get_Current:function(){return this.current},Dispose:function(){this.current=Default(this.TSource);this.state=-1},GetEnumerator:function(){if(this.state==0)return this.state=1,this;var n=this.Clone();return n.state=1,n}}};JsTypes.push(System$Linq$Enumerable$Iterator);System$Linq$Enumerable$SelectManyEnumerableIterator={fullname:"System.Linq.Enumerable.SelectManyEnumerableIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r){this.TSource=n;this.TResult=t;this.source=null;this.selector=null;this.enumerator=null;this.innerEnumerator=null;System.Linq.Enumerable.Iterator.ctor.call(this,this.TResult);this.source=i;this.selector=r},Clone:function(){return new System.Linq.Enumerable.SelectManyEnumerableIterator.ctor(this.TSource,this.TResult,this.source,this.selector)},Dispose:function(){this.enumerator!=null&&this.enumerator.Dispose();this.enumerator=null;System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this)},MoveNext:function(){switch(this.state){case 1:this.enumerator=this.source.GetEnumerator();this.state=2;break;case 2:break;default:return!1}for(;;)if(this.innerEnumerator==null)if(this.enumerator.MoveNext())this.innerEnumerator=this.selector(this.enumerator.get_Current()).GetEnumerator();else return this.Dispose(),!1;else{if(this.innerEnumerator.MoveNext())return this.current=this.innerEnumerator.get_Current(),!0;this.innerEnumerator=null}},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TResult,n,this,null,t)},Where:function(n){return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult,this,n)}}};JsTypes.push(System$Linq$Enumerable$SelectManyEnumerableIterator);System$Linq$Enumerable$SelectManyListIterator={fullname:"System.Linq.Enumerable.SelectManyListIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r){this.TSource=n;this.TResult=t;this.source=null;this.selector=null;this.index=0;this.innerEnumerator=null;System.Linq.Enumerable.Iterator.ctor.call(this,this.TResult);this.source=i;this.selector=r},Clone:function(){return new System.Linq.Enumerable.SelectManyListIterator.ctor(this.TSource,this.TResult,this.source,this.selector)},MoveNext:function(){var n,t,i;if(this.state==1){while(this.index<this.source.get_Count()||this.innerEnumerator!=null){if(this.innerEnumerator==null&&(n=this.source.get_Item$$Int32(this.index),this.index++,t=this.selector(n),this.innerEnumerator=t.GetEnumerator()),i=this.innerEnumerator.MoveNext(),!i){this.innerEnumerator=null;continue}return this.current=this.innerEnumerator.get_Current(),!0}this.Dispose()}return!1},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TResult,n,this,null,t)},Where:function(n){return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult,this,n)}}};JsTypes.push(System$Linq$Enumerable$SelectManyListIterator);System$Linq$Enumerable$WhereArrayIterator={fullname:"System.Linq.Enumerable.WhereArrayIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i){this.TSource=n;this.source=null;this.predicate=null;this.index=0;System.Linq.Enumerable.Iterator.ctor.call(this,this.TSource);this.source=t;this.predicate=i},Clone:function(){return new System.Linq.Enumerable.WhereArrayIterator.ctor(this.TSource,this.source,this.predicate)},MoveNext:function(){if(this.state==1){while(this.index<this.source.length){var n=this.source[this.index];if(this.index++,this.predicate(n))return this.current=n,!0}this.Dispose()}return!1},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource,n,this.source,this.predicate,t)},Where:function(n){return new System.Linq.Enumerable.WhereArrayIterator.ctor(this.TSource,this.source,System.Linq.Enumerable.CombinePredicates$1(this.TSource,this.predicate,n))}}};JsTypes.push(System$Linq$Enumerable$WhereArrayIterator);System$Linq$Enumerable$WhereEnumerableIterator={fullname:"System.Linq.Enumerable.WhereEnumerableIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i){this.TSource=n;this.source=null;this.predicate=null;this.enumerator=null;System.Linq.Enumerable.Iterator.ctor.call(this,this.TSource);this.source=t;this.predicate=i},Clone:function(){return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TSource,this.source,this.predicate)},Dispose:function(){this.enumerator!=null&&this.enumerator.Dispose();this.enumerator=null;System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this)},MoveNext:function(){switch(this.state){case 1:this.enumerator=this.source.GetEnumerator();this.state=2;break;case 2:break;default:return!1}while(this.enumerator.MoveNext()){var n=this.enumerator.get_Current();if(this.predicate(n))return this.current=n,!0}return this.Dispose(),!1},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource,n,this.source,this.predicate,t)},Where:function(n){return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TSource,this.source,System.Linq.Enumerable.CombinePredicates$1(this.TSource,this.predicate,n))}}};JsTypes.push(System$Linq$Enumerable$WhereEnumerableIterator);System$Linq$Enumerable$WhereListIterator={fullname:"System.Linq.Enumerable.WhereListIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i){this.TSource=n;this.source=null;this.predicate=null;this.enumerator=null;System.Linq.Enumerable.Iterator.ctor.call(this,this.TSource);this.source=t;this.predicate=i},Clone:function(){return new System.Linq.Enumerable.WhereListIterator.ctor(this.TSource,this.source,this.predicate)},MoveNext:function(){switch(this.state){case 1:this.enumerator=this.source.GetEnumerator();this.state=2;break;case 2:break;default:return!1}while(this.enumerator.MoveNext()){var n=this.enumerator.get_Current();if(this.predicate(n))return this.current=n,!0}return this.Dispose(),!1},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource,n,this.source,this.predicate,t)},Where:function(n){return new System.Linq.Enumerable.WhereListIterator.ctor(this.TSource,this.source,System.Linq.Enumerable.CombinePredicates$1(this.TSource,this.predicate,n))}}};JsTypes.push(System$Linq$Enumerable$WhereListIterator);System$Linq$Enumerable$WhereSelectArrayIterator={fullname:"System.Linq.Enumerable.WhereSelectArrayIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u){this.TSource=n;this.TResult=t;this.source=null;this.predicate=null;this.selector=null;this.index=0;System.Linq.Enumerable.Iterator.ctor.call(this,this.TResult);this.source=i;this.predicate=r;this.selector=u},Clone:function(){return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource,this.TResult,this.source,this.predicate,this.selector)},MoveNext:function(){if(this.state==1){while(this.index<this.source.length){var n=this.source[this.index];if(this.index++,this.predicate==null||this.predicate(n))return this.current=this.selector(n),!0}this.Dispose()}return!1},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource,n,this.source,this.predicate,System.Linq.Enumerable.CombineSelectors$3(this.TSource,this.TResult,n,this.selector,t))},Where:function(n){return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult,this,n)}}};JsTypes.push(System$Linq$Enumerable$WhereSelectArrayIterator);System$Linq$Enumerable$WhereSelectEnumerableIterator={fullname:"System.Linq.Enumerable.WhereSelectEnumerableIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u){this.TSource=n;this.TResult=t;this.source=null;this.predicate=null;this.selector=null;this.enumerator=null;System.Linq.Enumerable.Iterator.ctor.call(this,this.TResult);this.source=i;this.predicate=r;this.selector=u},Clone:function(){return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource,this.TResult,this.source,this.predicate,this.selector)},Dispose:function(){this.enumerator!=null&&this.enumerator.Dispose();this.enumerator=null;System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this)},MoveNext:function(){switch(this.state){case 1:this.enumerator=this.source.GetEnumerator();this.state=2;break;case 2:break;default:return!1}while(this.enumerator.MoveNext()){var n=this.enumerator.get_Current();if(this.predicate==null||this.predicate(n))return this.current=this.selector(n),!0}return this.Dispose(),!1},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource,n,this.source,this.predicate,System.Linq.Enumerable.CombineSelectors$3(this.TSource,this.TResult,n,this.selector,t))},Where:function(n){return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult,this,n)}}};JsTypes.push(System$Linq$Enumerable$WhereSelectEnumerableIterator);System$Linq$Enumerable$WhereSelectListIterator={fullname:"System.Linq.Enumerable.WhereSelectListIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r,u){this.TSource=n;this.TResult=t;this.source=null;this.predicate=null;this.selector=null;this.enumerator=null;System.Linq.Enumerable.Iterator.ctor.call(this,this.TResult);this.source=i;this.predicate=r;this.selector=u},Clone:function(){return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource,this.TResult,this.source,this.predicate,this.selector)},MoveNext:function(){switch(this.state){case 1:this.enumerator=this.source.GetEnumerator();this.state=2;break;case 2:break;default:return!1}while(this.enumerator.MoveNext()){var n=this.enumerator.get_Current();if(this.predicate==null||this.predicate(n))return this.current=this.selector(n),!0}return this.Dispose(),!1},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource,n,this.source,this.predicate,System.Linq.Enumerable.CombineSelectors$3(this.TSource,this.TResult,n,this.selector,t))},Where:function(n){return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult,this,n)}}};JsTypes.push(System$Linq$Enumerable$WhereSelectListIterator);System$Linq$Enumerable$OfTypeIterator={fullname:"System.Linq.Enumerable.OfTypeIterator",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerator$1","System.Collections.Generic.IEnumerable$1"],Kind:"Class",definition:{ctor:function(n,t){this.T=n;this.Source=null;this.SourceEnumerator=null;System.Object.ctor.call(this);this.Source=t},Reset:function(){this.SourceEnumerator!=null&&this.SourceEnumerator.Reset()},Current$$:"`0",get_Current:function(){return this.SourceEnumerator.get_Current()},MoveNext:function(){for(this.SourceEnumerator==null&&(this.SourceEnumerator=this.Source.GetEnumerator());;){if(!this.SourceEnumerator.MoveNext())return!1;var n=this.SourceEnumerator.get_Current();if(Is(n,this.T))return!0}},Dispose:function(){this.Source=null;this.SourceEnumerator=null},GetEnumerator:function(){return this}}};JsTypes.push(System$Linq$Enumerable$OfTypeIterator);System$Linq$Enumerable$SkipIterator={fullname:"System.Linq.Enumerable.SkipIterator",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerator$1","System.Collections.Generic.IEnumerable$1"],Kind:"Class",definition:{ctor:function(n,t,i){this.T=n;this.SkipCount=0;this.Source=null;this.SourceEnumerator=null;this.State=0;System.Object.ctor.call(this);this.Source=t;this.SkipCount=i},Reset:function(){this.SourceEnumerator!=null&&this.SourceEnumerator.Reset()},Current$$:"`0",get_Current:function(){return this.SourceEnumerator.get_Current()},MoveNext:function(){if(this.State==0&&(this.SourceEnumerator=this.Source.GetEnumerator(),this.State=1),this.State==1){for(var n=0;n<this.SkipCount;n++)if(!this.SourceEnumerator.MoveNext())return!1;this.State=2}return this.State==2?this.SourceEnumerator.MoveNext():!1},Dispose:function(){this.Source=null;this.SourceEnumerator=null},GetEnumerator:function(){return this.State==0?this:new System.Linq.Enumerable.SkipIterator.ctor(this.T,this.Source,this.SkipCount)}}};JsTypes.push(System$Linq$Enumerable$SkipIterator);System$Linq$Enumerable$TakeIterator={fullname:"System.Linq.Enumerable.TakeIterator",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerator$1","System.Collections.Generic.IEnumerable$1"],Kind:"Class",definition:{ctor:function(n,t,i){this.T=n;this.TakeCount=0;this.Source=null;this.SourceEnumerator=null;this.State=0;this.TakeIndex=0;System.Object.ctor.call(this);this.Source=t;this.TakeCount=i},Reset:function(){this.SourceEnumerator!=null&&this.SourceEnumerator.Reset()},Current$$:"`0",get_Current:function(){return this.SourceEnumerator.get_Current()},MoveNext:function(){return(this.State==0&&(this.SourceEnumerator=this.Source.GetEnumerator(),this.State=1),this.State==1)?this.SourceEnumerator.MoveNext()&&(this.TakeIndex++,this.TakeIndex<=this.TakeCount)?!0:(this.State=2,!1):!1},Dispose:function(){this.Source=null;this.SourceEnumerator=null},GetEnumerator:function(){return this.State==0?this:new System.Linq.Enumerable.TakeIterator.ctor(this.T,this.Source,this.TakeCount)}}};JsTypes.push(System$Linq$Enumerable$TakeIterator);SharpKit$JavaScript$Private$Enumerable$ConcatEnumerable$1={fullname:"SharpKit.JavaScript.Private.Enumerable.ConcatEnumerable$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerable$1"],Kind:"Class",definition:{ctor:function(n,t,i){this.T=n;this.First=null;this.Second=null;System.Object.ctor.call(this);this.First=t;this.Second=i},GetEnumerator:function(){return new SharpKit.JavaScript.Private.Enumerable.ConcatEnumerator$1.ctor(this.T,this.First,this.Second)}}};JsTypes.push(SharpKit$JavaScript$Private$Enumerable$ConcatEnumerable$1);SharpKit$JavaScript$Private$Enumerable$ConcatEnumerator$1={fullname:"SharpKit.JavaScript.Private.Enumerable.ConcatEnumerator$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerator$1","System.Collections.Generic.IEnumerable$1"],Kind:"Class",definition:{ctor:function(n,t,i){this.T=n;this.First=null;this.Second=null;this.FirstEnumerator=null;this.SecondEnumerator=null;this.State=0;this.onFirst=!0;System.Object.ctor.call(this);this.First=t;this.Second=i},Reset:function(){this.FirstEnumerator!=null&&this.FirstEnumerator.Reset();this.SecondEnumerator!=null&&this.SecondEnumerator.Reset();this.onFirst=!0},Current$$:"`0",get_Current:function(){if(this.State==1)return this.FirstEnumerator.get_Current();if(this.State==3)return this.SecondEnumerator.get_Current();throw $CreateException(new System.InvalidOperationException.ctor,new Error);},MoveNext:function(){if(this.State==0&&(this.FirstEnumerator=this.First.GetEnumerator(),this.State=1),this.State==1){if(this.FirstEnumerator.MoveNext())return!0;this.State=2}if(this.State==2&&(this.SecondEnumerator=this.Second.GetEnumerator(),this.State=3),this.State==3){if(this.SecondEnumerator.MoveNext())return!0;this.State=4}return!1},Dispose:function(){this.First=null;this.FirstEnumerator=null;this.Second=null;this.SecondEnumerator=null},GetEnumerator:function(){return this.State==0?this:new SharpKit.JavaScript.Private.Enumerable.ConcatEnumerator$1.ctor(this.T,this.First,this.Second)}}};JsTypes.push(SharpKit$JavaScript$Private$Enumerable$ConcatEnumerator$1);System$Linq$Enumerable$SelectManyArrayIterator={fullname:"System.Linq.Enumerable.SelectManyArrayIterator",baseTypeName:"System.Linq.Enumerable.Iterator",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n,t,i,r){this.TSource=n;this.TResult=t;this.source=null;this.selector=null;this.index=0;this.innerEnumerator=null;System.Linq.Enumerable.Iterator.ctor.call(this,this.TResult);this.source=i;this.selector=r},Clone:function(){return new System.Linq.Enumerable.SelectManyArrayIterator.ctor(this.TSource,this.TResult,this.source,this.selector)},MoveNext:function(){var n,t,i;if(this.state==1){while(this.index<this.source.length||this.innerEnumerator!=null){if(this.innerEnumerator==null&&(n=this.source[this.index],this.index++,t=this.selector(n),this.innerEnumerator=t.GetEnumerator()),i=this.innerEnumerator.MoveNext(),!i){this.innerEnumerator=null;continue}return this.current=this.innerEnumerator.get_Current(),!0}this.Dispose()}return!1},Select$1:function(n,t){return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TResult,n,this,null,t)},Where:function(n){return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult,this,n)}}};JsTypes.push(System$Linq$Enumerable$SelectManyArrayIterator);typeof JsTypes=="undefined"&&(JsTypes=[]);System$Collections$ArrayList={fullname:"System.Collections.ArrayList",baseTypeName:"System.Collections.Generic.List$1",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Collections.Generic.List$1.ctor.call(this,System.Object.ctor)}}};JsTypes.push(System$Collections$ArrayList);System$Collections$Generic$Dictionary$2={fullname:"System.Collections.Generic.Dictionary$2",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IDictionary$2"],Kind:"Class",definition:{ctor:function(n,t){this.TKey=n;this.TValue=t;this._table=null;this._keys=null;this._version=0;this.Comparer=null;System.Object.ctor.call(this);this._table={};this._keys={};this._version=0},ctor$$IEqualityComparer$1:function(n,t,i){this.TKey=n;this.TValue=t;this._table=null;this._keys=null;this._version=0;this.Comparer=null;System.Object.ctor.call(this);this._table={};this._keys={};this._version=0;this.Comparer=i},GetHashKey:function(n){return this.Comparer!=null?this.Comparer.GetHashCode$$T(n):SharpKit.JavaScript.Utils.Js.GetHashKey(n)},Add:function(n,t){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("key"),new Error);if(this.ContainsKey(n))throw $CreateException(new System.ArgumentException.ctor$$String$$String$$Exception("The specified key already exists.","key",null),new Error);var i=this.GetHashKey(n);this._table[i]=t;this._keys[i]=n;this._version++},Remove:function(n){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("key"),new Error);var i=this.ContainsKey(n),t=this.GetHashKey(n);return delete this._table[t],delete this._keys[t],this._version++,i},Item$$:"`1",get_Item$$TKey:function(n){if(!this.ContainsKey(n))throw $CreateException(new System.Collections.Generic.KeyNotFoundException.ctor$$String("The specified key does not exist."),new Error);var t=this.GetHashKey(n);return this._table[t]},set_Item$$TKey:function(n,t){var i=this.GetHashKey(n);this._table[i]=t;this._keys[i]=n;this._version++},ContainsKey:function(n){var t=this.GetHashKey(n);return typeof this._table[t]!="undefined"},Keys$$:"System.Collections.Generic.ICollection`1[[`0]]",get_Keys:function(){var n=[];for(var t in this._keys)n.push(this._keys[t]);return n},Values$$:"System.Collections.Generic.ICollection`1[[`1]]",get_Values:function(){var n=[];for(var t in this._table)n.push(this._table[t]);return n},GetEnumerator:function(){var n=[];for(var t in this._table)n.push(new System.Collections.Generic.KeyValuePair$2.ctor$$TKey$$TValue(this.TKey,this.TValue,this._keys[t],this._table[t]));return n.GetEnumerator()},Clear:function(){for(var n in this._table){this._keys={};this._table={};this._version++;return}},TryGetValue:function(n,t){var r=this.GetHashKey(n),i=this._table[r];return t.Value=i,typeof i!="undefined"},Count$$:"System.Int32",get_Count:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},IsReadOnly$$:"System.Boolean",get_IsReadOnly:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);}}};JsTypes.push(System$Collections$Generic$Dictionary$2);System$Collections$Generic$HashSet$1={fullname:"System.Collections.Generic.HashSet$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.ISet$1","System.Collections.Generic.ICollection$1","System.Collections.Generic.IEnumerable$1","System.Collections.IEnumerable"],Kind:"Class",definition:{ctor:function(n){this.T=n;this.Hashtable={};this.Comparer=null;this._Count=0;System.Object.ctor.call(this)},ctor$$IEqualityComparer$1:function(n,t){this.T=n;this.Hashtable={};this.Comparer=null;this._Count=0;System.Object.ctor.call(this);this.Comparer=t},GetHashKey:function(n){return this.Comparer!=null?this.Comparer.GetHashCode$$T(n):SharpKit.JavaScript.Utils.Js.GetHashKey(n)},Add:function(n){var t=this.GetHashKey(n);return this.Hashtable[t]!=null?!1:(this.Hashtable[t]=n,this._Count++,!0)},UnionWith:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},IntersectWith:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},ExceptWith:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},SymmetricExceptWith:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},IsSubsetOf:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},IsSupersetOf:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},IsProperSupersetOf:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},IsProperSubsetOf:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Overlaps:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},SetEquals:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Count$$:"System.Int32",get_Count:function(){return this._Count},IsReadOnly$$:"System.Boolean",get_IsReadOnly:function(){return!1},Clear:function(){this.Hashtable={};this._Count=0},Contains:function(n){var t=this.GetHashKey(n);return this.Hashtable[t]===n?!0:!1},CopyTo:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Remove:function(n){var t=this.GetHashKey(n);return this.Hashtable[t]===n?(delete this.Hashtable[t],this._Count--,!0):!1},GetEnumerator:function(){var n=[];for(var t in this.Hashtable)n.push(this.Hashtable[t]);return new System.Collections.Generic.JsArrayEnumerator$1.ctor(this.T,n)}}};JsTypes.push(System$Collections$Generic$HashSet$1);System$StringComparer={fullname:"System.StringComparer",baseTypeName:"System.Object",staticDefinition:{cctor:function(){System.StringComparer._InvariantCultureIgnoreCase=null},InvariantCultureIgnoreCase$$:"SharpKit.JavaScript.Private.StringComparer",get_InvariantCultureIgnoreCase:function(){return System.StringComparer._InvariantCultureIgnoreCase==null&&(System.StringComparer._InvariantCultureIgnoreCase=new SharpKit.JavaScript.Private.StringComparer_InvariantCultureIgnoreCase.ctor),System.StringComparer._InvariantCultureIgnoreCase}},assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEqualityComparer$1"],Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$StringComparer);SharpKit$JavaScript$Private$StringComparer_InvariantCultureIgnoreCase={fullname:"SharpKit.JavaScript.Private.StringComparer_InvariantCultureIgnoreCase",baseTypeName:"System.StringComparer",staticDefinition:{cctor:function(){}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.StringComparer.ctor.call(this)},Equals$$T$$T:function(n,t){return n==t?!0:n==null||t==null?!1:n.toLowerCase()==t.toLowerCase()},GetHashCode$$T:function(n){return n==null?"null":n.toLowerCase()}}};JsTypes.push(SharpKit$JavaScript$Private$StringComparer_InvariantCultureIgnoreCase);System$Collections$Generic$KeyValuePair$2={fullname:"System.Collections.Generic.KeyValuePair$2",baseTypeName:"System.ValueType",assemblyName:"SharpKit.JsClr",Kind:"Struct",definition:{ctor$$TKey$$TValue:function(n,t,i,r){this.TKey=n;this.TValue=t;this._Key=null;this._Value=null;System.ValueType.ctor.call(this);this._Key=i;this._Value=r},Key$$:"`0",get_Key:function(){return this._Key},Value$$:"`1",get_Value:function(){return this._Value},ctor:function(n,t){this.TKey=n;this.TValue=t;this._Key=null;this._Value=null;System.ValueType.ctor.call(this)}}};JsTypes.push(System$Collections$Generic$KeyValuePair$2);System$Collections$Generic$List$1={fullname:"System.Collections.Generic.List$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IList$1","System.Collections.IList"],Kind:"Class",definition:{ctor:function(n){this.T=n;this._list=null;System.Object.ctor.call(this);this._list=[]},ctor$$IEnumerable$1:function(n,t){this.T=n;this._list=null;System.Object.ctor.call(this);this._list=[];this.AddRange(t)},ctor$$Int32:function(n){this.T=n;this._list=null;System.Object.ctor.call(this);this._list=[]},RemoveRange:function(n,t){this._list.splice(n,t)},Clear:function(){this._list.Clear()},Item$$:"`0",get_Item$$Int32:function(n){if(n>=this._list.length||n<0)throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index"),new Error);return this._list[n]},set_Item$$Int32:function(n,t){if(n>=this._list.length||n<0)throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index"),new Error);this._list[n]=t},Count$$:"System.Int32",get_Count:function(){return this._list.length},GetEnumerator:function(){return new System.Collections.IListEnumerator$1.ctor(this.T,this)},ToArray:function(){for(var t=this.get_Count(),i=new Array(t),n=0;n<t;n++)i[n]=this.get_Item$$Int32(n);return i},AddRange:function(n){for(var t=n.GetEnumerator(),i;t.MoveNext();)i=t.get_Current(),this.Add(i)},Add:function(n){this._list.push(n)},Remove:function(n){var t=this._list.indexOf(n);return t==-1?!1:(this._list.RemoveAt(t),!0)},Contains:function(n){return this._list.contains(n)},SetItems:function(n){this.Clear();n!=null&&this.AddRange(n)},IndexOf:function(n){return this._list.indexOf(n)},Insert:function(n,t){this._list.insert(n,t)},RemoveAt:function(n){this._list.RemoveAt(n)},TryRemove:function(){throw $CreateException(new System.NotImplementedException.ctor$$String("TryRemove"),new Error);},CopyTo:function(){throw $CreateException(new System.NotImplementedException.ctor$$String("JsImplList$T"),new Error);},IsReadOnly$$:"System.Boolean",get_IsReadOnly:function(){throw $CreateException(new System.NotImplementedException.ctor$$String("JsImplList$T"),new Error);},Reverse:function(){this._list.reverse()},Sort:function(){System.Array.Sort$1$$T$Array(this.T,this._list)},Sort$$Comparison$1:function(n){this._list.sort(n)},ForEach:function(n){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("action"),new Error);for(var t=0;t<this._list.length;t++)n(this._list[t])}}};JsTypes.push(System$Collections$Generic$List$1);System$Collections$Generic$Queue$1={fullname:"System.Collections.Generic.Queue$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerable$1","System.Collections.ICollection"],Kind:"Class",definition:{ctor:function(n){this.T=n;this._list=null;System.Object.ctor.call(this);this._list=[]},ctor$$Int32:function(n,t){this.T=n;this._list=null;System.Object.ctor.call(this);this._list=new Array(t)},ctor$$IEnumerable$1:function(n,t){var i,r;for(this.T=n,this._list=null,System.Object.ctor.call(this),i=t.GetEnumerator(),this._list=[],r=0;i.MoveNext();)this._list[r++]=i.get_Current()},Clear:function(){this._list.Clear()},Count$$:"System.Int32",get_Count:function(){return this._list.length},GetEnumerator:function(){return this._list.GetEnumerator()},ToArray:function(){return this._list.Clone()},Enqueue:function(n){this._list.push(n)},Dequeue:function(){if(this._list.length==0)throw $CreateException(new Error("Cannot dequeue - queue is empty"),new Error);var n=this._list[0];return this._list.RemoveAt(0),n},Peek:function(){if(this._list.length==0)throw $CreateException(new Error("Cannot peek in queue - queue is empty"),new Error);return this._list[0]},Contains:function(n){return this._list.contains(n)}}};JsTypes.push(System$Collections$Generic$Queue$1);System$Collections$Generic$Stack$1={fullname:"System.Collections.Generic.Stack$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerable$1","System.Collections.ICollection"],Kind:"Class",definition:{ctor:function(n){this.T=n;this._list=null;System.Object.ctor.call(this);this._list=[]},ctor$$Int32:function(n,t){this.T=n;this._list=null;System.Object.ctor.call(this);this._list=new Array(t)},ctor$$IEnumerable$1:function(n,t){var i,r;for(this.T=n,this._list=null,System.Object.ctor.call(this),i=t.GetEnumerator(),this._list=[],r=0;i.MoveNext();)this._list[r++]=i.get_Current()},Count$$:"System.Int32",get_Count:function(){return this._list.length},Clear:function(){this._list.Clear()},ToArray:function(){return this._list.Clone()},Push:function(n){this._list.push(n)},Pop:function(){if(this._list.length==0)throw $CreateException(new Error("Cannot pop from stack - stack is empty"),new Error);return this._list.pop()},Peek:function(){if(this._list.length==0)throw $CreateException(new Error("Cannot peek in stack - stack is empty"),new Error);return this._list[this._list.length-1]},Contains:function(n){return this._list.contains(n)},GetEnumerator:function(){return this._list.GetEnumerator()}}};JsTypes.push(System$Collections$Generic$Stack$1);System$Collections$Generic$JsArrayEnumerator$1={fullname:"System.Collections.Generic.JsArrayEnumerator$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerator$1"],Kind:"Class",definition:{ctor:function(n,t){this.T=n;this.List=null;this.Index=0;this.ListCount=0;System.Object.ctor.call(this);this.List=t;this.Index=-1;this.ListCount=t.length},Current$$:"`0",get_Current:function(){return this.List[this.Index]},Dispose:function(){this.List=null},MoveNext:function(){return this.Index++,this.Index<this.ListCount},Reset:function(){this.Index=-1}}};JsTypes.push(System$Collections$Generic$JsArrayEnumerator$1);System$Collections$ObjectModel$Collection$1={fullname:"System.Collections.ObjectModel.Collection$1",baseTypeName:"System.Object",staticDefinition:{ConvertItem:function(n){if(System.Collections.ObjectModel.Collection$1.IsValidItem(n))return Cast(n,this.T);throw $CreateException(new System.ArgumentException.ctor$$String("item"),new Error);},CheckWritable:function(n){if(n.get_IsReadOnly())throw $CreateException(new System.NotSupportedException.ctor,new Error);},IsSynchronized:function(n){var t=As(n,System.Collections.ICollection.ctor);return t!=null?t.get_IsSynchronized():!1},IsFixedSize:function(n){var t=As(n,System.Collections.IList.ctor);return t!=null?t.get_IsFixedSize():!1},IsValidItem:function(n){return Is(n,this.T)||n==null&&!Typeof(this.T).get_IsValueType()}},assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IList$1","System.Collections.IList"],Kind:"Class",definition:{ctor:function(n){this.T=n;this.items=null;this.syncRoot=null;System.Object.ctor.call(this);var t=new System.Collections.Generic.List$1.ctor(this.T),i=As(t,System.Collections.IList.ctor);this.items=t},ctor$$IList$1:function(n,t){if(this.T=n,this.items=null,this.syncRoot=null,System.Object.ctor.call(this),t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("items"),new Error);this.items=t;var i=As(t,System.Collections.ICollection.ctor)},Add:function(n){var t=this.items.get_Count();this.InsertItem(t,n)},Clear:function(){this.ClearItems()},ClearItems:function(){this.items.Clear()},Contains:function(n){return this.items.Contains(n)},CopyTo:function(n,t){this.items.CopyTo(n,t)},GetEnumerator:function(){return this.items.GetEnumerator()},IndexOf:function(n){return this.items.IndexOf(n)},Insert:function(n,t){this.InsertItem(n,t)},InsertItem:function(n,t){this.items.Insert(n,t)},Items$$:"System.Collections.Generic.IList`1[[`0]]",get_Items:function(){return this.items},Remove:function(n){var t=this.IndexOf(n);return t==-1?!1:(this.RemoveItem(t),!0)},RemoveAt:function(n){this.RemoveItem(n)},RemoveItem:function(n){this.items.RemoveAt(n)},Count$$:"System.Int32",get_Count:function(){return this.items.get_Count()},Item$$:"`0",get_Item$$Int32:function(n){return this.items.get_Item$$Int32(n)},set_Item$$Int32:function(n,t){this.SetItem(n,t)},SetItem:function(n,t){this.items.set_Item$$Int32(n,t)}}};JsTypes.push(System$Collections$ObjectModel$Collection$1);System$Collections$ObjectModel$ObservableCollection$1={fullname:"System.Collections.ObjectModel.ObservableCollection$1",baseTypeName:"System.Collections.ObjectModel.Collection$1",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Specialized.INotifyCollectionChanged","System.ComponentModel.INotifyPropertyChanged"],Kind:"Class",definition:{ctor:function(n){this.T=n;this.reentrant=new System.Collections.ObjectModel.ObservableCollection$1.Reentrant.ctor(this.T);this.CollectionChanged=null;this.PropertyChanged=null;this.PropertyChanged=null;System.Collections.ObjectModel.Collection$1.ctor.call(this,this.T)},ctor$$IEnumerable$1:function(n,t){var i,r;if(this.T=n,this.reentrant=new System.Collections.ObjectModel.ObservableCollection$1.Reentrant.ctor(this.T),this.CollectionChanged=null,this.PropertyChanged=null,this.PropertyChanged=null,System.Collections.ObjectModel.Collection$1.ctor.call(this,this.T),t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("collection"),new Error);for(i=t.GetEnumerator();i.MoveNext();)r=i.get_Current(),this.Add(r)},ctor$$List$1:function(n,t){this.T=n;this.reentrant=new System.Collections.ObjectModel.ObservableCollection$1.Reentrant.ctor(this.T);this.CollectionChanged=null;this.PropertyChanged=null;this.PropertyChanged=null;System.Collections.ObjectModel.Collection$1.ctor$$IList$1.call(this,this.T,t!=null?new System.Collections.Generic.List$1.ctor$$IEnumerable$1(this.T,t):null)},add_CollectionChanged:function(n){this.CollectionChanged=$CombineDelegates(this.CollectionChanged,n)},remove_CollectionChanged:function(n){this.CollectionChanged=$RemoveDelegate(this.CollectionChanged,n)},add_PropertyChanged:function(n){this.PropertyChanged=$CombineDelegates(this.PropertyChanged,n)},remove_PropertyChanged:function(n){this.PropertyChanged=$RemoveDelegate(this.PropertyChanged,n)},BlockReentrancy:function(){return this.reentrant.Enter(),this.reentrant},CheckReentrancy:function(){var n=this.CollectionChanged;if(this.reentrant.get_Busy()&&n!=null&&n.GetInvocationList().length>1)throw $CreateException(new System.InvalidOperationException.ctor$$String("Cannot modify the collection while reentrancy is blocked."),new Error);},ClearItems:function(){this.CheckReentrancy();System.Collections.ObjectModel.Collection$1.commonPrototype.ClearItems.call(this);this.OnCollectionChanged(new System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction(4));this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs.ctor("Count"));this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs.ctor("Item[]"))},InsertItem:function(n,t){this.CheckReentrancy();System.Collections.ObjectModel.Collection$1.commonPrototype.InsertItem.call(this,n,t);this.OnCollectionChanged(new System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$Object$$Int32(0,t,n));this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs.ctor("Count"));this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs.ctor("Item[]"))},Move:function(n,t){this.MoveItem(n,t)},MoveItem:function(n,t){this.CheckReentrancy();var i=this.get_Items().get_Item$$Int32(n);System.Collections.ObjectModel.Collection$1.commonPrototype.RemoveItem.call(this,n);System.Collections.ObjectModel.Collection$1.commonPrototype.InsertItem.call(this,t,i);this.OnCollectionChanged(new System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$Object$$Int32$$Int32(3,i,t,n));this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs.ctor("Item[]"))},OnCollectionChanged:function(n){var t=this.CollectionChanged,i;if(t!=null){i=this.BlockReentrancy();try{t(this,n)}finally{i.Dispose()}}},OnPropertyChanged:function(n){var t=this.PropertyChanged;t!=null&&t(this,n)},RemoveItem:function(n){this.CheckReentrancy();var t=this.get_Items().get_Item$$Int32(n);System.Collections.ObjectModel.Collection$1.commonPrototype.RemoveItem.call(this,n);this.OnCollectionChanged(new System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$Object$$Int32(1,t,n));this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs.ctor("Count"));this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs.ctor("Item[]"))},SetItem:function(n,t){this.CheckReentrancy();var i=this.get_Items().get_Item$$Int32(n);System.Collections.ObjectModel.Collection$1.commonPrototype.SetItem.call(this,n,t);this.OnCollectionChanged(new System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$Object$$Object$$Int32(2,t,i,n));this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs.ctor("Item[]"))}}};JsTypes.push(System$Collections$ObjectModel$ObservableCollection$1);System$Collections$ObjectModel$ReadOnlyCollection$1={fullname:"System.Collections.ObjectModel.ReadOnlyCollection$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.ICollection$1","System.Collections.Generic.IList$1","System.Collections.Generic.IEnumerable$1","System.Collections.ICollection","System.Collections.IEnumerable","System.Collections.IList"],Kind:"Class",definition:{ctor:function(n,t){if(this.T=n,this.list=null,System.Object.ctor.call(this),t==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("list"),new Error);this.list=t},Contains:function(n){return this.list.Contains(n)},CopyTo:function(n,t){this.list.CopyTo(n,t)},GetEnumerator:function(){return this.list.GetEnumerator()},IndexOf:function(n){return this.list.IndexOf(n)},Count$$:"System.Int32",get_Count:function(){return this.list.get_Count()},Items$$:"System.Collections.Generic.IList`1[[`0]]",get_Items:function(){return this.list},Item$$:"`0",get_Item$$Int32:function(n){return this.list.get_Item$$Int32(n)}}};JsTypes.push(System$Collections$ObjectModel$ReadOnlyCollection$1);System$Collections$ObjectModel$ReadOnlyObservableCollection$1={fullname:"System.Collections.ObjectModel.ReadOnlyObservableCollection$1",baseTypeName:"System.Collections.ObjectModel.ReadOnlyCollection$1",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Specialized.INotifyCollectionChanged","System.ComponentModel.INotifyPropertyChanged"],Kind:"Class",definition:{ctor:function(n,t){this.T=n;this.CollectionChanged=null;this.PropertyChanged=null;this.CollectionChanged=null;this.PropertyChanged=null;System.Collections.ObjectModel.ReadOnlyCollection$1.ctor.call(this,this.T,t);t.add_PropertyChanged($CreateDelegate(this,this.SourceCollection_PropertyChanged));t.add_CollectionChanged($CreateDelegate(this,this.SourceCollection_CollectionChanged))},add_CollectionChanged:function(n){this.CollectionChanged=$CombineDelegates(this.CollectionChanged,n)},remove_CollectionChanged:function(n){this.CollectionChanged=$RemoveDelegate(this.CollectionChanged,n)},add_PropertyChanged:function(n){this.PropertyChanged=$CombineDelegates(this.PropertyChanged,n)},remove_PropertyChanged:function(n){this.PropertyChanged=$RemoveDelegate(this.PropertyChanged,n)},OnCollectionChanged:function(n){var t=this.CollectionChanged;t!=null&&t(this,n)},OnPropertyChanged:function(n){var t=this.PropertyChanged;t!=null&&t(this,n)},SourceCollection_CollectionChanged:function(n,t){this.OnCollectionChanged(t)},SourceCollection_PropertyChanged:function(n,t){this.OnPropertyChanged(t)}}};JsTypes.push(System$Collections$ObjectModel$ReadOnlyObservableCollection$1);System$Collections$IListEnumerator$1={fullname:"System.Collections.IListEnumerator$1",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.Collections.Generic.IEnumerator$1"],Kind:"Class",definition:{ctor:function(n,t){this.T=n;this.List=null;this.Index=0;this.ListCount=0;System.Object.ctor.call(this);this.List=t;this.Index=-1;this.ListCount=t.get_Count()},Current$$:"`0",get_Current:function(){return this.List.get_Item$$Int32(this.Index)},Dispose:function(){this.List=null},MoveNext:function(){return this.Index++,this.Index<this.ListCount},Reset:function(){this.Index=-1}}};JsTypes.push(System$Collections$IListEnumerator$1);System$Collections$ObjectModel$ObservableCollection$1$Reentrant={fullname:"System.Collections.ObjectModel.ObservableCollection$1.Reentrant",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",interfaceNames:["System.IDisposable"],Kind:"Class",definition:{ctor:function(n){this.T=n;this.count=0;System.Object.ctor.call(this)},Enter:function(){this.count++},Dispose:function(){this.count--},Busy$$:"System.Boolean",get_Busy:function(){return this.count>0}}};JsTypes.push(System$Collections$ObjectModel$ObservableCollection$1$Reentrant);typeof JsTypes=="undefined"&&(JsTypes=[]);System$Reflection$BindingFlags={fullname:"System.Reflection.BindingFlags",staticDefinition:{CreateInstance:512,DeclaredOnly:2,Default:0,ExactBinding:65536,FlattenHierarchy:64,GetField:1024,GetProperty:4096,IgnoreCase:1,IgnoreReturn:16777216,Instance:4,InvokeMethod:256,NonPublic:32,OptionalParamBinding:262144,Public:16,PutDispProperty:16384,PutRefDispProperty:32768,SetField:2048,SetProperty:8192,Static:8,SuppressChangeType:131072},Kind:"Enum"};JsTypes.push(System$Reflection$BindingFlags);System$Reflection$MemberInfo={fullname:"System.Reflection.MemberInfo",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this._Name=null;this._DeclaringType=null;this._CustomAttributes=null;System.Object.ctor.call(this)},Name$$:"System.String",get_Name:function(){return this._Name},DeclaringType$$:"SharpKit.JavaScript.Private.JsImplType",get_DeclaringType:function(){return this._DeclaringType},VerifyCustomAttributes:function(){this.get_DeclaringType().VerifyCustomAttributesOnTypeAndMembers()},GetBaseMember:function(){return null},AddCustomAttributes:function(n,t,i){var r,u,f;if(this.VerifyCustomAttributes(),this._CustomAttributes!=null)for(r=0;r<this._CustomAttributes.length;r++)u=this._CustomAttributes[r],t.IsInstanceOfType(u)&&n.Add(u);i&&(f=this.GetBaseMember(),f!=null&&f.AddCustomAttributes(n,t,i))},GetCustomAttributes$$Type$$Boolean:function(n,t){var i=new System.Collections.Generic.List$1.ctor(System.Object.ctor);return this.AddCustomAttributes(i,n,t),i.ToArray()},GetCustomAttributes$$Boolean:function(n){if(n)throw $CreateException(new System.NotImplementedException.ctor$$String("GetCustomAttributes with inherit=true is not implemented"),new Error);return this.VerifyCustomAttributes(),this._CustomAttributes}}};JsTypes.push(System$Reflection$MemberInfo);System$Reflection$MethodBase={fullname:"System.Reflection.MethodBase",baseTypeName:"System.Reflection.MemberInfo",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Reflection.MemberInfo.ctor.call(this)}}};JsTypes.push(System$Reflection$MethodBase);System$Reflection$MethodInfo={fullname:"System.Reflection.MethodInfo",baseTypeName:"System.Reflection.MethodBase",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this._IsStatic=!1;this.JsFunction=null;this.JsName=null;System.Reflection.MethodBase.ctor.call(this)},IsStatic$$:"System.Boolean",get_IsStatic:function(){return this._IsStatic},Invoke:function(n,t){var i;if(this._IsStatic)i=this.JsFunction;else{if(n==null)throw $CreateException(new System.Exception.ctor$$String("Cannot invoke non static method without a target object"),new Error);i=n[this.JsName]}return t==null?i.apply(n):i.apply(n,t)}}};JsTypes.push(System$Reflection$MethodInfo);System$Reflection$PropertyInfo={fullname:"System.Reflection.PropertyInfo",baseTypeName:"System.Reflection.MemberInfo",staticDefinition:{op_Equality:function(n,t){return n==t},op_Inequality:function(n,t){return n!=t}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this._PropertyType=null;this._IsStatic=!1;this._Getter=null;this._Setter=null;System.Reflection.MemberInfo.ctor.call(this)},GetBaseMember:function(){return null},GetValue$$Object$$Object$Array:function(n,t){if(this._Getter==null)throw $CreateException(new System.Exception.ctor$$String("Property "+this._Name+" doesn\'t have a getter"),new Error);return this._Getter.apply(n,t!=null?t:[])},GetValue$$Object:function(n){return this.GetValue$$Object$$Object$Array(n,null)},GetValue$$Object$$BindingFlags$$Binder$$Object$Array$$CultureInfo:function(n,t,i,r){return this.GetValue$$Object$$Object$Array(n,r)},SetValue$$Object$$Object$$Object$Array:function(n,t,i){if(this._Setter==null)throw $CreateException(new System.Exception.ctor$$String("Property "+this._Name+" doesn\'t have a setter"),new Error);if(i==null||i.length==0)this._Setter.call(n,t);else{var r=new Array(i);r.push(t);this._Setter.apply(n,i!=null?i:[])}},SetValue$$Object$$Object:function(n,t){this.SetValue$$Object$$Object$$Object$Array(n,t,null)},SetValue$$Object$$Object$$BindingFlags$$Binder$$Object$Array$$CultureInfo:function(n,t,i,r,u){this.SetValue$$Object$$Object$$Object$Array(n,t,u)},Name$$:"System.String",get_Name:function(){return this._Name},PropertyType$$:"SharpKit.JavaScript.Private.JsImplType",get_PropertyType:function(){return this._PropertyType}}};JsTypes.push(System$Reflection$PropertyInfo);System$Type={fullname:"System.Type",baseTypeName:"System.Reflection.MemberInfo",staticDefinition:{cctor:function(){System.Type.EmptyTypes=null},_TypeOf:function(n){if(n==null)throw $CreateException(new System.Exception.ctor$$String("Cannot resovle type"),new Error);return n._ClrType==null&&(n._ClrType=new System.Type.ctor(n)),n._ClrType},GetType$$String:function(n){return System.Type.GetType$$String$$Boolean(n,!1)},GetType$$String$$Boolean:function(n,t){var u,e,i,r,f;if(JsTypeHelper._HasTypeArguments(n)){if(u=JsTypeHelper._GetTypeWithArguments(n,t),u==null)return null;for(e=System.Type._TypeOf(u[0]),i=u[1],r=0;r<i.length;r++)i[r]=System.Type._TypeOf(i[r]);return e._MakeGenericType(i)}if(f=JsTypeHelper.GetType(n),f==null){if(t)throw $CreateException(new System.Exception.ctor$$String("Type "+n+" was not found"),new Error);return null}return System.Type._TypeOf(f)},GetType$$String$$Boolean$$Boolean:function(n,t,i){if(i)throw $CreateException(new System.NotImplementedException.ctor,new Error);return System.Type.GetType$$String$$Boolean(n,t)}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(n){this._JsType=null;this.allPropertiesVerified=!1;this._PropertiesByName=null;this._Properties=null;this._MethodsByName=null;this._Methods=null;this.verifiedCustomAttributesOnTypeAndMembers=!1;this._GenericTypeDefinition=null;this._TypeArguments=null;this._MakeGenericTypeCache=null;System.Reflection.MemberInfo.ctor.call(this);this._JsType=n;this._Name=this._JsType.name;System.Type.EmptyTypes==null&&(System.Type.EmptyTypes=new Array(0))},IsEnum$$:"System.Boolean",get_IsEnum:function(){return this._JsType.Kind=="Enum"},GetBaseMember:function(){return this.get_BaseType()},BaseType$$:"SharpKit.JavaScript.Private.JsImplType",get_BaseType:function(){return this._JsType.baseType==null?null:System.Type._TypeOf(this._JsType.baseType)},FillProperties:function(n){var t,r,i;for(t in n)r=t.startsWith("get_"),i=t.startsWith("set_"),(r||i)&&this.FillProperty(n,t,i)},FillProperty:function(n,t,i){var o=n[t],e=o,u=t.substr(4),r=this._PropertiesByName[u],f;System.Reflection.PropertyInfo.op_Equality(r,null)&&(r=new System.Reflection.PropertyInfo.ctor,this._PropertiesByName[u]=r,this._Properties.push(r),r._Name=u,r._DeclaringType=this,r._IsStatic=this._JsType.staticDefinition!=null&&this._JsType.staticDefinition[t]!=null,f=JsTypeHelper.getMemberTypeName(n,u),f!=null&&(r._PropertyType=System.Type.GetType$$String(f)));i?r._Setter=e:r._Getter=e},TryFillProperty:function(n,t){if(n==null)return!1;var i="get_"+t,r="set_"+t;return n.hasOwnProperty(i)&&this.FillProperty(n,i,!1),n.hasOwnProperty(r)&&this.FillProperty(n,r,!0),this._PropertiesByName[t]!=null},GetProperty$$String:function(n){return this.VerifyProperty(n),this._PropertiesByName[n]},GetProperty$$String$$BindingFlags:function(n){if(n==null)throw $CreateException(new System.ArgumentNullException.ctor$$String("name"),new Error);return this.GetProperty$$String(n)},GetProperty$$String$$Type:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},VerifyProperty:function(n){var i,t;if((this._PropertiesByName==null&&(this._PropertiesByName={},this._Properties=[]),!this._PropertiesByName.hasOwnProperty(n))&&!this.TryFillProperty(this._JsType.definition,n)&&!this.TryFillProperty(this._JsType.staticDefinition,n)){if(i=this.get_BaseType(),i!=null&&(t=i.GetProperty$$String(n),System.Reflection.PropertyInfo.op_Inequality(t,null))){this._PropertiesByName[n]=t;this._Properties.push(t);return}this._PropertiesByName[n]=null}},VerifyProperties:function(){var r,t;if(!this.allPropertiesVerified&&(this.allPropertiesVerified=!0,this._PropertiesByName==null&&(this._PropertiesByName={},this._Properties=[]),this.FillProperties(this._JsType.definition),this.FillProperties(this._JsType.staticDefinition),r=this.get_BaseType(),r!=null)){t=r.GetProperties();for(var i=0,u=t.length,n=t[i];i<u;i++,n=t[i])this._PropertiesByName.hasOwnProperty(n._Name)||(this._PropertiesByName[n._Name]=n,this._Properties.push(n))}},GetProperties:function(){return this.VerifyProperties(),this._Properties},FillMethods:function(n){var e=n==this._JsType.staticDefinition,i,u,f,r,t;for(i in n)i!="toString"&&(u=n[i],SharpKit.JavaScript.Utils.Js.Typeof(u)=="function")&&(f=SharpKit.JavaScript.JsNamingHelper.JsFunctionNameToClrMethodName(i),r=this._MethodsByName[f],r==null&&(r=[],this._MethodsByName[f]=r),t=new System.Reflection.MethodInfo.ctor,r.push(t),this._Methods.push(t),t._Name=f,t.JsName=i,t.JsFunction=u,t._DeclaringType=this,t._IsStatic=this._JsType.staticDefinition!=null&&this._JsType.staticDefinition[i]==u)},GetMethod:function(n){this.VerifyMethods();var t=this._MethodsByName[n];return t==null?null:t[0]},VerifyMethods:function(){var u,i,t;if(this._MethodsByName==null&&(this._MethodsByName={},this._Methods=[],this.FillMethods(this._JsType.definition),this.FillMethods(this._JsType.staticDefinition),u=this.get_BaseType(),u!=null)){i=u.GetMethods();for(var r=0,f=i.length,n=i[r];r<f;r++,n=i[r])this._JsType.definition!=null&&this._JsType.definition.hasOwnProperty(n.JsName)||this._JsType.staticDefinition!=null&&this._JsType.staticDefinition.hasOwnProperty(n.JsName)||(t=this._MethodsByName[n._Name],t==null&&(t=[],this._MethodsByName[n._Name]=t),t.push(n),this._Methods.push(n))}},GetMethods:function(){var t,n;for(this.VerifyMethods(),t=[],n=0;n<this._Methods.length;n++)t.push(this._Methods[n]);return t},GetMethods$$String:function(n){return this.VerifyMethods(),this._MethodsByName[n]},GetMethods$$BindingFlags:function(){return this.GetMethods()},VerifyCustomAttributes:function(){this.VerifyCustomAttributesOnTypeAndMembers()},Name$$:"System.String",get_Name:function(){return JsTypeHelper.GetName(this._JsType)},FullName$$:"System.String",get_FullName:function(){return this._JsType.fullname},AssemblyQualifiedName$$:"System.String",get_AssemblyQualifiedName:function(){return JsTypeHelper.GetAssemblyQualifiedName(this._JsType)},VerifyCustomAttributesOnTypeAndMembers:function(){var i,f,t,r;if(!this.verifiedCustomAttributesOnTypeAndMembers&&(this.verifiedCustomAttributesOnTypeAndMembers=!0,this._JsType.customAttributes!=null))for(i=0;i<this._JsType.customAttributes.length;i++){var n=this._JsType.customAttributes[i],e=JsTypeHelper.GetType(n.typeName),o=e[n.ctorName],u=SharpKit.JavaScript.Utils.Js.ApplyNew(o,n.positionalArguments);if(n.namedArguments!=null)for(f in n.namedArguments)t=n.namedArguments[f],SharpKit.JavaScript.Utils.Js.Typeof(t)=="function"&&(t=t.call(null)),u["set_"+f].call(u,t);r=this.GetAttributeTarget(n.targetType,n.targetMemberName);r._CustomAttributes==null&&(r._CustomAttributes=[]);r._CustomAttributes.push(u)}},GetAttributeTarget:function(n,t){var f,i;if(n=="type")return this;if(n=="method"){f=SharpKit.JavaScript.JsNamingHelper.JsFunctionNameToClrMethodName(t);i=this.GetMethods$$String(f);for(var r=0,e=i.length,u=i[r];r<e;r++,u=i[r])if(u.JsName==t)return u;return null}if(n=="property")return this.GetProperty$$String(t);throw $CreateException(new System.NotImplementedException.ctor$$String("GetAttributeTarget not supported yet for memberType: "+n),new Error);},IsAssignableFrom:function(n){return TypeIs(n._JsType,this._JsType)},IsInstanceOfType:function(n){return Is(n,this._JsType)},toString:function(){return System.String.Format$$String$$Object$Array("{Name = "+this.get_Name()+" FullName = "+this.get_FullName()+"}",new Array(0))},MakeGenericType:function(){for(var t=[],n=0;n<arguments.length;n++)t.push(arguments[n]||null);return this._MakeGenericType(t)},GetGenericTypeDefinition:function(){return this._GenericTypeDefinition},GetGenericArguments:function(){return this._TypeArguments==null?System.Type.EmptyTypes:this._TypeArguments},_MakeGenericType:function(n){var i,r,u,t;for(this._MakeGenericTypeCache==null&&(this._MakeGenericTypeCache={}),i="",r=0;r<n.length;r++)u=n[r],i+=u._Name;return t=this._MakeGenericTypeCache[i],t==null&&(t=new System.Type.ctor(this._JsType),this._MakeGenericTypeCache[i]=t,t._Name=this._Name,t._GenericTypeDefinition=this,t._TypeArguments=n,t._Properties=this._Properties,t._PropertiesByName=this._PropertiesByName,t._Methods=this._Methods,t._MethodsByName=this._MethodsByName,t._DeclaringType=this._DeclaringType,t._CustomAttributes=this._CustomAttributes),t}}};JsTypes.push(System$Type);typeof JsTypes=="undefined"&&(JsTypes=[]);System$Diagnostics$Debugger={fullname:"System.Diagnostics.Debugger",baseTypeName:"System.Object",staticDefinition:{Break:function(){}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Diagnostics$Debugger);System$Diagnostics$Trace={fullname:"System.Diagnostics.Trace",baseTypeName:"System.Object",staticDefinition:{cctor:function(){System.Diagnostics.Trace.Warnings=null;System.Diagnostics.Trace.Enabled=!1},TraceWarning$$String:function(n){System.Diagnostics.Trace.Enabled&&(System.Diagnostics.Trace.Warnings==null&&(System.Diagnostics.Trace.Warnings=new System.Collections.Generic.List$1.ctor(System.String.ctor)),System.Diagnostics.Trace.Warnings.Add(n))},TraceWarning$$String$$Object$Array:function(n,t){System.Diagnostics.Trace.Enabled&&System.Diagnostics.Trace.TraceWarning$$String(System.String.Format$$String$$Object$Array(n,t))}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Diagnostics$Trace);typeof JsTypes=="undefined"&&(JsTypes=[]);System$ComponentModel$ListSortDirection={fullname:"System.ComponentModel.ListSortDirection",staticDefinition:{Ascending:0,Descending:1},Kind:"Enum"};JsTypes.push(System$ComponentModel$ListSortDirection);System$Math={fullname:"System.Math",baseTypeName:"System.Object",staticDefinition:{cctor:function(){System.Math.PI=Math.PI},Abs$$Number:function(n){return Math.abs(n)},Abs$$Double:function(n){return Math.abs(n)},Abs$$Int32:function(n){return Math.abs(n)},Abs$$Int64:function(n){return Math.abs(n)},Abs$$Single:function(n){return Math.abs(n)},AbsHelper$$Int16:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},AbsHelper$$Int32:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},AbsHelper$$Int64:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},AbsHelper$$SByte:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Acos:function(n){return Math.acos(n)},Asin:function(n){return Math.asin(n)},Atan:function(n){return Math.atan(n)},Atan2:function(n,t){return Math.atan2(n,t)},BigMul:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Ceiling$$Decimal:function(n){return Math.ceil(n)},Ceiling$$Double:function(n){return Math.ceil(n)},Cos:function(n){return Math.cos(n)},Cosh:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Exp:function(n){return Math.exp(n)},Floor$$Decimal:function(n){return Math.floor(n)},Floor$$Double:function(n){return Math.floor(n)},IEEERemainder:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},InternalRound:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},InternalTruncate:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Log$$Double:function(n){return Math.log(n)},Log$$Double$$Double:function(n,t){return Math.log(n)/Math.log(t)},Log10:function(n){return Math.log(n)/Math.LN10},Max$$Decimal$$Decimal:function(n,t){return Math.max(n,t)},Max$$Double$$Double:function(n,t){return Math.max(n,t)},Max$$Int32$$Int32:function(n,t){return Math.max(n,t)},Max$$Int64$$Int64:function(n,t){return Math.max(n,t)},Max$$SByte$$SByte:function(n,t){return Math.max(n,t)},Max$$Single$$Single:function(n,t){return Math.max(n,t)},Max$$UInt32$$UInt32:function(n,t){return Math.max(n,t)},Max$$UInt64$$UInt64:function(n,t){return Math.max(n,t)},Min$$Decimal$$Decimal:function(n,t){return Math.min(n,t)},Min$$Double$$Double:function(n,t){return Math.min(n,t)},Min$$Int32$$Int32:function(n,t){return Math.min(n,t)},Min$$Int64$$Int64:function(n,t){return Math.min(n,t)},Min$$SByte$$SByte:function(n,t){return Math.min(n,t)},Min$$Single$$Single:function(n,t){return Math.min(n,t)},Min$$UInt32$$UInt32:function(n,t){return Math.min(n,t)},Min$$UInt64$$UInt64:function(n,t){return Math.min(n,t)},Pow:function(n,t){return Math.pow(n,t)},Round$$Decimal:function(n){return Math.round(n)},Round$$Double:function(n){return Math.round(n)},Round$$Decimal$$Int32:function(n,t){var i=Math.pow(10,t);return Math.round(n*i)/i},Round$$Decimal$$MidpointRounding:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Round$$Double$$Int32:function(n,t){var i=Math.pow(10,t);return Math.round(n*i)/i},Round$$Double$$MidpointRounding:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Round$$Decimal$$Int32$$MidpointRounding:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Round$$Double$$Int32$$MidpointRounding:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Sign$$Decimal:function(n){if(n<0)return-1;if(n>0)return 1;if(n==0)return 0;throw $CreateException(new System.ArgumentException.ctor$$String("value"),new Error);},Sign$$Double:function(n){if(n<0)return-1;if(n>0)return 1;if(n==0)return 0;throw $CreateException(new System.ArgumentException.ctor$$String("value"),new Error);},Sign$$Int16:function(n){if(n<0)return-1;if(n>0)return 1;if(n==0)return 0;throw $CreateException(new System.ArgumentException.ctor$$String("value"),new Error);},Sign$$Int32:function(n){if(n<0)return-1;if(n>0)return 1;if(n==0)return 0;throw $CreateException(new System.ArgumentException.ctor$$String("value"),new Error);},Sign$$Int64:function(n){if(n<0)return-1;if(n>0)return 1;if(n==0)return 0;throw $CreateException(new System.ArgumentException.ctor$$String("value"),new Error);},Sign$$SByte:function(n){if(n<0)return-1;if(n>0)return 1;if(n==0)return 0;throw $CreateException(new System.ArgumentException.ctor$$String("value"),new Error);},Sign$$Single:function(n){if(n<0)return-1;if(n>0)return 1;if(n==0)return 0;throw $CreateException(new System.ArgumentException.ctor$$String("value"),new Error);},Sin:function(n){return Math.sin(n)},Sinh:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Sqrt:function(n){return Math.sqrt(n)},Tan:function(n){return Math.tan(n)},Tanh:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},Truncate$$Decimal:function(n){return n|0},Truncate$$Double:function(n){return n|0}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(System$Math);typeof JsTypes=="undefined"&&(JsTypes=[]);System$Text$StringBuilder={fullname:"System.Text.StringBuilder",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this.array=null;this.length=0;System.Object.ctor.call(this);this.array=new Array(0);this.length=0},ctor$$Int32:function(){this.array=null;this.length=0;System.Object.ctor.call(this);this.array=new Array(0);this.length=0},ctor$$String:function(n){this.array=null;this.length=0;System.Object.ctor.call(this);this.array=[n];this.length=n==null?0:n.length},Append$$Char:function(n){this.array.push(n);this.length+=1},Append$$String:function(n){this.array.push(n);this.length+=n.length},AppendFormat$$String$$Object:function(n,t){var i=System.String.Format$$String$$Object(n,t);this.array.push(i);this.length+=i.length},AppendFormat$$String$$Object$$Object:function(n,t,i){var r=System.String.Format$$String$$Object$$Object(n,t,i);this.array.push(r);this.length+=r.length},AppendFormat$$String$$Object$$Object$$Object:function(n,t,i,r){var u=System.String.Format$$String$$Object$$Object$$Object(n,t,i,r);this.array.push(u);this.length+=u.length},Append$$Object:function(n){if(n!=null){var t=n.toString();this.array.push(t);this.length+=t.length}},Insert$$Int32$$Boolean:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.IndexOutOfRangeException.ctor,new Error);return this.array.insert(n,t.toString()),this},Insert$$Int32$$Byte:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Char:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Char$Array:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Decimal:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Double:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Int16:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Int32:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Int64:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Object:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$SByte:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$Single:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$String:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$UInt16:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$UInt32:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$UInt64:function(n,t){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);return this.array.insert(n,t),this},Insert$$Int32$$String$$Int32:function(n,t,i){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);for(var r=0;r<i;r++)this.array.insert(n,t);return this},Insert$$Int32$$Char$Array$$Int32:function(n,t,i){if(n<0||n>this.array.length)throw $CreateException(new System.ArgumentOutOfRangeException.ctor,new Error);for(var r=0;r<i;r++)this.array.insert(n,t);return this},toString:function(){return this.array.join("")},Length$$:"System.Int32",get_Length:function(){return this.length},set_Length:function(n){n!=this.length&&(n>this.length?this.Append$$String(new Array(n+1).join("\\0")):this.Remove(n,this.length-n))},Remove:function(n,t){var i=this.array.join("");return i=i.Remove$$Int32$$Int32(n,t),this.array=[i],this.length=i.length,this}}};JsTypes.push(System$Text$StringBuilder);typeof JsTypes=="undefined"&&(JsTypes=[]);System$Runtime$Serialization$IExtensibleDataObject={fullname:"System.Runtime.Serialization.IExtensibleDataObject",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Runtime$Serialization$IExtensibleDataObject);System$Runtime$Serialization$ISerializable={fullname:"System.Runtime.Serialization.ISerializable",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Interface"};JsTypes.push(System$Runtime$Serialization$ISerializable);SharpKit$PropertyInfoExtensions={fullname:"SharpKit.PropertyInfoExtensions",baseTypeName:"System.Object",staticDefinition:{IsStatic:function(n){return n._IsStatic},IsPublic:function(){throw new Error("Not Implemented");}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(SharpKit$PropertyInfoExtensions);SharpKit$Extensions2={fullname:"SharpKit.Extensions2",baseTypeName:"System.Object",staticDefinition:{GetValueOrDefaultIfNullOrEmpty:function(n,t){return n==null||n.length==0?t:n},IsNullOrEmpty$$String:function(n){return n==null||n.length==0},IsNotNullOrEmpty$$String:function(n){return n!=null&&n.length>0},HtmlEscape:function(n){return n.Replace$$String$$String("&","&amp;").Replace$$String$$String("<","&lt;").Replace$$String$$String(">","&gt;").Replace$$String$$String("\\n","<br/>")},ReplaceFirst$$String$$String$$String:function(n,t,i){return n.ReplaceFirst(t,i)},ReplaceFirst$$String$$String$$String$$StringComparison:function(n,t,i,r){var u=n.indexOf(t,r);return u!=-1?System.String.Concat$$String$$String$$String(n.substr(0,u),i,n.substr(t.length+u)):n},FixCamelCasing:function(n){for(var t=new System.Text.StringBuilder.ctor,r=!0,u=n.GetEnumerator(),i;u.MoveNext();)i=u.get_Current(),System.Char.IsUpper$$Char(i)&&!r&&t.Append$$Char(" "),t.Append$$Char(i),r=!1;return t.toString()},RemoveLast:function(n,t){return n.substr(n,n.length-t)},TrimEnd:function(n,t){return n.EndsWith$$String(t)?SharpKit.Extensions2.RemoveLast(n,t.length):n},EqualsIgnoreCase:function(n,t){return System.String.Compare$$String$$String$$Boolean(n,t,!0)==0}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(SharpKit$Extensions2);SharpKit$JavaScript$Utils$Js={fullname:"SharpKit.JavaScript.Utils.Js",baseTypeName:"System.Object",staticDefinition:{cctor:function(){SharpKit.JavaScript.Utils.Js.undefined=null},escape:function(n){return escape(n)},JsEquals:function(n,t){return n==t},JsExactEqualsToUndefined:function(n){return n===undefined},JsExactEquals:function(n,t){return n===t},Typeof:function(n){return typeof n},ApplyFunction:function(){throw $CreateException(new System.NotImplementedException.ctor$$String("TODO: Implement"),new Error);},CallFunction:function(){throw $CreateException(new System.NotImplementedException.ctor$$String("TODO: Implement"),new Error);},CallFunction2:function(n,t){return n[t].apply(n,Arguments.from(arguments,2))},FindOverloadedMethodName:function(n,t){t+="$$";for(var i in n)if(typeof n[i]=="function"&&i.indexOf(t)==0)return i;return null},Eval:function(n){eval(n)},Compile:function(){throw $CreateException(new System.NotImplementedException.ctor,new Error);},GetHashKey:function(n){return JsCompiler.GetHashKey(n)},DeleteMember:function(n,t){delete n[t]},parseFloat:function(n){return parseFloat(n)},parseInt:function(n){return parseInt(n)},ApplyNew:function(n,t){return t==null||t.length==0?new n:new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},IsArray:function(n){return n instanceof Array},isNaN:function(n){return isNaN(n)},decodeURIComponent:function(n){return decodeURIComponent(n)},encodeURIComponent:function(n){return encodeURIComponent(n)},encodeURI:function(n){return encodeURI(n)},decodeURI:function(n){return decodeURI(n)},unescape:function(n){return unescape(n)}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(SharpKit$JavaScript$Utils$Js);SharpKit$JsClr$Utils$JsClrClientSerializer={fullname:"SharpKit.JsClr.Utils.JsClrClientSerializer",baseTypeName:"System.Object",assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){this.ObjInfos=null;this.RefIndex=0;this.IgnoreFields=null;System.Object.ctor.call(this);this.ObjInfos=new System.Collections.Generic.Dictionary$2.ctor(System.Object.ctor,"SharpKit.JsClr.Utils.ObjInfo");this.IgnoreFields={};this.IgnoreFields._type=!0;this.IgnoreFields._hashKey=!0},Serialize:function(n){var t=this.Serialize2(n);return JSON.stringify(t)},Serialize2:function(n){if(n===undefined)return undefined;if(n===null)return null;var t=typeof n;return t=="object"?this.SerializeRefOrContent(n):t=="function"?undefined:n},SerializeRefOrContent:function(n){var t;return this.ObjInfos.ContainsKey(n)?(t=this.ObjInfos.get_Item$$TKey(n),t.Ref==null&&(this.RefIndex++,t.Ref={$r:this.RefIndex.toString(),$t:"ObjRef"},t.FirstRef.$k=t.Ref.$r),t.Ref):(t={},this.ObjInfos.Add(n,t),this.SerializeFirstRef(n,t),t.FirstRef)},SerializeFirstRef:function(n,t){var i={},e,u,o,f,s,h,r,c;if(t.FirstRef=i,e=n.GetType(),i.$t=e.get_FullName(),u=n,Is(n,System.Collections.IList.ctor))for(o=n,i.$l=[],f=o.GetEnumerator();f.MoveNext();)s=f.get_Current(),h=this.Serialize2(s),i.$l.push(h);else for(r in u)this.IgnoreFields[r]||u.hasOwnProperty(r)&&(c=u[r],i[r]=this.Serialize2(c));return i}}};JsTypes.push(SharpKit$JsClr$Utils$JsClrClientSerializer);SharpKit$JavaScript$JsNamingHelper={fullname:"SharpKit.JavaScript.JsNamingHelper",baseTypeName:"System.Object",staticDefinition:{JsFunctionNameToClrMethodName:function(n){var t=n,i=n.indexOf("$");return i>0&&(t=n.substr(0,i)),t},ClrTypeToJsTypeRef:function(n){var t=System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1(SharpKit.JavaScript.JsTypeAttribute.ctor,System.Linq.Enumerable.OfType$1(SharpKit.JavaScript.JsTypeAttribute.ctor,n.GetCustomAttributes$$Type$$Boolean(Typeof(SharpKit.JavaScript.JsTypeAttribute.ctor),!1)));return t!=null&&SharpKit.Extensions2.IsNotNullOrEmpty$$String(t.get_Name())?t.get_Name().Replace$$Char$$Char("`","$"):n.get_Namespace()+"."+n.get_Name().Replace$$Char$$Char("`","$")},ClrConstructorToJsFunctionName:function(n){var t=new System.Text.StringBuilder.ctor,i=SharpKit.JavaScript.JsNamingHelper.ClrTypeToJsTypeRef(n.get_DeclaringType());return t.Append$$String(i),t.Append$$String(".ctor"),SharpKit.JavaScript.JsNamingHelper.ConvertParametersToJsFunctionName(n.GetParameters(),t),t.toString()},ConvertParametersToJsFunctionName:function(n,t){for(var i=0,u=n.length,r=n[i];i<u;i++,r=n[i])t.Append$$String("$$"),t.Append$$String(r.get_ParameterType().get_Name())},ClrMethodBaseToJsFunctionName:function(n){if(n.get_MemberType()==1)return SharpKit.JavaScript.JsNamingHelper.ClrMethodToJsFunctionName(Cast(n,System.Reflection.MethodInfo.ctor));if(n.get_MemberType()==8)return SharpKit.JavaScript.JsNamingHelper.ClrConstructorToJsFunctionName(Cast(n,System.Reflection.ConstructorInfo.ctor));throw $CreateException(new System.NotImplementedException.ctor,new Error);},ClrMethodToJsFunctionName:function(n){var r,t,i,u;return SharpKit.JavaScript.JsNamingHelper.IsPropertySetter(n)?n.get_Name():(r=n.get_Name(),t=n.get_DeclaringType(),t.get_IsGenericType()&&(t=t.GetGenericTypeDefinition(),n=t.GetMethod$$String(r)),i=new System.Text.StringBuilder.ctor,n.get_IsStatic()&&(i.Append$$String(SharpKit.JavaScript.JsNamingHelper.ClrTypeToJsTypeRef(t)),u=System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1(SharpKit.JavaScript.JsTypeAttribute.ctor,System.Linq.Enumerable.OfType$1(SharpKit.JavaScript.JsTypeAttribute.ctor,t.GetCustomAttributes$$Type$$Boolean(Typeof(SharpKit.JavaScript.JsTypeAttribute.ctor),!1))),u==null||u.get_Mode()==2?i.Append$$String(".staticDefinition."):i.Append$$String(".")),i.Append$$String(r),SharpKit.JavaScript.JsNamingHelper.ConvertParametersToJsFunctionName(n.GetParameters(),i),i.toString())},IsPropertySetter:function(n){var t=n.get_Name();return t.StartsWith$$String("set_")&&n.GetParameters().length==1}},assemblyName:"SharpKit.JsClr",Kind:"Class",definition:{ctor:function(){System.Object.ctor.call(this)}}};JsTypes.push(SharpKit$JavaScript$JsNamingHelper);'},function(e,t,n){n(0)(n(9))},function(e,t){e.exports='/*\r\nThis file contains some additions and changes to the SharpKit library and to the SharpKit-generated code. Some of these are additions to the\r\nSharpKit implementation of the CLR types, which may involve changing the prototypes of core JS types to make them emulate the corresponding\r\n.NET core types. Others are workaround to SharpKit bugs. Many of these are required just because polymorphism causes some methods to have a\r\ndifferent name than the one defined in jsclr.js.\r\n\r\nIn order to be able to notice immediately whether one of these issues gets fixed by a SharpKit update, I\'m going to also add some simple\r\ntests which will throw an exception if something I expect not to be defined happens to be defined. This is not going to catch everything, so\r\nI\'ll need to be careful. Notably, if one of my patches replaces an existing method from jsclr.js, there\'s no automated way to know that the\r\noriginal method has been fixed.\r\n\r\nThis file was last checked against jsclr.js generated by SharpKit v5.4.1.\r\n*/\r\n\r\n/*********************\r\n* BASE TYPES CHANGES *\r\n*********************/\r\n// These are additions to the SharpKit implementation of the CLR base types, augmenting them with methods that are present in the CLR (but\r\n// not in jsclr.js).\r\n\r\n// Implementation of Boolean.CompareTo<Boolean>.\r\nif (typeof Boolean.prototype.CompareTo$$Boolean !== "undefined")\r\n    throw new Error();\r\nBoolean.prototype.CompareTo$$Boolean = function (other) {\r\n    if (this == false && other == true)\r\n        return -1;\r\n    if (this == true && other == false)\r\n        return 1;\r\n    return 0;\r\n}\r\n\r\n// This gets invoked on calls to IComparable.CompareTo, when the comparable happens to be a number.\r\nif (typeof Number.prototype.CompareTo !== "undefined")\r\n    throw new Error();\r\nNumber.prototype.CompareTo = function (other) {\r\n    if (this > other)\r\n        return 1;\r\n    else if (this < other)\r\n        return -1;\r\n    return 0;\r\n}\r\n\r\n// Implementation of CompareTo<uint> (for every numerical type).\r\nif (typeof Number.prototype.CompareTo$$UInt32 !== "undefined")\r\n    throw new Error();\r\nNumber.prototype.CompareTo$$UInt32 = Number.prototype.CompareTo;\r\n\r\n// Implementation of CompareTo<ulong> (for every numerical type).\r\nif (typeof Number.prototype.CompareTo$$UInt64 !== "undefined")\r\n    throw new Error();\r\nNumber.prototype.CompareTo$$UInt64 = Number.prototype.CompareTo;\r\n\r\n// Implementation of Int32.GetHashCode (but it should also work on other numerical types).\r\nif (typeof Number.prototype.GetHashCode !== "undefined")\r\n    throw new Error();\r\nNumber.prototype.GetHashCode = function () {\r\n    return this;\r\n}\r\n\r\n// This prevents crashes when attempting to format a number using globalization, i.e. the ToString override that takes an IFormatProvider.\r\n// Note that it will NOT actually format it correctly; this isn\'t an implementation, it\'s just to prevent crashes!\r\nif (typeof Number.prototype.ToString$$String$$IFormatProvider !== "undefined")\r\n    throw new Error();\r\nNumber.prototype.ToString$$String$$IFormatProvider = function (s, fp) {\r\n    return this.toString();\r\n}\r\n\r\n// Conceptually similar to the above, this is the String.Format override that takes an IFormatProvider. Without this, attempts to call\r\n// that would crash as jsclr doesn\'t implement it.\r\nif (typeof String.prototype.Format$$IFormatProvider$$String$$Object$Array !== "undefined")\r\n    throw new Error();\r\nString.prototype.Format$$IFormatProvider$$String$$Object$Array = function (fp, s, ar) {\r\n    return System.String.Format$$String$$Object$Array(s, ar);\r\n}\r\n\r\n\r\n/********************\r\n* CLR TYPES CHANGES *\r\n********************/\r\n// These are additions to CLR types that are already defined in jsclr (but are missing something). Linq in particular is missing a \r\n// lot of things in SharpKit.\r\n\r\n/** This is a helper that locates the JsType object for a given name. This is needed because some of the type declarations in jsclr\r\nare anonymous. If you pass a number as the second parameter, it will skip that number of matches; I need this because some types are\r\ndefined multiple times in jsclr.js (I don\'t know why).*/\r\nfindJsType = function (name, idx) {\r\n    // Most of the time, this will get called without the second parameter.\r\n    if (isNaN(idx))\r\n        idx = 0;\r\n    for (var i = 0; i < JsTypes.length ; i++)\r\n        if (JsTypes[i].fullname == name && idx-- == 0)\r\n            return JsTypes[i];\r\n}\r\n\r\nvar sktype_System$String = findJsType("System.String");\r\nif (typeof sktype_System$String.staticDefinition.Format$$IFormatProvider$$String$$Object$Array !== "undefined")\r\n    throw new Error();\r\nsktype_System$String.staticDefinition.Format$$IFormatProvider$$String$$Object$Array = String.prototype.Format$$IFormatProvider$$String$$Object$Array;\r\n\r\n// Implementation of Object.Equals (when called from subclasses).\r\nvar sktype_System$Object = findJsType("System.Object");\r\nif (typeof sktype_System$Object.definition.Equals$$Object !== "undefined")\r\n    throw new Error();\r\nsktype_System$Object.definition.Equals$$Object = function (other) {\r\n    return this === other;\r\n}\r\n\r\n// Implementation of Object.MemberwiseClone (uses the jsclr implementation of reflection).\r\nif (typeof sktype_System$Object.definition.MemberwiseClone !== "undefined")\r\n    throw new Error();\r\nsktype_System$Object.definition.MemberwiseClone = function () {\r\n    var t = this.GetType();\r\n    var ret = System.Activator.CreateInstance$$Type(t);\r\n    for (var $i15 = 0, $t15 = t.GetProperties(), $l15 = $t15.length, pi = $t15[$i15]; $i15 < $l15; $i15++, pi = $t15[$i15]) {\r\n        if (pi.get_CanRead() && pi.get_CanWrite())\r\n            pi.SetValue$$Object$$Object$$Object$Array(ret, pi.GetValue$$Object$$Object$Array(this, null), null);\r\n    }\r\n    return ret;\r\n}\r\n\r\n// Implementation of System.Double.IsInfinity.\r\nvar sktype_System$Double = findJsType("System.Double");\r\nif (typeof sktype_System$Double.staticDefinition.IsInfinity !== "undefined")\r\n    throw new Error();\r\nsktype_System$Double.staticDefinition.IsInfinity = function (d) {\r\n    return !isFinite(d);\r\n}\r\n\r\n// Implementationo of the explicit array setter (this can get invoked when the array is being used as an IList<T>).\r\nvar sktype_Array = findJsType("Array");\r\nif (typeof sktype_System$Double.definition.set_Item$$Int32 !== "undefined")\r\n    throw new Error();\r\nsktype_Array.definition.set_Item$$Int32 = function (index, value) {\r\n    this[index] = value;\r\n}\r\n\r\n// The CLR has an upper-case version of Array.CopyTo, but it\'s lower-case in jsclr.js. This prevents crashes when attempting to use it.\r\nif (typeof sktype_Array.definition.CopyTo !== "undefined")\r\n    throw new Error();\r\nsktype_Array.definition.CopyTo = sktype_Array.definition.copyTo;\r\n\r\n// Prevents crashes when attempting to call the upper-case version of copyTo on Int32Arrays.\r\nvar sktype_Int32Array = findJsType("Int32Array", 1);\r\nif (typeof sktype_Int32Array.CopyTo !== "undefined")\r\n    throw new Error();\r\nsktype_Int32Array.definition.CopyTo = function (dest, idx) {\r\n    for (var i = 0; i < this.length; i++)\r\n        dest[i + idx] = this[i];\r\n}\r\n\r\n// Dictionary has a constructor that takes an initial size. That constructor is not implemented in jsclr. In order to prevent crashes\r\n// when the user code attempts to call it, I\'m just mapping it to the parameterless constructor.\r\nif (typeof System$Collections$Generic$Dictionary$2.definition.ctor$$Int32 !== "undefined")\r\n    throw new Error();\r\nSystem$Collections$Generic$Dictionary$2.definition.ctor$$Int32 = System$Collections$Generic$Dictionary$2.definition.ctor;\r\n\r\n// Implementation of Dictionary.Count. This method is actually implemented in jsclr.js, but it throws; I don\'t know why, as the\r\n// implementation is trivial.\r\nSystem$Collections$Generic$Dictionary$2.definition.get_Count = function () {\r\n    return this.get_Keys().get_Count();\r\n}\r\n\r\n// The jsclr version of TryGetValue behaves differently from the CLR version because when the value is not in the dictionary, it sets\r\n// the ref parameter to undefined. This implementation correctly reproduces the CLR behavior (i.e. if the value is not in the \r\n// dictionary, it does not get changed.\r\nSystem$Collections$Generic$Dictionary$2.definition.TryGetValue = function (key, value) {\r\n    var hashKey = this.GetHashKey(key);\r\n    var v = this._table[hashKey];\r\n    if (v !== undefined)\r\n        value.Value = v;\r\n    return typeof (v) != "undefined";\r\n}\r\n\r\n// The jsclr version of List does not have Capacity, as it doesn\'t make sense in JS. But I still need it to prevent crashes. This\r\n// implementation will just return the item count.\r\nif (typeof System$Collections$Generic$List$1.definition.get_Capacity !== "undefined")\r\n    throw new Error();\r\nSystem$Collections$Generic$List$1.definition.get_Capacity = function () { return this.get_Count(); }\r\n\r\n// Related to above, this implementation of the Capacity setter doesn\'t actually do anything.\r\nif (typeof System$Collections$Generic$List$1.definition.set_Capacity !== "undefined")\r\n    throw new Error();\r\nSystem$Collections$Generic$List$1.definition.set_Capacity = function (c) { }\r\n\r\n// Implementation of List.CopyTo (the jsclr implementation throws).\r\nSystem$Collections$Generic$List$1.definition.CopyTo = function (array, arrayIndex) {\r\n    for (var i = 0; i < this._list.length; i++)\r\n        array[i + arrayIndex] = this._list[i];\r\n}\r\nSystem$Collections$Generic$List$1.definition.CopyTo$$T$Array$$Int32 = System$Collections$Generic$List$1.definition.CopyTo;\r\n\r\n// Implementation of Array.Copy. Warning: 1d arrays only!\r\nif (typeof System$Array.staticDefinition.Copy !== "undefined")\r\n    throw new Error();\r\nSystem$Array.staticDefinition.Copy = function (source, sstart, dest, dstart, len) {\r\n    for (var i = 0; i < len; i++)\r\n        dest[dstart + i] = source[sstart + i];\r\n}\r\n\r\n// Replaces the jsclr version. Note: this method is present in jsclr.js, but it has a weird bug that causes it to return the iterator itself, which in turn\r\n// causes certain actions on the enumerator to invalidate it. I\'m sure it will get fixed at some point.\r\nSystem$Linq$Enumerable$TakeIterator.definition.GetEnumerator = function () {\r\n    return new System.Linq.Enumerable.TakeIterator.ctor(this.T, this.First, this.Second);\r\n}\r\n\r\n// Same as above.\r\nSystem$Linq$Enumerable$Iterator.definition.GetEnumerator = function () {\r\n    var iterator = this.Clone();\r\n    iterator.state = 1;\r\n    return iterator;\r\n}\r\n\r\n// The jsclr version of the Linq iterators want to dispose of the enumerators they contain. But not all enumerators are disposable. This prevents\r\n// crashes in those cases where the inner enumerator is not disposable.\r\nSystem$Linq$Enumerable$WhereSelectEnumerableIterator.definition.Dispose = function () {\r\n    if (this.enumerator != null && this.enumerator.Dispose !== undefined) {\r\n        this.enumerator.Dispose();\r\n    }\r\n    this.enumerator = null;\r\n    System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this);\r\n}\r\n\r\n// Implementation of linq\'s Reverse.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Reverse$1 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Reverse$1 = function (t, s) {\r\n    var en = s.GetEnumerator();\r\n    var ret = [];\r\n    while (en.MoveNext()) {\r\n        var c = en.get_Current();\r\n        ret.unshift(c);\r\n    }\r\n    return ret;\r\n}\r\n\r\n// Cast doesn\'t make sense in JS, obviously, but C# code may still call it. This prevents crashes. It just returns the same iterator.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Cast$1 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Cast$1 = function (t, s) {\r\n    return s;\r\n}\r\n\r\n// This is an implementation of linq\'s Distinct method. It works by building a map based on the hash key of the items, and then returning an\r\n// array with the values.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Distinct$1$$IEnumerable$1 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Distinct$1$$IEnumerable$1 = function (t, s) {\r\n    var en = s.GetEnumerator();\r\n    var map = {};\r\n    while (en.MoveNext()) {\r\n        var c = en.get_Current();\r\n        var k = JsCompiler.GetHashKey(c);\r\n        map[k] = c;\r\n    }\r\n    var ret = [];\r\n    for (var k in map)\r\n        ret.push(map[k]);\r\n    return ret;\r\n}\r\n\r\n// Implementation of Max(Func). Jsclr has the parameterless Max function, but not this one.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Max$1$$IEnumerable$1$$Func$2 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Max$1$$IEnumerable$1$$Func$2 = function (TSource, source, keySelector) {\r\n    var en = source.GetEnumerator();\r\n    if (!en.MoveNext())\r\n        throw $CreateException(new System.InvalidOperationException.ctor$$String("The sequence contains no elements"), new Error());\r\n    var ret = keySelector(en.get_Current());\r\n    while (en.MoveNext()) {\r\n        var candidate = keySelector(en.get_Current());\r\n        if (candidate.CompareTo(ret) > 0)\r\n            ret = candidate;\r\n    }\r\n    return ret;\r\n}\r\n\r\n// Implementation of Min(Func), same as above.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Min$1$$IEnumerable$1$$Func$2 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Min$1$$IEnumerable$1$$Func$2 = function (TSource, source, keySelector) {\r\n    var en = source.GetEnumerator();\r\n    if (!en.MoveNext())\r\n        throw $CreateException(new System.InvalidOperationException.ctor$$String("The sequence contains no elements"), new Error());\r\n    var ret = keySelector(en.get_Current());\r\n    while (en.MoveNext()) {\r\n        var candidate = keySelector(en.get_Current());\r\n        if (candidate.CompareTo(ret) < 0)\r\n            ret = candidate;\r\n    }\r\n    return ret;\r\n}\r\n\r\n// Implementation of Max<double>(). Remember that each override has its own name here.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Max$$IEnumerable$1$Double !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Max$$IEnumerable$1$Double = function (source) {\r\n    var en = source.GetEnumerator();\r\n    if (!en.MoveNext())\r\n        throw $CreateException(new System.InvalidOperationException.ctor$$String("The sequence contains no elements"), new Error());\r\n    var ret = en.get_Current();\r\n    while (en.MoveNext()) {\r\n        var candidate = en.get_Current();\r\n        if (candidate > ret)\r\n            ret = candidate;\r\n    }\r\n    return ret;\r\n}\r\n\r\n// Implementation of Max<Int32>(). See above.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Max$$IEnumerable$1$Int32 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Max$$IEnumerable$1$Int32 = System$Linq$Enumerable.staticDefinition.Max$$IEnumerable$1$Double;\r\n\r\n// Implementation of Min<Int32>(). Same as above.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Min$$IEnumerable$1$Int32 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Min$$IEnumerable$1$Int32 = function (source) {\r\n    var en = source.GetEnumerator();\r\n    if (!en.MoveNext())\r\n        throw $CreateException(new System.InvalidOperationException.ctor$$String("The sequence contains no elements"), new Error());\r\n    var ret = en.get_Current();\r\n    while (en.MoveNext()) {\r\n        var candidate = en.get_Current();\r\n        if (candidate < ret)\r\n            ret = candidate;\r\n    }\r\n    return ret;\r\n}\r\n\r\n// Implementation of Sum<Double>().\r\nif (typeof System$Linq$Enumerable.staticDefinition.Sum$$IEnumerable$1$Double !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Sum$$IEnumerable$1$Double = function (source) {\r\n    var en = source.GetEnumerator();\r\n    if (!en.MoveNext())\r\n        throw $CreateException(new System.InvalidOperationException.ctor$$String("The sequence contains no elements"), new Error());\r\n    var ret = en.get_Current();\r\n    while (en.MoveNext())\r\n        ret += en.get_Current();\r\n    return ret;\r\n}\r\n\r\n// Implementation of All().\r\nif (typeof System$Linq$Enumerable.staticDefinition.All$1 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.All$1 = function (TSource, source, predicate) {\r\n    var en = source.GetEnumerator();\r\n    while (en.MoveNext())\r\n        if (!predicate(en.get_Current()))\r\n            return false;\r\n    return true;\r\n}\r\n\r\n// Implementation of ElementAt.\r\nif (typeof System$Linq$Enumerable.staticDefinition.ElementAt$1 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.ElementAt$1 = function (TSource, source, idx) {\r\n    if (idx < 0)\r\n        throw $CreateException(new System.InvalidOperationException.ctor$$String("Negative index"), new Error());\r\n    var en = source.GetEnumerator();\r\n    while (en.MoveNext())\r\n        if (idx-- == 0)\r\n            return en.get_Current();\r\n    throw $CreateException(new System.InvalidOperationException.ctor$$String("Index out of bounds"), new Error());\r\n}\r\n\r\n// Implementation of GroupBy (uses maps).\r\nif (typeof System$Linq$Enumerable.staticDefinition.GroupBy$2$$IEnumerable$1$$Func$2 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.GroupBy$2$$IEnumerable$1$$Func$2 = function (TKey, TSource, source, keySelector) {\r\n    var dic = new System.Collections.Generic.Dictionary$2.ctor(TKey, System.Linq.Grouping$2.ctor);\r\n    var $it15 = source.GetEnumerator();\r\n    while ($it15.MoveNext()) {\r\n        var s = $it15.get_Current();\r\n        var key = keySelector(s);\r\n        if (!dic.ContainsKey(key))\r\n            dic.set_Item$$TKey(key, (function () {\r\n                var $v3 = new System.Linq.Grouping$2.ctor(TKey, TSource);\r\n                $v3.set_Key(key);\r\n                return $v3;\r\n            })());\r\n        dic.get_Item$$TKey(key).Add(s);\r\n    }\r\n    return System.Linq.Enumerable.ToList$1(System.Linq.Grouping$2.ctor, dic.get_Values());\r\n}\r\n\r\n// Implementation of Aggregate.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Aggregate$2$$IEnumerable$1$$TAccumulate$$Func$3 !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Aggregate$2$$IEnumerable$1$$TAccumulate$$Func$3 = function (TSource, TAccumulate, source, seed, func) {\r\n    var ret = seed;\r\n    var $it14 = source.GetEnumerator();\r\n    while ($it14.MoveNext()) {\r\n        var s = $it14.get_Current();\r\n        ret = func(ret, s);\r\n    }\r\n    return ret;\r\n}\r\n\r\n// Implementation of List.Sort(IComparer). Here I\'m leveraging knowledge that List is really an array, and calling the implementation\r\n// that already exists on arrays.\r\nif (typeof System$Collections$Generic$List$1.definition.Sort$$IComparer$1 !== "undefined")\r\n    throw new Error();\r\nSystem$Collections$Generic$List$1.definition.Sort$$IComparer$1 = function (comparer) {\r\n    System.Array.Sort$$Array$$IComparer(this._list, comparer);\r\n}\r\n\r\n// Implementation of Array.Sort<TKey,TValue>(TKey[], TValue[]); I\'m doing this by leveraging the native sorting ability of JS. This may\r\n// not be the most efficient solution, as it adds a bunch of O(N) operations, but it\'s not too bad (and it\'s really simple).\r\nif (typeof System$Array.staticDefinition.Sort$2$$TKey$Array$$TValue$Array !== "undefined")\r\n    throw new Error();\r\nSystem$Array.staticDefinition.Sort$2$$TKey$Array$$TValue$Array = function (TKey, TValue, keys, values) {\r\n    var tupleArray = [];\r\n    for (var i = 0; i < keys.length; i++)\r\n        tupleArray[i] = { key: keys[i], value: values[i] };\r\n    tupleArray.sort(function (t1, t2) { return t1.key - t2.key });\r\n    for (var i = 0; i < keys.length; i++)\r\n        values[i] = tupleArray[i].value;\r\n}\r\n\r\n// Implementation of PropertyInfo.CanRead. Jsclr doesn\'t have this.\r\nif (typeof System$Reflection$PropertyInfo.definition.get_CanRead !== "undefined")\r\n    throw new Error();\r\nSystem$Reflection$PropertyInfo.definition.get_CanRead = function () {\r\n    return this._Getter != null;\r\n}\r\n\r\n// Implementation of PropertyInfo.CanWrite. Jsclr doesn\'t have this.\r\nif (typeof System$Reflection$PropertyInfo.definition.get_CanWrite !== "undefined")\r\n    throw new Error();\r\nSystem$Reflection$PropertyInfo.definition.get_CanWrite = function () {\r\n    return this._Setter != null;\r\n}\r\n\r\n// Implementation of Tuple.GetHashCode. Jsclr doesn\'t implement this, which means that the implementation from Object is used, which\r\n// considers all tuples to be different even when they have the same values. This concatenates the hashes of the tuple elements.\r\nif (typeof System$Tuple$2.definition.GetHashCode !== "undefined")\r\n    throw new Error();\r\nSystem$Tuple$2.definition._hashKey = null;\r\nSystem$Tuple$2.definition.ctor = function (T1, T2, item1, item2) {\r\n    this.T1 = T1;\r\n    this.T2 = T2;\r\n    this._item1 = null;\r\n    this._item2 = null;\r\n    System.Object.ctor.call(this);\r\n    this._item1 = item1;\r\n    this._item2 = item2;\r\n    this._hashKey = SharpKit.JavaScript.Utils.Js.GetHashKey(item1) + "," + SharpKit.JavaScript.Utils.Js.GetHashKey(item2);\r\n};\r\n\r\n// Implementation of the IEnumerable constructor for HashSet. This will just construct an empty HashSet and then add all of the\r\n// values from the IEnumerable.\r\nif (typeof System$Collections$Generic$HashSet$1.definition.ctor$$IEnumerable$1 !== "undefined")\r\n    throw new Error();\r\nSystem$Collections$Generic$HashSet$1.definition.ctor$$IEnumerable$1 = function (T, source) {\r\n    this.T = T;\r\n    this.Hashtable = new Object();\r\n    this.Comparer = null;\r\n    this._Count = 0;\r\n    System.Object.ctor.call(this);\r\n\r\n    var en = source.GetEnumerator();\r\n    while (en.MoveNext()) {\r\n        var item = en.get_Current();\r\n        var key = this.GetHashKey(item);\r\n        if (this.Hashtable[key] != null)\r\n            return false;\r\n        this.Hashtable[key] = item;\r\n        this._Count++;\r\n    }\r\n}\r\n\r\n// Implementation of System.Linq.Enumerable.Range.\r\nif (typeof System$Linq$Enumerable.staticDefinition.Range !== "undefined")\r\n    throw new Error();\r\nSystem$Linq$Enumerable.staticDefinition.Range = function (start, count) {\r\n    var ret = new Array(count);\r\n    for (var i = 0; i < ret.length; i++)\r\n        ret[i] = i + start;\r\n    return ret;\r\n}\r\n\r\n// Jsclr has a bug in Random.NextInt which causes it to return a floating point number instead of an integer. This corrects that\r\n// problem.\r\nSystem$Random.definition.Next$$Int32$$Int32 = function (minValue, maxValue) {\r\n    if (minValue > maxValue) {\r\n        throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("minValue", "Argument_MinMaxValue"), new Error());\r\n    }\r\n    var num = maxValue - minValue;\r\n    if (num <= 2147483647) {\r\n        return (this.Sample() * num) + minValue;\r\n    }\r\n    return Math.floor(((this.GetSampleForLargeRange() * num) + minValue));\r\n};\r\n\r\n// Same as above.\r\nSystem$Random.definition.Next$$Int32 = function (maxValue) {\r\n    if (maxValue < 0) {\r\n        throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("maxValue", "ArgumentOutOfRange_MustBePositive"), new Error());\r\n    }\r\n    return Math.floor((this.Sample() * maxValue));\r\n};\r\n\r\n// Handle overloading of the interface\'s Add method with the Add method in the class (see also http://code.google.com/p/sharpkit/issues/detail?id=203)\r\nMicrosoft$Msagl$Core$DataStructures$Set$1.definition.Add = function (set0, set1) {\r\n    if (set1 === undefined)\r\n        this.Insert(set0);\r\n    else\r\n        return Microsoft.Msagl.Core.DataStructures.Set$1.op_Addition(set0, set1);\r\n}\r\n\r\n// .NET stacks are ordered in the opposite way compared to JS stacks. This is irrelevant if you\'re just using push and pop, but it\'s important if you\'re enumerating.\r\nSystem$Collections$Generic$Stack$1.definition.Push = function (item) {\r\n    this._list.unshift(item);\r\n}\r\n\r\n// .NET stacks are ordered in the opposite way compared to JS stacks. This is irrelevant if you\'re just using push and pop, but it\'s important if you\'re enumerating.\r\nSystem$Collections$Generic$Stack$1.definition.Pop = function () {\r\n    if (this._list.length == 0)\r\n        throw $CreateException(new Error("Cannot pop from stack - stack is empty"), new Error());\r\n    return this._list.shift();\r\n}\r\n\r\n// .NET stacks are ordered in the opposite way compared to JS stacks. This is irrelevant if you\'re just using push and pop, but it\'s important if you\'re enumerating.\r\nSystem$Collections$Generic$Stack$1.definition.Peek = function (){\r\n    if (this._list.length == 0)\r\n        throw $CreateException(new Error("Cannot peek in stack - stack is empty"), new Error());\r\n    return this._list[0];\r\n}\r\n\r\n\r\n/***********************\r\n* ADDITIONAL CLR TYPES *\r\n***********************/\r\n// These are SharpKit-style implementation of CLR types that jsclr does not contain at all.\r\n\r\nvar System$ArgumentNullException = {\r\n    fullname: "System.ArgumentNullException",\r\n    baseTypeName: "System.Exception",\r\n    assemblyName: "System",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$String: function (msg) {\r\n            System.Exception.ctor$$String.call(this, msg);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$ArgumentNullException);\r\n\r\nvar System$InvalidOperationException = {\r\n    fullname: "System.InvalidOperationException",\r\n    baseTypeName: "System.Exception",\r\n    assemblyName: "System",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor$$String: function (msg) {\r\n            System.Exception.ctor$$String.call(this, msg);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$InvalidOperationException);\r\n\r\n// Implementation of Grouping.\r\nvar System$Linq$Grouping$2 = {\r\n    fullname: "System.Linq.Grouping$2",\r\n    baseTypeName: "System.Collections.Generic.List$1",\r\n    assemblyName: "Microsoft.Msagl",\r\n    interfaceNames: ["System.Linq.IGrouping$2"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (TKey, TSource) {\r\n            this.TKey = TKey;\r\n            this.TSource = TSource;\r\n            this._Key = null;\r\n            System.Collections.Generic.List$1.ctor.call(this, this.TSource);\r\n        },\r\n        Key$$: "`0",\r\n        get_Key: function () {\r\n            return this._Key;\r\n        },\r\n        set_Key: function (value) {\r\n            this._Key = value;\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$Linq$Grouping$2);\r\n\r\n// Fake of System.Globalization.CultureInfo. Globalization is not actually implemented, but this way some calls won\'t crash.\r\nif (typeof System$Globalization$CultureInfo !== "undefined")\r\n    throw new Error();\r\nvar System$Globalization$CultureInfo = {\r\n    fullname: "System.Globalization.CultureInfo",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        cctor: function () {\r\n        },\r\n        get_InvariantCulture: function () { return null; }\r\n    },\r\n    definition: {\r\n        ctor$$String: function (s) { System.Object.ctor.call(this); }\r\n    },\r\n    assemblyName: "SharpKit.JsClr",\r\n    Kind: "Class",\r\n};\r\nJsTypes.push(System$Globalization$CultureInfo);\r\n\r\n// Fake implementation of LinkedList. In the CLR, it has the same interface as List, only with a different performance profile.\r\n// Because of this, it is not implemented in jsclr. I\'m replacing it with a straight copy of the jsclr implementation of List.\r\nif (typeof System$Collections$Generic$LinkedList$1 !== "undefined")\r\n    throw new Error();\r\nvar System$Collections$Generic$LinkedList$1 = {\r\n    fullname: "System.Collections.Generic.LinkedList$1",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "SharpKit.JsClr",\r\n    interfaceNames: ["System.Collections.Generic.IList$1", "System.Collections.IList"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (T) {\r\n            this.T = T;\r\n            this._list = null;\r\n            System.Object.ctor.call(this);\r\n            this._list = new Array();\r\n        },\r\n        ctor$$IEnumerable$1: function (T, collection) {\r\n            this.T = T;\r\n            this._list = null;\r\n            System.Object.ctor.call(this);\r\n            this._list = new Array();\r\n            this.AddRange(collection);\r\n        },\r\n        RemoveRange: function (index, count) {\r\n            this._list.splice(index, count);\r\n        },\r\n        Clear: function () {\r\n            this._list.Clear();\r\n        },\r\n        Item$$: "`0",\r\n        get_Item$$Int32: function (index) {\r\n            if (index >= this._list.length || index < 0)\r\n                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index"), new Error());\r\n            return this._list[index];\r\n        },\r\n        set_Item$$Int32: function (index, value) {\r\n            if (index >= this._list.length || index < 0)\r\n                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index"), new Error());\r\n            this._list[index] = value;\r\n        },\r\n        Count$$: "System.Int32",\r\n        get_Count: function () {\r\n            return this._list.length;\r\n        },\r\n        GetEnumerator: function () {\r\n            return new System.Collections.IListEnumerator$1.ctor(this.T, this);\r\n        },\r\n        ToArray: function () {\r\n            var len = this.get_Count();\r\n            var array = new Array(len);\r\n            for (var i = 0; i < len; i++)\r\n                array[i] = this.get_Item$$Int32(i);\r\n            return array;\r\n        },\r\n        AddRange: function (items) {\r\n            var $it3 = items.GetEnumerator();\r\n            while ($it3.MoveNext()) {\r\n                var item = $it3.get_Current();\r\n                this.Add(item);\r\n            }\r\n        },\r\n        Add: function (item) {\r\n            this._list.push(item);\r\n        },\r\n        Remove: function (item) {\r\n            var index = this._list.indexOf(item);\r\n            if (index == -1)\r\n                return false;\r\n            this._list.RemoveAt(index);\r\n            return true;\r\n        },\r\n        Contains: function (item) {\r\n            return this._list.contains(item);\r\n        },\r\n        SetItems: function (items) {\r\n            this.Clear();\r\n            if (items != null)\r\n                this.AddRange(items);\r\n        },\r\n        IndexOf: function (item) {\r\n            return this._list.indexOf(item);\r\n        },\r\n        Insert: function (index, item) {\r\n            this._list.insert(index, item);\r\n        },\r\n        AddLast$$T: function (item) {\r\n            this._list.insert(this._list.length, item);\r\n        },\r\n        get_First: function () {\r\n            var self = this;\r\n            var get_Next = function (i) {\r\n                if (i >= self._list.length)\r\n                    return null;\r\n                v = self._list[i];\r\n                return {\r\n                    i: i,\r\n                    v: v,\r\n                    get_Value: function () { return v; },\r\n                    get_Next: function () { return get_Next(i + 1); }\r\n                }\r\n            }\r\n            return get_Next(0);\r\n        },\r\n        get_Last: function () {\r\n            var self = this;\r\n            var get_Next = function (i) {\r\n                if (i >= self._list.length)\r\n                    return null;\r\n                v = self._list[i];\r\n                return {\r\n                    i: i,\r\n                    v: v,\r\n                    get_Value: function () { return v; },\r\n                    get_Next: function () { return get_Next(i + 1); }\r\n                }\r\n            }\r\n            return get_Next(self._list.length - 1);\r\n        },\r\n        Remove$$LinkedListNode$1: function (n) {\r\n            this.RemoveAt(n.i);\r\n        },\r\n        AddFirst$$LinkedListNode$1: function (n) {\r\n            this.Insert(0, n.v);\r\n        },\r\n        AddFirst$$T: function (n) {\r\n            this.Insert(0, n);\r\n        },\r\n        AddLast$$T: function (n) {\r\n            this.Add(n);\r\n        },\r\n        RemoveAt: function (index) {\r\n            this._list.RemoveAt(index);\r\n        },\r\n        TryRemove: function (item) {\r\n            throw $CreateException(new System.NotImplementedException.ctor$$String("TryRemove"), new Error());\r\n        },\r\n        CopyTo: function (array, arrayIndex) {\r\n            throw $CreateException(new System.NotImplementedException.ctor$$String("JsImplList$T"), new Error());\r\n        },\r\n        IsReadOnly$$: "System.Boolean",\r\n        get_IsReadOnly: function () {\r\n            throw $CreateException(new System.NotImplementedException.ctor$$String("JsImplList$T"), new Error());\r\n        },\r\n        Reverse: function () {\r\n            this._list.reverse();\r\n        },\r\n        Sort: function () {\r\n            System.Array.Sort$1$$T$Array(this.T, this._list);\r\n        },\r\n        Sort$$Comparison$1: function (comparison) {\r\n            this._list.sort(comparison);\r\n        },\r\n        ForEach: function (action) {\r\n            if (action == null)\r\n                throw $CreateException(new System.ArgumentNullException.ctor$$String("action"), new Error());\r\n            for (var i = 0; i < this._list.length; i++) {\r\n                action(this._list[i]);\r\n            }\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$Collections$Generic$LinkedList$1);\r\n\r\n// Implementation of SortedDictionary. Once again, I don\'t want to spend a lot of time making proper implementations of this, because\r\n// chances are the SharpKit guys are going to do it anyway at some point in the future. So I\'m just copying Dictionary, and adding\r\n// sorting steps whenever the keys are accessed.\r\nif (typeof System$Collections$Generic$SortedDictionary$2 !== "undefined")\r\n    throw new Error();\r\nvar System$Collections$Generic$SortedDictionary$2 = {\r\n    fullname: "System.Collections.Generic.SortedDictionary$2",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "SharpKit.JsClr",\r\n    interfaceNames: ["System.Collections.Generic.IDictionary$2"],\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function (TKey, TValue) {\r\n            this.TKey = TKey;\r\n            this.TValue = TValue;\r\n            this._table = null;\r\n            this._keys = null;\r\n            this._version = 0;\r\n            this.Comparer = null;\r\n            System.Object.ctor.call(this);\r\n            this._table = new Object();\r\n            this._keys = new Object();\r\n            this._version = 0;\r\n        },\r\n        ctor$$IComparer$1: function (TKey, TValue, comparer) {\r\n            this.TKey = TKey;\r\n            this.TValue = TValue;\r\n            this._table = null;\r\n            this._keys = null;\r\n            this._version = 0;\r\n            this.Comparer = null;\r\n            System.Object.ctor.call(this);\r\n            this._table = new Object();\r\n            this._keys = new Object();\r\n            this._version = 0;\r\n            this.Comparer = comparer;\r\n        },\r\n        GetHashKey: function (key) {\r\n            //if (this.Comparer != null)\r\n            //return this.Comparer.GetHashCode$$T(key);\r\n            return SharpKit.JavaScript.Utils.Js.GetHashKey(key);\r\n        },\r\n        Add: function (key, value) {\r\n            if (key == null)\r\n                throw $CreateException(new System.ArgumentNullException.ctor$$String("key"), new Error());\r\n            if (this.ContainsKey(key))\r\n                throw $CreateException(new System.ArgumentException.ctor$$String$$String$$Exception("The specified key already exists.", "key", null), new Error());\r\n            var hashKey = this.GetHashKey(key);\r\n            this._table[hashKey] = value;\r\n            this._keys[hashKey] = key;\r\n            this._version++;\r\n        },\r\n        Remove: function (key) {\r\n            if (key == null)\r\n                throw $CreateException(new System.ArgumentNullException.ctor$$String("key"), new Error());\r\n            if (!this.ContainsKey(key))\r\n                throw $CreateException(new System.ArgumentException.ctor$$String$$String$$Exception("The specified key does not exist.", "key", null), new Error());\r\n            var hashKey = this.GetHashKey(key);\r\n            delete this._table[hashKey];\r\n            delete this._keys[hashKey];\r\n            this._version++;\r\n            return true;\r\n        },\r\n        Item$$: "`1",\r\n        get_Item$$TKey: function (key) {\r\n            if (!this.ContainsKey(key))\r\n                throw $CreateException(new System.Collections.Generic.KeyNotFoundException.ctor$$String("The specified key does not exist."), new Error());\r\n            var hashKey = this.GetHashKey(key);\r\n            return this._table[hashKey];\r\n        },\r\n        set_Item$$TKey: function (key, value) {\r\n            var hashKey = this.GetHashKey(key);\r\n            this._table[hashKey] = value;\r\n            this._keys[hashKey] = key;\r\n            this._version++;\r\n        },\r\n        ContainsKey: function (key) {\r\n            var hashKey = this.GetHashKey(key);\r\n            return typeof (this._table[hashKey]) != "undefined";\r\n        },\r\n        Keys$$: "System.Collections.Generic.ICollection`1[[`0]]",\r\n        get_Keys: function () {\r\n            var keys = [];\r\n            for (var p in this._keys) {\r\n                keys.push(this._keys[p]);\r\n            }\r\n            if (this.Comparer != null)\r\n                System.Array.Sort$1$$T$Array$$IComparer$1(this.TKey, keys, this.Comparer);\r\n            else\r\n                System.Array.Sort$$Array(keys);\r\n            return keys;\r\n        },\r\n        Values$$: "System.Collections.Generic.ICollection`1[[`1]]",\r\n        get_Values: function () {\r\n            var values = [];\r\n            var keys = this.get_Keys();\r\n            for (var i = 0; i < keys.length; i++) {\r\n                values.push(this._table[keys[i]]);\r\n            }\r\n            return values;\r\n        },\r\n        GetEnumerator: function () {\r\n            var array = [];\r\n            var keys = this.get_Keys();\r\n            for (var i = 0; i < keys.length; i++) {\r\n                var hashKey = keys[i];\r\n                array.push(new System.Collections.Generic.KeyValuePair$2.ctor$$TKey$$TValue(this.TKey, this.TValue, hashKey, this._table[hashKey]));\r\n            }\r\n            return array.GetEnumerator();\r\n        },\r\n        Clear: function () {\r\n            for (var hashKey in this._table) {\r\n                this._keys = new Object();\r\n                this._table = new Object();\r\n                this._version++;\r\n                return;\r\n            }\r\n        },\r\n        TryGetValue: function (key, value) {\r\n            var hashKey = this.GetHashKey(key);\r\n            var v = this._table[hashKey];\r\n            value.Value = v;\r\n            return typeof (v) != "undefined";\r\n        },\r\n        Count$$: "System.Int32",\r\n        get_Count: function () {\r\n            return this._keys.length;\r\n        },\r\n        IsReadOnly$$: "System.Boolean",\r\n        get_IsReadOnly: function () {\r\n            throw $CreateException(new System.NotImplementedException.ctor(), new Error());\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$Collections$Generic$SortedDictionary$2);\r\n\r\n// System.MarshalByRefObject doesn\'t make sense in JS and so doesn\'t exist in jsclr. But I have code that references it anyway,\r\n// so I\'m making a fake implementation (that just maps to Object).\r\nvar System$MarshalByRefObject = {\r\n    fullname: "System.MarshalByRefObject",\r\n    baseTypeName: "System.Object",\r\n    assemblyName: "System",\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function () {\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$MarshalByRefObject);\r\n\r\n// System.Console doesn\'t exist in jsclr. This is a fake implementation. I could map this to the JS console, but it\'s not terribly\r\n// necessary.\r\nvar System$Console = {\r\n    fullname: "System.Console",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        WriteLine: function () { },\r\n        WriteLine$$String: function () { },\r\n        WriteLine$$String$$Object: function () { },\r\n        WriteLine$$String$$Object$$Object: function () { }\r\n    },\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function () {\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$Console);\r\n\r\n// System.GC doesn\'t make sense in JS, but I have code that uses it, so here is a fake implementation.\r\nvar System$Console = {\r\n    fullname: "System.GC",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        SuppressFinalize: function (s) {\r\n        }\r\n    },\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function () {\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$Console);\r\n\r\n// System.Diagnostics.Debug doesn\'t make sense in JS, but I have code that uses it, so here is a fake implementation.\r\nvar System$Diagnostics$Debug = {\r\n    fullname: "System.Diagnostics.Debug",\r\n    baseTypeName: "System.Object",\r\n    staticDefinition: {\r\n        Assert$$Boolean$$String: function (b, s) { },\r\n        Assert$$Boolean: function (b) { }\r\n    },\r\n    Kind: "Class",\r\n    definition: {\r\n        ctor: function () {\r\n            System.Object.ctor.call(this);\r\n        }\r\n    }\r\n};\r\nJsTypes.push(System$Diagnostics$Debug);\r\n\r\n/**********************\r\n* MSAGL TYPES CHANGES *\r\n**********************/\r\n// These are alterations to the types that SharpKit produces when run on the MSAGL source code.\r\n\r\n// Microsoft$Msagl$Routing$Rectilinear$Nudging$SegWithIndex.definition.GetHashCode = function () {\r\n//     var hash = 0;\r\n//     for (var i = 0; i < this.Points.length; i++)\r\n//         hash ^= this.Points[i].GetHashCode();\r\n//     return (hash * 397) ^ this.I;\r\n// }\r\n\r\n// Points can be null, but the code generated by SharpKit for equality testing assumes they are not. This fixes that.\r\nMicrosoft$Msagl$Core$Geometry$Point.staticDefinition.op_Equality = function (point0, point1) {\r\n    if (point0 == null && point1 == null)\r\n        return true;\r\n    if ((point0 == null) != (point1 == null))\r\n        return false;\r\n    return point0.get_X() == point1.get_X() && point0.get_Y() == point1.get_Y();\r\n};\r\n\r\n// This resolves issues with the generic HashSet.Contains method vs. the non-generic version.\r\nif (typeof Microsoft$Msagl$Core$DataStructures$Set$1.definition.Contains !== "undefined")\r\n    throw new Error();\r\nMicrosoft$Msagl$Core$DataStructures$Set$1.definition.Contains = Microsoft$Msagl$Core$DataStructures$Set$1.definition.Contains$$T;\r\n\r\n// Sometimes MSAGL uses a Set as the key to something. So it needs to have a proper hash.\r\nMicrosoft$Msagl$Core$DataStructures$Set$1.definition.GetHashCode = function () {\r\n    var ret = 0;\r\n    var $it1066 = this.GetEnumerator();\r\n    while ($it1066.MoveNext()) {\r\n        var t = $it1066.get_Current();\r\n        if (t.GetHashCode == null)\r\n            ret |= t._hashKey;\r\n        else\r\n            ret |= t.GetHashCode();\r\n    }\r\n    return ret;\r\n};\r\n\r\n// MSAGL attempts an ordering on HullPoint instances at some point.\r\n// Microsoft$Msagl$Core$Geometry$HullPoint.definition.GetHashCode = function () {\r\n//     var ret = this.point.GetHashCode();\r\n//     return ret;\r\n// }\r\n\r\n// Invoke SharpKit.\r\nCompile();\r\n\r\n// This is an enumeration that SharpKit doesn\'t seem to generate.\r\n// Microsoft.Msagl.Layout.Incremental.KDTree.Particle.Dim = { Horizontal: 0, Vertical: 1 };'}]);