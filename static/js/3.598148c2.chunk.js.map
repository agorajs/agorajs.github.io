{"version":3,"sources":["../node_modules/javascript-lp-solver/src/Tableau/Tableau.js","../node_modules/javascript-lp-solver/src/expressions.js","../node_modules/javascript-lp-solver/src/External/lpsolve/Reformat.js","../node_modules/javascript-lp-solver/src/Tableau/Solution.js","../node_modules/javascript-lp-solver/src/Tableau/branchAndCut.js","../node_modules/javascript-lp-solver/src/Polyopt.js","../node_modules/javascript-lp-solver/src/main.js","../node_modules/javascript-lp-solver/src/Tableau/index.js","../node_modules/javascript-lp-solver/src/Tableau/simplex.js","../node_modules/javascript-lp-solver/src/Tableau/MilpSolution.js","../node_modules/javascript-lp-solver/src/Tableau/cuttingStrategies.js","../node_modules/javascript-lp-solver/src/Tableau/dynamicModification.js","../node_modules/javascript-lp-solver/src/Tableau/log.js","../node_modules/javascript-lp-solver/src/Tableau/backup.js","../node_modules/javascript-lp-solver/src/Tableau/branchingStrategies.js","../node_modules/javascript-lp-solver/src/Tableau/integerProperties.js","../node_modules/javascript-lp-solver/src/Model.js","../node_modules/javascript-lp-solver/src/Validation.js","../node_modules/javascript-lp-solver/src/External/main.js","../node_modules/javascript-lp-solver/src/External/lpsolve/main.js","../node_modules/agora-diamond/dist/index.js"],"names":["Solution","require","MilpSolution","Tableau","precision","this","model","matrix","width","height","costRowIndex","rhsColumn","variablesPerIndex","unrestrictedVars","feasible","evaluation","simplexIters","varIndexByRow","varIndexByCol","rowByVarIndex","colByVarIndex","optionalObjectives","objectivesByPriority","savedState","availableIndexes","lastElementIndex","variables","nVars","bounded","unboundedVarIndex","branchAndCutIterations","OptionalObjective","priority","nColumns","reducedCosts","Array","c","module","exports","prototype","solve","getNumberOfIntegerVariables","branchAndCut","simplex","updateVariableValues","getSolution","copy","length","slice","setOptionalObjective","column","cost","objectiveForPriority","undefined","Math","max","push","sort","a","b","initialize","tmpRow","i","j","_resetMatrix","v","varIndex","constraints","nConstraints","costRow","coeff","isMinimization","variable","index","rowIndex","t","term","constraint","constraintIndex","terms","nTerms","row","isUpperBound","coefficient","rhs","setModel","nVariables","unrestrictedVariables","getNewElementIndex","pop","density","r","setEvaluation","roundingCoeff","round","roundedEvaluation","Number","EPSILON","bestPossibleEval","Variable","id","value","IntegerVariable","call","SlackVariable","Term","createRelaxationVariable","weight","addVariable","relaxationIndex","Constraint","slack","termsByVarIndex","relaxation","Equality","constraintUpper","constraintLower","upperBound","lowerBound","isInteger","isSlack","addTerm","updateConstraintCoefficient","newCoefficient","setVariableCoefficient","removeTerm","setRightHandSide","newRhs","difference","updateRightHandSide","console","warn","relax","_relax","relaxationVariable","isEquality","input","rxo","tmp","ary","hldr","hldr2","split","is_objective","test","opType","match","parse_lhs","map","d","replace","forEach","get_num","substr","parseFloat","get_word","_obj","is_int","parse_int","ints","is_bin","parse_bin","binaries","is_constraint","separatorIndex","indexOf","parse_rhs","parse_dir","is_unrestricted","unrestricted","to_JSON","Error","output","lookup","rxClean","RegExp","x","optimize","xx","y","z","xxx","xxxx","from_JSON","tableau","_tableau","generateSolutionSet","solutionSet","lastRow","varValue","Cut","type","Branch","relaxedEvaluation","cuts","sortByEvaluation","applyCuts","branchingCuts","restore","addCutConstraints","useMIRCuts","fractionalVolumeImproved","fractionalVolumeBefore","computeFractionalVolume","applyMIRCuts","branches","iterations","tolerance","toleranceFlag","terminalTime","timeout","Date","now","bestEvaluation","Infinity","bestBranch","bestOptionalObjectivesEvaluations","oInit","acceptableThreshold","branch","isCurrentEvaluationWorse","o","isIntegral","__isIntegral","oCopy","save","getMostFractionalVar","cutsHigh","cutsLow","nCuts","cut","min","ceil","floor","cutHigh","cutLow","solver","objectives","new_constraints","JSON","parse","stringify","keys","Object","counter","vectors","vector_key","obj","pareto","Solve","result","random","cheater","midpoint","vertices","ranges","Model","expressions","validation","Numeral","External","Solver","lastSolvedModel","full","validate","external","solvers","loadJson","solution","store","ReformatLP","MultiObjective","phase1","phase2","debugCheckForCycles","checkForCycles","varIndexesCycle","lastColumn","leavingRowIndex","rhsValue","enteringColumn","maxQuotient","leavingRow","quotient","cycleData","messages","pivot","reducedCost","nOptionalObjectives","optionalCostsColumns","enteringValue","isReducedCostNegative","optionalCostsColumns2","minQuotient","colValue","nonZeroColumns","pivotRowIndex","pivotColumnIndex","leavingBasicIndex","enteringBasicIndex","v0","pivotRow","nNonZeroColumns","varIndexes","e1","e2","elt1","elt2","cycleFound","tmp1","tmp2","iter","create","constructor","cutConstraints","nCutConstraints","heightWithCuts","h","sign","varRowIndex","constraintRow","varRow","slackVarIndex","_addLowerBoundMIRCut","frac_d","colIndex","coef","termCoeff","_addUpperBoundMIRCut","f","aj","fj","_putInBase","r1","_takeOutOfBase","c1","slackColumn","colVar","rowVar","updateCost","varColumn","variableRow","addConstraint","slackIndex","removeConstraint","removeVariable","switchVarIndex","log","message","force","varName","varNameLength","valueSpace","nameSpace","rowString","varNameRowString","spacePerColumn","abs","firstRow","firstRowString","toFixed","reducedCostsString","optionalObjectivesCopy","matrixCopy","savedMatrix","savedRow","savedBasicIndexes","savedNonBasicIndexes","savedRows","savedCols","optionalObjectivePerPriority","optionalObjectiveCopy","VariableData","biggestFraction","selectedVarIndex","selectedVarValue","integerVariables","nIntegerVars","fraction","getFractionalVarWithLowestCost","highestCost","countIntegerValues","count","decimalPart","ignoreIntegerValues","volume","name","tableauInitialized","minimize","maximize","_getNewElementIndex","_addConstraint","slackVariable","smallerThan","greaterThan","equal","isUnrestricted","_removeConstraint","idx","splice","setCost","jsonModel","constraintsMin","constraintsMax","constraintIds","nConstraintIds","constraintId","relaxed","equality","variableIds","options","exitOnCycles","integerVarIds","binaryVarIds","unrestrictedVarIds","objectiveName","variableId","variableConstraints","isBinary","constraintNames","constraintName","constraintMin","constraintMax","isFeasible","activateMIRCuts","debug","CleanObjectiveAttributes","fakeAttr","clean_data","data","filter","reduce","k","reformat","Promise","res","rej","window","binPath","args","tempName","writeFile","fe","fd","exec","execFile","e","code","ret_obj","__assign","assign","s","n","arguments","p","hasOwnProperty","apply","__rest","getOwnPropertySymbols","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","agora_graph_1","lodash_1","javascript_lp_solver_1","node2Diamond","_a","wii","SQRT2","diamondRotation","graph","padding","default","nodes","diamondGraphRotation","rotatedNodes","polar","toPolar","theta","PI","cart","toCartesian","vs","sortBy","hs","diamonds","findIndex","join","iIdx","_b","yi","wi","ymax","ymin","jIdx","_c","yj","wj","_d","lpsolve","tmodel","rest","positions","transform","val","key","tpe","rotatedPos","position","edges"],"mappings":"mFAMA,IAAIA,EAAWC,EAAQ,KACnBC,EAAeD,EAAQ,KAa3B,SAASE,EAAQC,GACbC,KAAKC,MAAQ,KAEbD,KAAKE,OAAS,KACdF,KAAKG,MAAQ,EACbH,KAAKI,OAAS,EAEdJ,KAAKK,aAAe,EACpBL,KAAKM,UAAY,EAEjBN,KAAKO,kBAAoB,GACzBP,KAAKQ,iBAAmB,KAGxBR,KAAKS,UAAW,EAChBT,KAAKU,WAAa,EAClBV,KAAKW,aAAe,EAEpBX,KAAKY,cAAgB,KACrBZ,KAAKa,cAAgB,KAErBb,KAAKc,cAAgB,KACrBd,KAAKe,cAAgB,KAErBf,KAAKD,UAAYA,GAAa,KAE9BC,KAAKgB,mBAAqB,GAC1BhB,KAAKiB,qBAAuB,GAE5BjB,KAAKkB,WAAa,KAElBlB,KAAKmB,iBAAmB,GACxBnB,KAAKoB,iBAAmB,EAExBpB,KAAKqB,UAAY,KACjBrB,KAAKsB,MAAQ,EAEbtB,KAAKuB,SAAU,EACfvB,KAAKwB,kBAAoB,KAEzBxB,KAAKyB,uBAAyB,EAclC,SAASC,EAAkBC,EAAUC,GACjC5B,KAAK2B,SAAWA,EAChB3B,KAAK6B,aAAe,IAAIC,MAAMF,GAC9B,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAUG,GAAK,EAC/B/B,KAAK6B,aAAaE,GAAK,EAhB/BC,EAAOC,QAAUnC,EAEjBA,EAAQoC,UAAUC,MAAQ,WAOtB,OANInC,KAAKC,MAAMmC,8BAAgC,EAC3CpC,KAAKqC,eAELrC,KAAKsC,UAETtC,KAAKuC,uBACEvC,KAAKwC,eAWhBd,EAAkBQ,UAAUO,KAAO,WAC/B,IAAIA,EAAO,IAAIf,EAAkB1B,KAAK2B,SAAU3B,KAAK6B,aAAaa,QAElE,OADAD,EAAKZ,aAAe7B,KAAK6B,aAAac,QAC/BF,GAGX3C,EAAQoC,UAAUU,qBAAuB,SAAUjB,EAAUkB,EAAQC,GACjE,IAAIC,EAAuB/C,KAAKiB,qBAAqBU,QACxBqB,IAAzBD,IAEAA,EAAuB,IAAIrB,EAAkBC,EAD9BsB,KAAKC,IAAIlD,KAAKG,MAAO0C,EAAS,IAE7C7C,KAAKiB,qBAAqBU,GAAYoB,EACtC/C,KAAKgB,mBAAmBmC,KAAKJ,GAC7B/C,KAAKgB,mBAAmBoC,MAAK,SAAUC,EAAGC,GACtC,OAAOD,EAAE1B,SAAW2B,EAAE3B,aAI9BoB,EAAqBlB,aAAagB,GAAUC,GAKhDhD,EAAQoC,UAAUqB,WAAa,SAAUpD,EAAOC,EAAQiB,EAAWb,GAC/DR,KAAKqB,UAAYA,EACjBrB,KAAKQ,iBAAmBA,EAExBR,KAAKG,MAAQA,EACbH,KAAKI,OAASA,EAMd,IADA,IAAIoD,EAAS,IAAI1B,MAAM3B,GACdsD,EAAI,EAAGA,EAAItD,EAAOsD,IACvBD,EAAOC,GAAK,EAIhBzD,KAAKE,OAAS,IAAI4B,MAAM1B,GACxB,IAAK,IAAIsD,EAAI,EAAGA,EAAItD,EAAQsD,IACxB1D,KAAKE,OAAOwD,GAAKF,EAAOb,QAc5B3C,KAAKY,cAAgB,IAAIkB,MAAM9B,KAAKI,QACpCJ,KAAKa,cAAgB,IAAIiB,MAAM9B,KAAKG,OAEpCH,KAAKY,cAAc,IAAM,EACzBZ,KAAKa,cAAc,IAAM,EAEzBb,KAAKsB,MAAQnB,EAAQC,EAAS,EAC9BJ,KAAKc,cAAgB,IAAIgB,MAAM9B,KAAKsB,OACpCtB,KAAKe,cAAgB,IAAIe,MAAM9B,KAAKsB,OAEpCtB,KAAKoB,iBAAmBpB,KAAKsB,OAGjCxB,EAAQoC,UAAUyB,aAAe,WAC7B,IAMIC,EAAGC,EANHxC,EAAYrB,KAAKC,MAAMoB,UACvByC,EAAc9D,KAAKC,MAAM6D,YAEzBxC,EAAQD,EAAUqB,OAClBqB,EAAeD,EAAYpB,OAG3BsB,EAAUhE,KAAKE,OAAO,GACtB+D,GAAuC,IAA9BjE,KAAKC,MAAMiE,gBAA4B,EAAI,EACxD,IAAKN,EAAI,EAAGA,EAAItC,EAAOsC,GAAK,EAAG,CAC3B,IAAIO,EAAW9C,EAAUuC,GACrBjC,EAAWwC,EAASxC,SACpBmB,EAAOmB,EAAQE,EAASrB,KACX,IAAbnB,EACAqC,EAAQJ,EAAI,GAAKd,EAEjB9C,KAAK4C,qBAAqBjB,EAAUiC,EAAI,EAAGd,GAG/Ce,EAAWxC,EAAUuC,GAAGQ,MACxBpE,KAAKc,cAAc+C,IAAa,EAChC7D,KAAKe,cAAc8C,GAAYD,EAAI,EACnC5D,KAAKa,cAAc+C,EAAI,GAAKC,EAIhC,IADA,IAAIQ,EAAW,EACNtC,EAAI,EAAGA,EAAIgC,EAAchC,GAAK,EAAG,CACtC,IAOIuC,EAAGC,EAPHC,EAAaV,EAAY/B,GAEzB0C,EAAkBD,EAAWJ,MACjCpE,KAAKc,cAAc2D,GAAmBJ,EACtCrE,KAAKe,cAAc0D,IAAoB,EACvCzE,KAAKY,cAAcyD,GAAYI,EAG/B,IAAIC,EAAQF,EAAWE,MACnBC,EAASD,EAAMhC,OACfkC,EAAM5E,KAAKE,OAAOmE,KACtB,GAAIG,EAAWK,aAAc,CACzB,IAAKP,EAAI,EAAGA,EAAIK,EAAQL,GAAK,EACzBC,EAAOG,EAAMJ,GAEbM,EADS5E,KAAKe,cAAcwD,EAAKJ,SAASC,QAC5BG,EAAKO,YAGvBF,EAAI,GAAKJ,EAAWO,QACjB,CACH,IAAKT,EAAI,EAAGA,EAAIK,EAAQL,GAAK,EACzBC,EAAOG,EAAMJ,GAEbM,EADS5E,KAAKe,cAAcwD,EAAKJ,SAASC,SAC3BG,EAAKO,YAGxBF,EAAI,IAAMJ,EAAWO,OAOjCjF,EAAQoC,UAAU8C,SAAW,SAAU/E,GACnCD,KAAKC,MAAQA,EAEb,IAAIE,EAAQF,EAAMgF,WAAa,EAC3B7E,EAASH,EAAM8D,aAAe,EAKlC,OAFA/D,KAAKuD,WAAWpD,EAAOC,EAAQH,EAAMoB,UAAWpB,EAAMiF,uBACtDlF,KAAK2D,eACE3D,MAGXF,EAAQoC,UAAUiD,mBAAqB,WACnC,GAAInF,KAAKmB,iBAAiBuB,OAAS,EAC/B,OAAO1C,KAAKmB,iBAAiBiE,MAGjC,IAAIhB,EAAQpE,KAAKoB,iBAEjB,OADApB,KAAKoB,kBAAoB,EAClBgD,GAGXtE,EAAQoC,UAAUmD,QAAU,WAIxB,IAHA,IAAIA,EAAU,EAEVnF,EAASF,KAAKE,OACToF,EAAI,EAAGA,EAAItF,KAAKI,OAAQkF,IAE7B,IADA,IAAIV,EAAM1E,EAAOoF,GACRvD,EAAI,EAAGA,EAAI/B,KAAKG,MAAO4B,IACb,IAAX6C,EAAI7C,KACJsD,GAAW,GAKvB,OAAOA,GAAWrF,KAAKI,OAASJ,KAAKG,QAKzCL,EAAQoC,UAAUqD,cAAgB,WAE9B,IAAIC,EAAgBvC,KAAKwC,MAAM,EAAIzF,KAAKD,WACpCW,EAAaV,KAAKE,OAAOF,KAAKK,cAAcL,KAAKM,WACjDoF,EACAzC,KAAKwC,OAAOE,OAAOC,QAAUlF,GAAc8E,GAAiBA,EAEhExF,KAAKU,WAAagF,EACQ,IAAtB1F,KAAKW,eACLX,KAAK6F,iBAAmBH,IAMhC5F,EAAQoC,UAAUM,YAAc,WAC5B,IAAI9B,GAA4C,IAA9BV,KAAKC,MAAMiE,eACzBlE,KAAKU,YAAcV,KAAKU,WAE5B,OAAIV,KAAKC,MAAMmC,8BAAgC,EACpC,IAAIvC,EAAaG,KAAMU,EAAYV,KAAKS,SAAUT,KAAKuB,QAASvB,KAAKyB,wBAErE,IAAI9B,EAASK,KAAMU,EAAYV,KAAKS,SAAUT,KAAKuB,W,kBCxQlE,SAASuE,EAASC,EAAIjD,EAAMsB,EAAOzC,GAC/B3B,KAAK+F,GAAKA,EACV/F,KAAK8C,KAAOA,EACZ9C,KAAKoE,MAAQA,EACbpE,KAAKgG,MAAQ,EACbhG,KAAK2B,SAAWA,EAGpB,SAASsE,EAAgBF,EAAIjD,EAAMsB,EAAOzC,GACtCmE,EAASI,KAAKlG,KAAM+F,EAAIjD,EAAMsB,EAAOzC,GAIzC,SAASwE,EAAcJ,EAAI3B,GACvB0B,EAASI,KAAKlG,KAAM+F,EAAI,EAAG3B,EAAO,GAMtC,SAASgC,EAAKjC,EAAUW,GACpB9E,KAAKmE,SAAWA,EAChBnE,KAAK8E,YAAcA,EAGvB,SAASuB,EAAyBpG,EAAOqG,EAAQ3E,GAC7C,OAAiB,IAAbA,GAA+B,aAAbA,EACX,MAGX2E,EAASA,GAAU,EACnB3E,EAAWA,GAAY,GAEM,IAAzB1B,EAAMiE,iBACNoC,GAAUA,GAGPrG,EAAMsG,YAAYD,EAAQ,IAAOrG,EAAMuG,mBAAoB,GAAO,EAAO7E,IAKpF,SAAS8E,EAAW1B,EAAKF,EAAcT,EAAOnE,GAC1CD,KAAK0G,MAAQ,IAAIP,EAAc,IAAM/B,EAAOA,GAC5CpE,KAAKoE,MAAQA,EACbpE,KAAKC,MAAQA,EACbD,KAAK+E,IAAMA,EACX/E,KAAK6E,aAAeA,EAEpB7E,KAAK0E,MAAQ,GACb1E,KAAK2G,gBAAkB,GAGvB3G,KAAK4G,WAAa,KA4FtB,SAASC,EAASC,EAAiBC,GAC/B/G,KAAKgH,WAAaF,EAClB9G,KAAKiH,WAAaF,EAClB/G,KAAKC,MAAQ6G,EAAgB7G,MAC7BD,KAAK+E,IAAM+B,EAAgB/B,IAC3B/E,KAAK4G,WAAa,KA3ItBX,EAAgB/D,UAAUgF,WAAY,EAKtCf,EAAcjE,UAAUiF,SAAU,EAwClCV,EAAWvE,UAAUkF,QAAU,SAAUtC,EAAaX,GAClD,IAAIN,EAAWM,EAASC,MACpBG,EAAOvE,KAAK2G,gBAAgB9C,GAChC,QAAab,IAATuB,EAEAA,EAAO,IAAI6B,EAAKjC,EAAUW,GAC1B9E,KAAK2G,gBAAgB9C,GAAYU,EACjCvE,KAAK0E,MAAMvB,KAAKoB,IACU,IAAtBvE,KAAK6E,eACLC,GAAeA,GAEnB9E,KAAKC,MAAMoH,4BAA4BrH,KAAMmE,EAAUW,OACpD,CAGH,IAAIwC,EAAiB/C,EAAKO,YAAcA,EACxC9E,KAAKuH,uBAAuBD,EAAgBnD,GAGhD,OAAOnE,MAGXyG,EAAWvE,UAAUsF,WAAa,SAAUjD,GAExC,OAAOvE,MAGXyG,EAAWvE,UAAUuF,iBAAmB,SAAUC,GAC9C,GAAIA,IAAW1H,KAAK+E,IAAK,CACrB,IAAI4C,EAAaD,EAAS1H,KAAK+E,KACL,IAAtB/E,KAAK6E,eACL8C,GAAcA,GAGlB3H,KAAK+E,IAAM2C,EACX1H,KAAKC,MAAM2H,oBAAoB5H,KAAM2H,GAGzC,OAAO3H,MAGXyG,EAAWvE,UAAUqF,uBAAyB,SAAUD,EAAgBnD,GACpE,IAAIN,EAAWM,EAASC,MACxB,IAAkB,IAAdP,EAAJ,CAKA,IAAIU,EAAOvE,KAAK2G,gBAAgB9C,GAChC,QAAab,IAATuB,EAEAvE,KAAKoH,QAAQE,EAAgBnD,QAI7B,GAAImD,IAAmB/C,EAAKO,YAAa,CACrC,IAAI6C,EAAaL,EAAiB/C,EAAKO,aACb,IAAtB9E,KAAK6E,eACL8C,GAAcA,GAGlBpD,EAAKO,YAAcwC,EACnBtH,KAAKC,MAAMoH,4BAA4BrH,KAAMmE,EAAUwD,GAI/D,OAAO3H,KAtBH6H,QAAQC,KAAK,6FAyBrBrB,EAAWvE,UAAU6F,MAAQ,SAAUzB,EAAQ3E,GAC3C3B,KAAK4G,WAAaP,EAAyBrG,KAAKC,MAAOqG,EAAQ3E,GAC/D3B,KAAKgI,OAAOhI,KAAK4G,aAGrBH,EAAWvE,UAAU8F,OAAS,SAAUC,GACT,OAAvBA,IAKAjI,KAAK6E,aACL7E,KAAKuH,wBAAwB,EAAGU,GAEhCjI,KAAKuH,uBAAuB,EAAGU,KAcvCpB,EAAS3E,UAAUgG,YAAa,EAEhCrB,EAAS3E,UAAUkF,QAAU,SAAUtC,EAAaX,GAGhD,OAFAnE,KAAKgH,WAAWI,QAAQtC,EAAaX,GACrCnE,KAAKiH,WAAWG,QAAQtC,EAAaX,GAC9BnE,MAGX6G,EAAS3E,UAAUsF,WAAa,SAAUjD,GAGtC,OAFAvE,KAAKgH,WAAWQ,WAAWjD,GAC3BvE,KAAKiH,WAAWO,WAAWjD,GACpBvE,MAGX6G,EAAS3E,UAAUuF,iBAAmB,SAAU1C,GAC5C/E,KAAKgH,WAAWS,iBAAiB1C,GACjC/E,KAAKiH,WAAWQ,iBAAiB1C,GACjC/E,KAAK+E,IAAMA,GAGf8B,EAAS3E,UAAU6F,MAAQ,SAAUzB,EAAQ3E,GACzC3B,KAAK4G,WAAaP,EAAyBrG,KAAKC,MAAOqG,EAAQ3E,GAC/D3B,KAAKgH,WAAWJ,WAAa5G,KAAK4G,WAClC5G,KAAKgH,WAAWgB,OAAOhI,KAAK4G,YAC5B5G,KAAKiH,WAAWL,WAAa5G,KAAK4G,WAClC5G,KAAKiH,WAAWe,OAAOhI,KAAK4G,aAIhC5E,EAAOC,QAAU,CACbwE,WAAYA,EACZX,SAAUA,EACVG,gBAAiBA,EACjBE,cAAeA,EACfU,SAAUA,EACVT,KAAMA,I,kBCiGVpE,EAAOC,QAAU,SAAUhC,GAIvB,OAAGA,EAAMyC,OA1Rb,SAAiByF,GACb,IAAIC,EAAM,CAEN,SAAY,WACZ,aAAgB,0BAChB,OAAU,sBACV,OAAU,sBACV,cAAiB,iBACjB,gBAAmB,uBACnB,UAAc,8DACd,UAAa,gDACb,UAAa,kBACb,UAAa,eACb,UAAa,eACb,QAAW,sCACX,SAAY,cAGhBnI,EAAQ,CACJ,OAAU,GACV,SAAY,OACZ,YAAe,GACf,UAAa,IAEjB6D,EAAc,CACV,KAAM,MACN,KAAM,MACN,IAAK,SAETuE,EAAM,GAAaC,EAAM,KAAMC,EAAO,GAAIC,EAAQ,GAClDhE,EAAa,GAAIO,EAAM,EAMH,kBAAVoD,IACNA,EAAQA,EAAMM,MAAM,OAKxB,IAAI,IAAIhF,EAAI,EAAGA,EAAI0E,EAAMzF,OAAQe,IAc7B,GAZAe,EAAa,KAAOf,EAGpB4E,EAAMF,EAAM1E,GAMZ6E,EAAM,KAGHF,EAAIM,aAAaC,KAAKN,GAErBpI,EAAM2I,OAASP,EAAIQ,MAAM,eAAe,IAGxCP,EAAMD,EAAIQ,MAAMT,EAAIU,WAAWC,KAAI,SAASC,GACxC,OAAOA,EAAEC,QAAQ,MAAM,OACxBtG,MAAM,IAMLuG,SAAQ,SAASF,GASTT,EAFI,QAJZA,EAAOS,EAAEH,MAAMT,EAAIe,UAKM,MAAlBH,EAAEI,OAAO,EAAE,IACF,EAED,EAGJb,EAAK,GAGhBA,EAAOc,WAAWd,GAGlBC,EAAQQ,EAAEH,MAAMT,EAAIkB,UAAU,GAAGL,QAAQ,MAAM,IAG/ChJ,EAAMoB,UAAUmH,GAASvI,EAAMoB,UAAUmH,IAAU,GACnDvI,EAAMoB,UAAUmH,GAAOe,KAAOhB,UAIhC,GAAGH,EAAIoB,OAAOb,KAAKN,GAErBC,EAAMD,EAAIQ,MAAMT,EAAIqB,WAAW9G,MAAM,GAGrC1C,EAAMyJ,KAAOzJ,EAAMyJ,MAAQ,GAE3BpB,EAAIY,SAAQ,SAASF,GACjBA,EAAIA,EAAEC,QAAQ,IAAI,IAClBhJ,EAAMyJ,KAAKV,GAAK,UAGjB,GAAGZ,EAAIuB,OAAOhB,KAAKN,GAEtBC,EAAMD,EAAIQ,MAAMT,EAAIwB,WAAWjH,MAAM,GAGrC1C,EAAM4J,SAAW5J,EAAM4J,UAAY,GAEnCvB,EAAIY,SAAQ,SAASF,GACjBA,EAAIA,EAAEC,QAAQ,IAAI,IAClBhJ,EAAM4J,SAASb,GAAK,UAGrB,GAAGZ,EAAI0B,cAAcnB,KAAKN,GAAK,CAClC,IAAI0B,EAAiB1B,EAAI2B,QAAQ,MAIjC1B,IAHgD,IAApByB,EAAyB1B,EAAMA,EAAI1F,MAAMoH,EAAiB,IAG3DlB,MAAMT,EAAIU,WAAWC,KAAI,SAASC,GACzD,OAAOA,EAAEC,QAAQ,MAAM,QAKvBC,SAAQ,SAASF,GAMTT,EAFI,QAFZA,EAAOS,EAAEH,MAAMT,EAAIe,UAGM,MAAlBH,EAAEI,OAAO,EAAE,IACF,EAED,EAGJb,EAAK,GAGhBA,EAAOc,WAAWd,GAIlBC,EAAQQ,EAAEH,MAAMT,EAAIkB,UAAU,GAG9BrJ,EAAMoB,UAAUmH,GAASvI,EAAMoB,UAAUmH,IAAU,GACnDvI,EAAMoB,UAAUmH,GAAOhE,GAAc+D,KAMzCxD,EAAMsE,WAAWhB,EAAIQ,MAAMT,EAAI6B,WAAW,IAI1C5B,EAAMvE,EAAYuE,EAAIQ,MAAMT,EAAI8B,WAAW,IAC3CjK,EAAM6D,YAAYU,GAAcvE,EAAM6D,YAAYU,IAAe,GACjEvE,EAAM6D,YAAYU,GAAY6D,GAAOtD,OAE/BqD,EAAI+B,gBAAgBxB,KAAKN,KAE/BC,EAAMD,EAAIQ,MAAMT,EAAIqB,WAAW9G,MAAM,GAGrC1C,EAAMmK,aAAenK,EAAMmK,cAAgB,GAE3C9B,EAAIY,SAAQ,SAASF,GACjBA,EAAIA,EAAEC,QAAQ,IAAI,IAClBhJ,EAAMmK,aAAapB,GAAK,MAIpC,OAAO/I,EAsGIoK,CAAQpK,GA1FvB,SAAmBA,GAEf,IAAKA,EACD,MAAM,IAAIqK,MAAM,yCAGpB,IAAIC,EAAS,GAGTC,EAAS,CACL,IAAO,KACP,IAAO,KACP,MAAS,KAEbC,EAAU,IAAIC,OAAO,6BAA2C,MAIpE,GAAGzK,EAAM2I,OAKL,IAAI,IAAI+B,KAHRJ,GAAUtK,EAAM2I,OAAS,IAGZ3I,EAAMoB,UAGfpB,EAAMoB,UAAUsJ,GAAGA,GAAK1K,EAAMoB,UAAUsJ,GAAGA,GAAK1K,EAAMoB,UAAUsJ,GAAGA,GAAK,EAGrE1K,EAAMoB,UAAUsJ,GAAG1K,EAAM2K,YACxBL,GAAU,IAAMtK,EAAMoB,UAAUsJ,GAAG1K,EAAM2K,UAAY,IAAMD,EAAE1B,QAAQwB,EAAQ,WAIrFF,GAAU,OASd,IAAI,IAAIM,KAHRN,GAAU,QAGItK,EAAM6D,YAChB,IAAI,IAAIgH,KAAK7K,EAAM6D,YAAY+G,GAC3B,GAAwB,qBAAdL,EAAOM,GAAmB,CAEhC,IAAI,IAAIC,KAAK9K,EAAMoB,UAGsB,qBAA3BpB,EAAMoB,UAAU0J,GAAGF,KACzBN,GAAU,IAAMtK,EAAMoB,UAAU0J,GAAGF,GAAM,IAAME,EAAE9B,QAAQwB,EAAQ,MAKzEF,GAAU,IAAMC,EAAOM,GAAK,IAAM7K,EAAM6D,YAAY+G,GAAIC,GACxDP,GAAU,MAOtB,GAAGtK,EAAMyJ,KAEL,IAAI,IAAIsB,KADRT,GAAU,OACKtK,EAAMyJ,KACjBa,GAAU,OAASS,EAAI/B,QAAQwB,EAAQ,KAAO,MAKtD,GAAGxK,EAAMmK,aAEL,IAAI,IAAIa,KADRV,GAAU,OACMtK,EAAMmK,aAClBG,GAAU,gBAAkBU,EAAKhC,QAAQwB,EAAQ,KAAO,MAKhE,OAAOF,EAYIW,CAAUjL,K,kBC3SzB,SAASN,EAASwL,EAASzK,EAAYD,EAAUc,GAC7CvB,KAAKS,SAAWA,EAChBT,KAAKU,WAAaA,EAClBV,KAAKuB,QAAUA,EACfvB,KAAKoL,SAAWD,EAEpBnJ,EAAOC,QAAUtC,EAEjBA,EAASuC,UAAUmJ,oBAAsB,WAWrC,IAVA,IAAIC,EAAc,GAEdH,EAAUnL,KAAKoL,SACfxK,EAAgBuK,EAAQvK,cACxBL,EAAoB4K,EAAQ5K,kBAC5BL,EAASiL,EAAQjL,OACjBI,EAAY6K,EAAQ7K,UACpBiL,EAAUJ,EAAQ/K,OAAS,EAC3BoF,EAAgBvC,KAAKwC,MAAM,EAAI0F,EAAQpL,WAElCuF,EAAI,EAAGA,GAAKiG,EAASjG,GAAK,EAAG,CAClC,IACInB,EAAW5D,EADAK,EAAc0E,IAE7B,QAAiBtC,IAAbmB,IAA+C,IAArBA,EAASgD,QAAvC,CAIA,IAAIqE,EAAWtL,EAAOoF,GAAGhF,GACzBgL,EAAYnH,EAAS4B,IACjB9C,KAAKwC,OAAOE,OAAOC,QAAU4F,GAAYhG,GAAiBA,GAGlE,OAAO8F,I,oBC3BX,IAAIxL,EAAUF,EAAQ,KAItB,SAAS6L,EAAIC,EAAM7H,EAAUmC,GACzBhG,KAAK0L,KAAOA,EACZ1L,KAAK6D,SAAWA,EAChB7D,KAAKgG,MAAQA,EAKjB,SAAS2F,EAAOC,EAAmBC,GAC/B7L,KAAK4L,kBAAoBA,EACzB5L,KAAK6L,KAAOA,EAMhB,SAASC,EAAiBzI,EAAGC,GACzB,OAAOA,EAAEsI,kBAAoBvI,EAAEuI,kBAOnC9L,EAAQoC,UAAU6J,UAAY,SAAUC,GAOpC,GALAhM,KAAKiM,UAELjM,KAAKkM,kBAAkBF,GACvBhM,KAAKsC,UAEDtC,KAAKC,MAAMkM,WAEX,IADA,IAAIC,GAA2B,EACzBA,GAAyB,CAC3B,IAAIC,EAAyBrM,KAAKsM,yBAAwB,GAC1DtM,KAAKuM,eACLvM,KAAKsC,UAEuBtC,KAAKsM,yBAAwB,IAI7B,GAAMD,IAC9BD,GAA2B,KAW3CtM,EAAQoC,UAAUG,aAAe,WAC7B,IAAImK,EAAW,GACXC,EAAa,EACbC,EAAY1M,KAAKC,MAAMyM,UACvBC,GAAgB,EAChBC,EAAe,KAUhB5M,KAAKC,MAAM4M,UAIVD,EAAeE,KAAKC,MAAQ/M,KAAKC,MAAM4M,SAQ3C,IAHA,IAAIG,EAAiBC,IACjBC,EAAa,KACbC,EAAoC,GAC/BC,EAAQ,EAAGA,EAAQpN,KAAKgB,mBAAmB0B,OAAQ0K,GAAS,EACjED,EAAkChK,KAAK8J,KAM3C,IACII,EADAC,EAAS,IAAI3B,GAAQsB,IAAU,IAKnC,IAFAT,EAASrJ,KAAKmK,GAEPd,EAAS9J,OAAS,IAAuB,IAAlBiK,GAA0BG,KAAKC,MAAQH,GAiBjE,GAdIS,EADDrN,KAAKC,MAAMiE,eACYlE,KAAK6F,kBAAoB,EAAI6G,GAE7B1M,KAAK6F,kBAAoB,EAAI6G,GAInDA,EAAY,GACRM,EAAiBK,IACjBV,GAAgB,MAKxBW,EAASd,EAASpH,OACPwG,kBAAoBoB,GAA/B,CAQA,IAAInB,EAAOyB,EAAOzB,KAIlB,GAHA7L,KAAK+L,UAAUF,GAEfY,KACsB,IAAlBzM,KAAKS,SAAT,CAIA,IAAIC,EAAaV,KAAKU,WACtB,KAAIA,EAAasM,GAAjB,CAMA,GAAItM,IAAesM,EAAe,CAE9B,IADA,IAAIO,GAA2B,EACtBC,EAAI,EAAGA,EAAIxN,KAAKgB,mBAAmB0B,UACpC1C,KAAKgB,mBAAmBwM,GAAG3L,aAAa,GAAKsL,EAAkCK,IADnCA,GAAK,EAG9C,GAAIxN,KAAKgB,mBAAmBwM,GAAG3L,aAAa,GAAKsL,EAAkCK,GAAI,CAC1FD,GAA2B,EAC3B,MAIR,GAAIA,EACA,SAKR,IAA0B,IAAtBvN,KAAKyN,aAAuB,CAQ5B,GAHAzN,KAAK0N,cAAe,EAGD,IAAfjB,EAEA,YADAzM,KAAKyB,uBAAyBgL,GAIlCS,EAAaI,EACbN,EAAiBtM,EACjB,IAAK,IAAIiN,EAAQ,EAAGA,EAAQ3N,KAAKgB,mBAAmB0B,OAAQiL,GAAS,EACjER,EAAkCQ,GAAS3N,KAAKgB,mBAAmB2M,GAAO9L,aAAa,OAExF,CACgB,IAAf4K,GAGAzM,KAAK4N,OAgDT,IARA,IAAIzJ,EAAWnE,KAAK6N,uBAEhBhK,EAAWM,EAASC,MAEpB0J,EAAW,GACXC,EAAU,GAEVC,EAAQnC,EAAKnJ,OACRX,EAAI,EAAGA,EAAIiM,EAAOjM,GAAK,EAAG,CAC/B,IAAIkM,EAAMpC,EAAK9J,GACXkM,EAAIpK,WAAaA,EACA,QAAboK,EAAIvC,KACJqC,EAAQ5K,KAAK8K,GAEbH,EAAS3K,KAAK8K,IAGlBH,EAAS3K,KAAK8K,GACdF,EAAQ5K,KAAK8K,IAIrB,IAAIC,EAAMjL,KAAKkL,KAAKhK,EAAS6B,OACzB9C,EAAMD,KAAKmL,MAAMjK,EAAS6B,OAE1BqI,EAAU,IAAI5C,EAAI,MAAO5H,EAAUqK,GACvCJ,EAAS3K,KAAKkL,GAEd,IAAIC,EAAS,IAAI7C,EAAI,MAAO5H,EAAUX,GACtC6K,EAAQ5K,KAAKmL,GAEb9B,EAASrJ,KAAK,IAAIwI,EAAOjL,EAAYoN,IACrCtB,EAASrJ,KAAK,IAAIwI,EAAOjL,EAAYqN,IAKrCvB,EAASpJ,KAAK0I,MAKH,OAAfoB,GAEAlN,KAAK+L,UAAUmB,EAAWrB,MAE9B7L,KAAKyB,uBAAyBgL,I,sCCvOlCzK,EAAOC,QAAU,SAASsM,EAAQtO,GAc9B,IAGIoI,EAMA5E,EAAEC,EAAEiH,EAAEG,EATN0D,EAAavO,EAAM2K,SACnB6D,EAAkBC,KAAKC,MAAMD,KAAKE,UAAU3O,EAAM2K,WAClDiE,EAAOC,OAAOD,KAAK5O,EAAM2K,UAEzBmE,EAAU,EACVC,EAAU,GACVC,EAAa,GACbC,EAAM,GACNC,EAAS,GAOb,WAHOlP,EAAM2K,SAGTnH,EAAI,EAAGA,EAAIoL,EAAKnM,OAAQe,IAExBgL,EAAgBI,EAAKpL,IAAM,EAI/B,IAAIA,EAAI,EAAGA,EAAIoL,EAAKnM,OAAQe,IAAI,CAiB5B,IAAIqH,KAdJ7K,EAAM2K,SAAWiE,EAAKpL,GACtBxD,EAAM2I,OAAS4F,EAAWK,EAAKpL,IAG/B4E,EAAMkG,EAAOa,MAAMnP,OAAO+C,OAAWA,GAAW,GAUvC6L,EAEL,IAAI5O,EAAMoB,UAAUwN,EAAK/D,IAIrB,IAAIH,KAFJtC,EAAIwG,EAAK/D,IAAMzC,EAAIwG,EAAK/D,IAAMzC,EAAIwG,EAAK/D,IAAM,EAEpC7K,EAAMoB,UAERpB,EAAMoB,UAAUsJ,GAAGkE,EAAK/D,KAAOzC,EAAIsC,KAElCtC,EAAIwG,EAAK/D,KAAOzC,EAAIsC,GAAK1K,EAAMoB,UAAUsJ,GAAGkE,EAAK/D,KAYjE,IALAmE,EAAa,OAKTvL,EAAI,EAAGA,EAAImL,EAAKnM,OAAQgB,IACrB2E,EAAIwG,EAAKnL,IACRuL,GAAc,KAAuB,IAAf5G,EAAIwG,EAAKnL,IAAc,GAAK,IAElDuL,GAAc,KAKtB,IAAID,EAAQC,GAAY,CAOpB,IALAD,EAAQC,GAAc,EACtBF,IAIIrL,EAAI,EAAGA,EAAImL,EAAKnM,OAAQgB,IACrB2E,EAAIwG,EAAKnL,MACR+K,EAAgBI,EAAKnL,KAAO2E,EAAIwG,EAAKnL,YAQtC2E,EAAI5H,gBACJ4H,EAAIgH,OACXF,EAAOhM,KAAKkF,IASpB,IAAI5E,EAAI,EAAGA,EAAIoL,EAAKnM,OAAQe,IACxBxD,EAAM6D,YAAY+K,EAAKpL,IAAM,CAAC,MAASgL,EAAgBI,EAAKpL,IAAMsL,GAStE,IAAItL,KALJxD,EAAM2K,SAAW,WAAa3H,KAAKqM,SACnCrP,EAAM2I,OAAS,MAIN3I,EAAMoB,UACXpB,EAAMoB,UAAUoC,GAAG8L,QAAU,EAIjC,IAAI9L,KAAK0L,EACL,IAAIxE,KAAKwE,EAAO1L,GACZyL,EAAIvE,GAAKuE,EAAIvE,IAAM,CAACuD,IAAK,KAAMhL,KAAM,MAO7C,IAAIO,KAAKyL,EACL,IAAIvE,KAAKwE,EACFA,EAAOxE,GAAGlH,IACN0L,EAAOxE,GAAGlH,GAAKyL,EAAIzL,GAAGP,MACrBgM,EAAIzL,GAAGP,IAAMiM,EAAOxE,GAAGlH,IAExB0L,EAAOxE,GAAGlH,GAAKyL,EAAIzL,GAAGyK,MACrBgB,EAAIzL,GAAGyK,IAAMiB,EAAOxE,GAAGlH,MAG3B0L,EAAOxE,GAAGlH,GAAK,EACfyL,EAAIzL,GAAGyK,IAAM,GAOzB,MAAO,CACHsB,SAHJnH,EAAOkG,EAAOa,MAAMnP,OAAO+C,OAAWA,GAAW,GAI7CyM,SAAUN,EACVO,OAAQR,K,oBCjMhB,MAmBIpP,EAAUF,EAAQ,KAClB+P,EAAQ/P,EAAQ,KAChByC,EAAezC,EAAQ,KACvBgQ,EAAchQ,EAAQ,KACtBiQ,EAAajQ,EAAQ,KACrB6G,EAAamJ,EAAYnJ,WACzBX,EAAW8J,EAAY9J,SACvBgK,EAAUF,EAAYE,QACtB1J,EAAOwJ,EAAYxJ,KACnB2J,EAAWnQ,EAAQ,KAGnBoQ,EAAS,WAET,aAEAhQ,KAAK2P,MAAQA,EACb3P,KAAKqC,aAAeA,EACpBrC,KAAKyG,WAAaA,EAClBzG,KAAK8F,SAAWA,EAChB9F,KAAK8P,QAAUA,EACf9P,KAAKoG,KAAOA,EACZpG,KAAKF,QAAUA,EACfE,KAAKiQ,gBAAkB,KAEvBjQ,KAAK+P,SAAWA,EAgBhB/P,KAAKoP,MAAQ,SAAUnP,EAAOF,EAAWmQ,EAAMC,GAM3C,GAAGA,EACC,IAAI,IAAIxH,KAAQkH,EACZ5P,EAAQ4P,EAAWlH,GAAM1I,GAKjC,IAAKA,EACD,MAAM,IAAIqK,MAAM,yCAOpB,GAA6B,kBAAnBrK,EAAM2K,UACTkE,OAAOD,KAAK5O,EAAM2K,SAAW,GAC5B,OAAOhL,EAAQ,IAARA,CAAqBI,KAAMC,GAW1C,GAAGA,EAAMmQ,SAAS,CAEd,IAAIC,EAAUvB,OAAOD,KAAKkB,GAO1B,GANAM,EAAU3B,KAAKE,UAAUyB,IAMrBpQ,EAAMmQ,SAAS7B,OACf,MAAM,IAAIjE,MAAM,kHAAoH+F,GAOxI,IAAIN,EAAS9P,EAAMmQ,SAAS7B,QACxB,MAAM,IAAIjE,MAAM,wBAA0BrK,EAAMmQ,SAAS7B,OAAS,qCAAuC8B,GAG7G,OAAON,EAAS9P,EAAMmQ,SAAS7B,QAAQpM,MAAMlC,GAazCA,aAAiB0P,KAAU,IAC3B1P,EAAQ,IAAI0P,EAAM5P,GAAWuQ,SAASrQ,IAG1C,IAAIsQ,EAAWtQ,EAAMkC,QAOrB,GANAnC,KAAKiQ,gBAAkBhQ,EACvBsQ,EAASjF,YAAciF,EAASlF,sBAK5B6E,EACA,OAAOK,EAKP,IAAIC,EAAQ,GA2BZ,OAxBAA,EAAM/P,SAAW8P,EAAS9P,SAG1B+P,EAAMnB,OAASkB,EAAS7P,WAExB8P,EAAMjP,QAAUgP,EAAShP,QAEtBgP,EAASnF,SAASsC,eACjB8C,EAAM/C,YAAa,GAIvBqB,OAAOD,KAAK0B,EAASjF,aAChBpC,SAAQ,SAAUF,GAKgB,IAA5BuH,EAASjF,YAAYtC,KACpBwH,EAAMxH,GAAKuH,EAASjF,YAAYtC,OAKrCwH,GAenBxQ,KAAKyQ,WAAa7Q,EAAQ,KAsC1BI,KAAK0Q,eAAiB,SAASzQ,GAC3B,OAAOL,EAAQ,IAARA,CAAqBI,KAAMC,UAShC,kBACF,OAAO,IAAI+P,GADT,QAAC,OAAD,aAUVhO,EAAOC,QAAU,IAAI+N,G,oBCnPrBpQ,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KAERoC,EAAOC,QAAUrC,EAAQ,M,oBCHzB,IAAIE,EAAUF,EAAQ,KAMtBE,EAAQoC,UAAUI,QAAU,WAcxB,OAZAtC,KAAKuB,SAAU,EAGfvB,KAAK2Q,UAGiB,IAAlB3Q,KAAKS,UAGLT,KAAK4Q,SAGF5Q,MAUXF,EAAQoC,UAAUyO,OAAS,WAYvB,IAXA,IAAIE,EAAsB7Q,KAAKC,MAAM6Q,eACjCC,EAAkB,GAElB7Q,EAASF,KAAKE,OACdI,EAAYN,KAAKM,UACjB0Q,EAAahR,KAAKG,MAAQ,EAC1BoL,EAAUvL,KAAKI,OAAS,EAGxBqM,EAAa,IAEJ,CAUT,IAFA,IAAIwE,EAAkB,EAClBC,GAAYlR,KAAKD,UACZuF,EAAI,EAAGA,GAAKiG,EAASjG,IAAK,EACiC,IAAjDtF,KAAKQ,iBAAiBR,KAAKY,cAAc0E,IASxD,IAAIU,EAAQ9F,EAAOoF,GAAGhF,GAClB0F,EAAQkL,IACRA,EAAWlL,EACXiL,EAAkB3L,GAK1B,GAAwB,IAApB2L,EAGA,OADAjR,KAAKS,UAAW,EACTgM,EAcX,IAJA,IAAI0E,EAAiB,EACjBC,GAAenE,IACfjJ,EAAU9D,EAAO,GACjBmR,EAAanR,EAAO+Q,GACflP,EAAI,EAAGA,GAAKiP,EAAYjP,IAAK,CAClC,IAAI+C,EAAcuM,EAAWtP,GAU7B,IADgE,IAAjD/B,KAAKQ,iBAAiBR,KAAKa,cAAckB,KACpC+C,GAAe9E,KAAKD,UAAW,CAC/C,IAAIuR,GAAYtN,EAAQjC,GAAK+C,EACzBsM,EAAcE,IACdF,EAAcE,EACdH,EAAiBpP,IAK7B,GAAuB,IAAnBoP,EAGA,OADAnR,KAAKS,UAAW,EACTgM,EAGX,GAAGoE,EAAoB,CACnBE,EAAgB5N,KAAK,CAACnD,KAAKY,cAAcqQ,GAAkBjR,KAAKa,cAAcsQ,KAE9E,IAAII,EAAYvR,KAAK8Q,eAAeC,GACpC,GAAGQ,EAAU7O,OAAS,EAOlB,OALA1C,KAAKC,MAAMuR,SAASrO,KAAK,oBACzBnD,KAAKC,MAAMuR,SAASrO,KAAK,UAAWoO,EAAU,IAC9CvR,KAAKC,MAAMuR,SAASrO,KAAK,WAAYoO,EAAU,IAE/CvR,KAAKS,UAAW,EACTgM,EAKfzM,KAAKyR,MAAMR,EAAiBE,GAC5B1E,GAAc,IAStB3M,EAAQoC,UAAU0O,OAAS,WAgBvB,IAfA,IAaIc,EAAatH,EAbbyG,EAAsB7Q,KAAKC,MAAM6Q,eACjCC,EAAkB,GAElB7Q,EAASF,KAAKE,OACdI,EAAYN,KAAKM,UACjB0Q,EAAahR,KAAKG,MAAQ,EAC1BoL,EAAUvL,KAAKI,OAAS,EAExBL,EAAYC,KAAKD,UACjB4R,EAAsB3R,KAAKgB,mBAAmB0B,OAC9CkP,EAAuB,KAEvBnF,EAAa,IAGJ,CACT,IAAIzI,EAAU9D,EAAOF,KAAKK,cAGtBsR,EAAsB,IACtBC,EAAuB,IAM3B,IAHA,IAAIT,EAAiB,EACjBU,EAAgB9R,EAChB+R,GAAwB,EACnB/P,EAAI,EAAGA,GAAKiP,EAAYjP,IAC7B2P,EAAc1N,EAAQjC,GACtBqI,GAAgE,IAAjDpK,KAAKQ,iBAAiBR,KAAKa,cAAckB,IAEpD4P,EAAsB,IAAM5R,EAAY2R,GAAeA,EAAc3R,EACrE6R,EAAqBzO,KAAKpB,GAI1BqI,GAAgBsH,EAAc,GACzBA,EAAcG,IACfA,GAAiBH,EACjBP,EAAiBpP,EACjB+P,GAAwB,GAK5BJ,EAAcG,IACdA,EAAgBH,EAChBP,EAAiBpP,EACjB+P,GAAwB,GAIhC,GAAIH,EAAsB,EAGtB,IADA,IAAInE,EAAI,EACkB,IAAnB2D,GAAwBS,EAAqBlP,OAAS,GAAK8K,EAAImE,GAAqB,CACvF,IAAII,EAAwB,GACxBlQ,EAAe7B,KAAKgB,mBAAmBwM,GAAG3L,aAE9CgQ,EAAgB9R,EAEhB,IAAK,IAAI0D,EAAI,EAAGA,EAAImO,EAAqBlP,OAAQe,IAG7CiO,EAAc7P,EAFdE,EAAI6P,EAAqBnO,IAGzB2G,GAAgE,IAAjDpK,KAAKQ,iBAAiBR,KAAKa,cAAckB,KAEnDhC,EAAY2R,GAAeA,EAAc3R,EAC1CgS,EAAsB5O,KAAKpB,GAI3BqI,GAAgBsH,EAAc,GACzBA,EAAcG,IACfA,GAAiBH,EACjBP,EAAiBpP,EACjB+P,GAAwB,GAK5BJ,EAAcG,IACdA,EAAgBH,EAChBP,EAAiBpP,EACjB+P,GAAwB,GAGhCF,EAAuBG,EACvBvE,GAAK,EAMb,GAAuB,IAAnB2D,EAGA,OAFAnR,KAAKuF,gBACLvF,KAAKW,cAAgB,EACd8L,EASX,IALA,IAAI4E,EAAa,EACbW,EAAc/E,IAIT3H,GAFWtF,KAAKY,cAEZ,GAAG0E,GAAKiG,EAASjG,IAAK,CAC/B,IAAIV,EAAM1E,EAAOoF,GACb4L,EAAWtM,EAAItE,GACf2R,EAAWrN,EAAIuM,GAEnB,MAAKpR,EAAYkS,GAAYA,EAAWlS,GAAxC,CAIA,GAAIkS,EAAW,GAAKlS,EAAYmR,GAAYA,GAAYnR,EAAW,CAC/DiS,EAAc,EACdX,EAAa/L,EACb,MAGJ,IAAIgM,EAAWQ,GAAyBZ,EAAWe,EAAWf,EAAWe,EACrEX,EAAWvR,GAAaiS,EAAcV,IACtCU,EAAcV,EACdD,EAAa/L,IAIrB,GAAI0M,IAAgB/E,IAKhB,OAHAjN,KAAKU,YAAcuM,IACnBjN,KAAKuB,SAAU,EACfvB,KAAKwB,kBAAoBxB,KAAKa,cAAcsQ,GACrC1E,EAGX,GAAGoE,EAAoB,CACnBE,EAAgB5N,KAAK,CAACnD,KAAKY,cAAcyQ,GAAarR,KAAKa,cAAcsQ,KAEzE,IAAII,EAAYvR,KAAK8Q,eAAeC,GACpC,GAAGQ,EAAU7O,OAAS,EAOlB,OALA1C,KAAKC,MAAMuR,SAASrO,KAAK,oBACzBnD,KAAKC,MAAMuR,SAASrO,KAAK,UAAWoO,EAAU,IAC9CvR,KAAKC,MAAMuR,SAASrO,KAAK,WAAYoO,EAAU,IAE/CvR,KAAKS,UAAW,EACTgM,EAIfzM,KAAKyR,MAAMJ,EAAYF,GAAgB,GACvC1E,GAAc,IAOtB,IAAIyF,EAAiB,GAQrBpS,EAAQoC,UAAUuP,MAAQ,SAAUU,EAAeC,GAC/C,IAAIlS,EAASF,KAAKE,OAEdoR,EAAWpR,EAAOiS,GAAeC,GAEjC7G,EAAUvL,KAAKI,OAAS,EACxB4Q,EAAahR,KAAKG,MAAQ,EAE1BkS,EAAoBrS,KAAKY,cAAcuR,GACvCG,EAAqBtS,KAAKa,cAAcuR,GAE5CpS,KAAKY,cAAcuR,GAAiBG,EACpCtS,KAAKa,cAAcuR,GAAoBC,EAEvCrS,KAAKc,cAAcwR,GAAsBH,EACzCnS,KAAKc,cAAcuR,IAAsB,EAEzCrS,KAAKe,cAAcuR,IAAuB,EAC1CtS,KAAKe,cAAcsR,GAAqBD,EAMxC,IAFA,IAiBItN,EAAarB,EAAG8O,EAjBhBC,EAAWtS,EAAOiS,GAClBM,EAAkB,EACb1Q,EAAI,EAAGA,GAAKiP,EAAYjP,IACvByQ,EAASzQ,KAAO,OAASyQ,EAASzQ,IAAM,MAK1CyQ,EAASzQ,GAAK,GAJdyQ,EAASzQ,IAAMuP,EACfY,EAAeO,GAAmB1Q,EAClC0Q,GAAmB,GAK3BD,EAASJ,GAAoB,EAAId,EAOjBtR,KAAKD,UAmBrB,IAnBA,IAmBSuF,EAAI,EAAGA,GAAKiG,EAASjG,IAC1B,GAAIA,IAAM6M,KAEDjS,EAAOoF,GAAG8M,KAAsB,OAASlS,EAAOoF,GAAG8M,IAAqB,OAAO,CAIhF,IAAIxN,EAAM1E,EAAOoF,GAOjB,IAJAR,EAAcF,EAAIwN,MAII,OAAStN,GAAe,MAiBvB,IAAhBA,IACCF,EAAIwN,GAAoB,OAlBsB,CAClD,IAAK3O,EAAI,EAAGA,EAAIgP,EAAiBhP,KAI7B8O,EAAKC,EAHLzQ,EAAImQ,EAAezO,OAIN,OAAS8O,GAAM,MAGd,IAAPA,IACCC,EAASzQ,GAAK,GAHlB6C,EAAI7C,GAAK6C,EAAI7C,GAAK+C,EAAcyN,EAQxC3N,EAAIwN,IAAqBtN,EAAcwM,GAWvD,IAAIK,EAAsB3R,KAAKgB,mBAAmB0B,OAClD,GAAIiP,EAAsB,EACtB,IAAK,IAAInE,EAAI,EAAGA,EAAImE,EAAqBnE,GAAK,EAAG,CAC7C,IAAI3L,EAAe7B,KAAKgB,mBAAmBwM,GAAG3L,aAE9C,GAAoB,KADpBiD,EAAcjD,EAAauQ,IACJ,CACnB,IAAK3O,EAAI,EAAGA,EAAIgP,EAAiBhP,IAGlB,KADX8O,EAAKC,EADLzQ,EAAImQ,EAAezO,OAGf5B,EAAaE,GAAKF,EAAaE,GAAK+C,EAAcyN,GAI1D1Q,EAAauQ,IAAqBtN,EAAcwM,KAQhExR,EAAQoC,UAAU4O,eAAiB,SAAU4B,GACzC,IAAK,IAAIC,EAAK,EAAGA,EAAKD,EAAWhQ,OAAS,EAAGiQ,IACzC,IAAK,IAAIC,EAAKD,EAAK,EAAGC,EAAKF,EAAWhQ,OAAQkQ,IAAM,CAChD,IAAIC,EAAOH,EAAWC,GAClBG,EAAOJ,EAAWE,GACtB,GAAIC,EAAK,KAAOC,EAAK,IAAMD,EAAK,KAAOC,EAAK,GAAI,CAC5C,GAAIF,EAAKD,EAAKD,EAAWhQ,OAASkQ,EAC9B,MAGJ,IADA,IAAIG,GAAa,EACRtP,EAAI,EAAGA,EAAImP,EAAKD,EAAIlP,IAAK,CAC9B,IAAIuP,EAAON,EAAWC,EAAGlP,GACrBwP,EAAOP,EAAWE,EAAGnP,GACzB,GAAGuP,EAAK,KAAOC,EAAK,IAAMD,EAAK,KAAOC,EAAK,GAAI,CAC3CF,GAAa,EACb,OAGR,GAAIA,EACA,MAAO,CAACJ,EAAIC,EAAKD,IAKjC,MAAO,K,oBCxcX,IAAIhT,EAAWC,EAAQ,KAEvB,SAASC,EAAasL,EAASzK,EAAYD,EAAUc,EAASE,GAC1D9B,EAASuG,KAAKlG,KAAMmL,EAASzK,EAAYD,EAAUc,GACnDvB,KAAKkT,KAAOzR,EAEhBO,EAAOC,QAAUpC,EACjBA,EAAaqC,UAAY4M,OAAOqE,OAAOxT,EAASuC,WAChDrC,EAAauT,YAAcvT,G,oBCT3B,IAAIC,EAAUF,EAAQ,KAClBuG,EAAgBvG,EAAQ,KAAqBuG,cAEjDrG,EAAQoC,UAAUgK,kBAAoB,SAAUmH,GAO5C,IANA,IAgBItR,EAhBAuR,EAAkBD,EAAe3Q,OAEjCtC,EAASJ,KAAKI,OACdmT,EAAiBnT,EAASkT,EAGrBE,EAAIpT,EAAQoT,EAAID,EAAgBC,GAAK,OACnBxQ,IAAnBhD,KAAKE,OAAOsT,KACZxT,KAAKE,OAAOsT,GAAKxT,KAAKE,OAAOsT,EAAI,GAAG7Q,SAK5C3C,KAAKI,OAASmT,EACdvT,KAAKsB,MAAQtB,KAAKG,MAAQH,KAAKI,OAAS,EAIxC,IADA,IAAI4Q,EAAahR,KAAKG,MAAQ,EACrBsD,EAAI,EAAGA,EAAI6P,EAAiB7P,GAAK,EAAG,CACzC,IAAIwK,EAAMoF,EAAe5P,GAGrB6B,EAAIlF,EAASqD,EAEbgQ,EAAqB,QAAbxF,EAAIvC,MAAmB,EAAI,EAGnC7H,EAAWoK,EAAIpK,SACf6P,EAAc1T,KAAKc,cAAc+C,GACjC8P,EAAgB3T,KAAKE,OAAOoF,GAChC,IAAqB,IAAjBoO,EAAoB,CAGpB,IADAC,EAAc3T,KAAKM,WAAamT,EAAOxF,EAAIjI,MACtCjE,EAAI,EAAGA,GAAKiP,EAAYjP,GAAK,EAC9B4R,EAAc5R,GAAK,EAEvB4R,EAAc3T,KAAKe,cAAc8C,IAAa4P,MAC3C,CAEH,IAAIG,EAAS5T,KAAKE,OAAOwT,GACrBlI,EAAWoI,EAAO5T,KAAKM,WAE3B,IADAqT,EAAc3T,KAAKM,WAAamT,GAAQxF,EAAIjI,MAAQwF,GAC/CzJ,EAAI,EAAGA,GAAKiP,EAAYjP,GAAK,EAC9B4R,EAAc5R,IAAM0R,EAAOG,EAAO7R,GAK1C,IAAI8R,EAAgB7T,KAAKmF,qBACzBnF,KAAKY,cAAc0E,GAAKuO,EACxB7T,KAAKc,cAAc+S,GAAiBvO,EACpCtF,KAAKe,cAAc8S,IAAkB,EACrC7T,KAAKO,kBAAkBsT,GAAiB,IAAI1N,EAAc,IAAI0N,EAAeA,GAC7E7T,KAAKsB,OAAS,IAItBxB,EAAQoC,UAAU4R,qBAAuB,SAASzP,GAEjD,GAAGA,IAAarE,KAAKK,aAEpB,OAAO,EAGIL,KAAKC,MAAjB,IACIC,EAASF,KAAKE,OAGlB,IADaF,KAAKO,kBAAkBP,KAAKY,cAAcyD,IAC3C6C,UACX,OAAO,EAGR,IAAI8B,EAAI9I,EAAOmE,GAAUrE,KAAKM,WAC1ByT,EAAS/K,EAAI/F,KAAKmL,MAAMpF,GAE5B,GAAI+K,EAAS/T,KAAKD,WAAa,EAAIC,KAAKD,UAAYgU,EACnD,OAAO,EAIR,IAAIzO,EAAItF,KAAKI,OACbF,EAAOoF,GAAKpF,EAAOoF,EAAI,GAAG3C,QAC1B3C,KAAKI,QAAU,EAGfJ,KAAKsB,OAAS,EACd,IAAIuS,EAAgB7T,KAAKmF,qBACzBnF,KAAKY,cAAc0E,GAAKuO,EACxB7T,KAAKc,cAAc+S,GAAiBvO,EACpCtF,KAAKe,cAAc8S,IAAkB,EACrC7T,KAAKO,kBAAkBsT,GAAiB,IAAI1N,EAAc,IAAI0N,EAAeA,GAE7E3T,EAAOoF,GAAGtF,KAAKM,WAAa2C,KAAKmL,MAAMpF,GAEvC,IAAK,IAAIgL,EAAW,EAAGA,EAAWhU,KAAKa,cAAc6B,OAAQsR,GAAY,EAAG,CAG3E,GAFehU,KAAKO,kBAAkBP,KAAKa,cAAcmT,IAE3C9M,UAEP,CACN,IAAI+M,EAAO/T,EAAOmE,GAAU2P,GACxBE,EAAYjR,KAAKmL,MAAM6F,GAAMhR,KAAKC,IAAI,EAAG+Q,EAAOhR,KAAKmL,MAAM6F,GAAQF,IAAW,EAAIA,GACtF7T,EAAOoF,GAAG0O,GAAYE,OAJtBhU,EAAOoF,GAAG0O,GAAY/Q,KAAKiL,IAAI,EAAGhO,EAAOmE,GAAU2P,IAAa,EAAID,IAQtE,IAAI,IAAIhS,EAAI,EAAGA,EAAI/B,KAAKG,MAAO4B,GAAK,EACnC7B,EAAOoF,GAAGvD,IAAM7B,EAAOmE,GAAUtC,GAGlC,OAAO,GAGRjC,EAAQoC,UAAUiS,qBAAuB,SAAS9P,GAEjD,GAAIA,IAAarE,KAAKK,aAErB,OAAO,EAGIL,KAAKC,MAAjB,IACIC,EAASF,KAAKE,OAGlB,IADaF,KAAKO,kBAAkBP,KAAKY,cAAcyD,IAC3C6C,UACX,OAAO,EAGR,IAAI5D,EAAIpD,EAAOmE,GAAUrE,KAAKM,WAC1B8T,EAAI9Q,EAAIL,KAAKmL,MAAM9K,GAEvB,GAAI8Q,EAAIpU,KAAKD,WAAa,EAAIC,KAAKD,UAAYqU,EAC9C,OAAO,EAIR,IAAI9O,EAAItF,KAAKI,OACbF,EAAOoF,GAAKpF,EAAOoF,EAAI,GAAG3C,QAC1B3C,KAAKI,QAAU,EAIfJ,KAAKsB,OAAS,EACd,IAAIuS,EAAgB7T,KAAKmF,qBACzBnF,KAAKY,cAAc0E,GAAKuO,EACxB7T,KAAKc,cAAc+S,GAAiBvO,EACpCtF,KAAKe,cAAc8S,IAAkB,EACrC7T,KAAKO,kBAAkBsT,GAAiB,IAAI1N,EAAc,IAAI0N,EAAeA,GAE7E3T,EAAOoF,GAAGtF,KAAKM,YAAc8T,EAG7B,IAAI,IAAIJ,EAAW,EAAGA,EAAWhU,KAAKa,cAAc6B,OAAQsR,GAAY,EAAG,CAC1E,IAAI7P,EAAWnE,KAAKO,kBAAkBP,KAAKa,cAAcmT,IAErDK,EAAKnU,EAAOmE,GAAU2P,GACtBM,EAAKD,EAAKpR,KAAKmL,MAAMiG,GAEtBlQ,EAAS+C,UAEVhH,EAAOoF,GAAG0O,GADRM,GAAMF,GACeE,IAEC,EAAIA,GAAMF,EAAIE,EAItCpU,EAAOoF,GAAG0O,GADPK,GAAM,GACcA,EAEDA,EAAKD,GAAK,EAAIA,GAKvC,OAAO,GAURtU,EAAQoC,UAAUqK,aAAe,c,oBC1LjC,IAAIzM,EAAUF,EAAQ,KAItBE,EAAQoC,UAAUqS,WAAa,SAAU1Q,GAErC,IAAIyB,EAAItF,KAAKc,cAAc+C,GAC3B,IAAW,IAAPyB,EAAU,CAOV,IAJA,IAAIvD,EAAI/B,KAAKe,cAAc8C,GAIlB2Q,EAAK,EAAGA,EAAKxU,KAAKI,OAAQoU,GAAM,EAAG,CACxC,IAAI1P,EAAc9E,KAAKE,OAAOsU,GAAIzS,GAClC,GAAI+C,GAAe9E,KAAKD,WAAaC,KAAKD,UAAY+E,EAAa,CAC/DQ,EAAIkP,EACJ,OAIRxU,KAAKyR,MAAMnM,EAAGvD,GAGlB,OAAOuD,GAGXxF,EAAQoC,UAAUuS,eAAiB,SAAU5Q,GAEzC,IAAI9B,EAAI/B,KAAKe,cAAc8C,GAC3B,IAAW,IAAP9B,EAAU,CAQV,IALA,IAAIuD,EAAItF,KAAKc,cAAc+C,GAIvB2O,EAAWxS,KAAKE,OAAOoF,GAClBoP,EAAK,EAAGA,EAAK1U,KAAKI,OAAQsU,GAAM,EAAG,CACxC,IAAI5P,EAAc0N,EAASkC,GAC3B,GAAI5P,GAAe9E,KAAKD,WAAaC,KAAKD,UAAY+E,EAAa,CAC/D/C,EAAI2S,EACJ,OAIR1U,KAAKyR,MAAMnM,EAAGvD,GAGlB,OAAOA,GAGXjC,EAAQoC,UAAUK,qBAAuB,WAGrC,IAFA,IAAIjB,EAAQtB,KAAKqB,UAAUqB,OACvB8C,EAAgBvC,KAAKwC,MAAM,EAAIzF,KAAKD,WAC/B6D,EAAI,EAAGA,EAAItC,EAAOsC,GAAK,EAAG,CAC/B,IAAIO,EAAWnE,KAAKqB,UAAUuC,GAC1BC,EAAWM,EAASC,MAEpBkB,EAAItF,KAAKc,cAAc+C,GAC3B,IAAW,IAAPyB,EAEAnB,EAAS6B,MAAQ,MACd,CAEH,IAAIwF,EAAWxL,KAAKE,OAAOoF,GAAGtF,KAAKM,WACnC6D,EAAS6B,MAAQ/C,KAAKwC,OAAO+F,EAAW7F,OAAOC,SAAWJ,GAAiBA,KAKvF1F,EAAQoC,UAAU0F,oBAAsB,SAAUpD,EAAYmD,GAE1D,IAAI4D,EAAUvL,KAAKI,OAAS,EACxBuT,EAAgB3T,KAAKc,cAAc0D,EAAWJ,OAClD,IAAuB,IAAnBuP,EAAsB,CAKtB,IAHA,IAAIgB,EAAc3U,KAAKe,cAAcyD,EAAWJ,OAGvCkB,EAAI,EAAGA,GAAKiG,EAASjG,GAAK,EAAG,CAClC,IAAIV,EAAM5E,KAAKE,OAAOoF,GACtBV,EAAI5E,KAAKM,YAAcqH,EAAa/C,EAAI+P,GAG5C,IAAIhD,EAAsB3R,KAAKgB,mBAAmB0B,OAClD,GAAIiP,EAAsB,EACtB,IAAK,IAAInE,EAAI,EAAGA,EAAImE,EAAqBnE,GAAK,EAAG,CAC7C,IAAI3L,EAAe7B,KAAKgB,mBAAmBwM,GAAG3L,aAC9CA,EAAa7B,KAAKM,YAAcqH,EAAa9F,EAAa8S,SAMlE3U,KAAKE,OAAOyT,GAAe3T,KAAKM,YAAcqH,GAItD7H,EAAQoC,UAAUmF,4BAA8B,SAAU7C,EAAYL,EAAUwD,GAE5E,GAAInD,EAAWJ,QAAUD,EAASC,MAC9B,MAAM,IAAIkG,MAAM,kGAGpB,IAAIhF,EAAItF,KAAKuU,WAAW/P,EAAWJ,OAE/BwQ,EAAS5U,KAAKe,cAAcoD,EAASC,OACzC,IAAgB,IAAZwQ,EAEA,IADA,IAAIC,EAAS7U,KAAKc,cAAcqD,EAASC,OAChCrC,EAAI,EAAGA,EAAI/B,KAAKG,MAAO4B,GAAK,EACjC/B,KAAKE,OAAOoF,GAAGvD,IAAM4F,EAAa3H,KAAKE,OAAO2U,GAAQ9S,QAG1D/B,KAAKE,OAAOoF,GAAGsP,IAAWjN,GAIlC7H,EAAQoC,UAAU4S,WAAa,SAAU3Q,EAAUwD,GAE/C,IAAI9D,EAAWM,EAASC,MACpB4M,EAAahR,KAAKG,MAAQ,EAC1B4U,EAAY/U,KAAKe,cAAc8C,GACnC,IAAmB,IAAfkR,EAAkB,CAElB,IAEIhT,EAFAiT,EAAchV,KAAKE,OAAOF,KAAKc,cAAc+C,IAGjD,GAA0B,IAAtBM,EAASxC,SAAgB,CACzB,IAAIqC,EAAUhE,KAAKE,OAAO,GAG1B,IAAK6B,EAAI,EAAGA,GAAKiP,EAAYjP,GAAK,EAC9BiC,EAAQjC,IAAM4F,EAAaqN,EAAYjT,OAExC,CACH,IAAIF,EAAe7B,KAAKiB,qBAAqBkD,EAASxC,UAAUE,aAChE,IAAKE,EAAI,EAAGA,GAAKiP,EAAYjP,GAAK,EAC9BF,EAAaE,IAAM4F,EAAaqN,EAAYjT,SAMpD/B,KAAKE,OAAO,GAAG6U,IAAcpN,GAIrC7H,EAAQoC,UAAU+S,cAAgB,SAAUzQ,GAExC,IAAIiP,EAAOjP,EAAWK,aAAe,GAAK,EACtC0G,EAAUvL,KAAKI,OAEfuT,EAAgB3T,KAAKE,OAAOqL,QACVvI,IAAlB2Q,IACAA,EAAgB3T,KAAKE,OAAO,GAAGyC,QAC/B3C,KAAKE,OAAOqL,GAAWoI,GAK3B,IADA,IAAI3C,EAAahR,KAAKG,MAAQ,EACrB4B,EAAI,EAAGA,GAAKiP,EAAYjP,GAAK,EAClC4R,EAAc5R,GAAK,EAIvB4R,EAAc3T,KAAKM,WAAamT,EAAOjP,EAAWO,IAIlD,IAFA,IAAIL,EAAQF,EAAWE,MACnBC,EAASD,EAAMhC,OACV4B,EAAI,EAAGA,EAAIK,EAAQL,GAAK,EAAG,CAChC,IAAIC,EAAOG,EAAMJ,GACbQ,EAAcP,EAAKO,YACnBjB,EAAWU,EAAKJ,SAASC,MAEzBsP,EAAc1T,KAAKc,cAAc+C,GACrC,IAAqB,IAAjB6P,EAEAC,EAAc3T,KAAKe,cAAc8C,KAAc4P,EAAO3O,MACnD,CAEH,IAAI8O,EAAS5T,KAAKE,OAAOwT,GACVE,EAAO5T,KAAKM,WAC3B,IAAKyB,EAAI,EAAGA,GAAKiP,EAAYjP,GAAK,EAC9B4R,EAAc5R,IAAM0R,EAAO3O,EAAc8O,EAAO7R,IAK5D,IAAImT,EAAa1Q,EAAWJ,MAC5BpE,KAAKY,cAAc2K,GAAW2J,EAC9BlV,KAAKc,cAAcoU,GAAc3J,EACjCvL,KAAKe,cAAcmU,IAAe,EAElClV,KAAKI,QAAU,GAGnBN,EAAQoC,UAAUiT,iBAAmB,SAAU3Q,GAC3C,IAAI0Q,EAAa1Q,EAAWJ,MACxBmH,EAAUvL,KAAKI,OAAS,EAGxBkF,EAAItF,KAAKuU,WAAWW,GAKpB1R,EAASxD,KAAKE,OAAOqL,GACzBvL,KAAKE,OAAOqL,GAAWvL,KAAKE,OAAOoF,GACnCtF,KAAKE,OAAOoF,GAAK9B,EAGjBxD,KAAKY,cAAc0E,GAAKtF,KAAKY,cAAc2K,GAC3CvL,KAAKY,cAAc2K,IAAY,EAC/BvL,KAAKc,cAAcoU,IAAe,EAGlClV,KAAKmB,iBAAiBnB,KAAKmB,iBAAiBuB,QAAUwS,EAEtD1Q,EAAWkC,MAAMtC,OAAS,EAE1BpE,KAAKI,QAAU,GAGnBN,EAAQoC,UAAUqE,YAAc,SAAUpC,GAItC,IAAIoH,EAAUvL,KAAKI,OAAS,EACxB4Q,EAAahR,KAAKG,MAClB2C,GAAqC,IAA9B9C,KAAKC,MAAMiE,gBAA2BC,EAASrB,KAAOqB,EAASrB,KACtEnB,EAAWwC,EAASxC,SAGpBgQ,EAAsB3R,KAAKgB,mBAAmB0B,OAClD,GAAIiP,EAAsB,EACtB,IAAK,IAAInE,EAAI,EAAGA,EAAImE,EAAqBnE,GAAK,EAC1CxN,KAAKgB,mBAAmBwM,GAAG3L,aAAamP,GAAc,EAI7C,IAAbrP,EACA3B,KAAKE,OAAO,GAAG8Q,GAAclO,GAE7B9C,KAAK4C,qBAAqBjB,EAAUqP,EAAYlO,GAChD9C,KAAKE,OAAO,GAAG8Q,GAAc,GAIjC,IAAK,IAAI1L,EAAI,EAAGA,GAAKiG,EAASjG,GAAK,EAC/BtF,KAAKE,OAAOoF,GAAG0L,GAAc,EAIjC,IAAInN,EAAWM,EAASC,MACxBpE,KAAKa,cAAcmQ,GAAcnN,EAEjC7D,KAAKc,cAAc+C,IAAa,EAChC7D,KAAKe,cAAc8C,GAAYmN,EAE/BhR,KAAKG,OAAS,GAIlBL,EAAQoC,UAAUkT,eAAiB,SAAUjR,GACzC,IAAIN,EAAWM,EAASC,MAGpBrC,EAAI/B,KAAKyU,eAAe5Q,GACxBmN,EAAahR,KAAKG,MAAQ,EAC9B,GAAI4B,IAAMiP,EAAY,CAElB,IADA,IAAIzF,EAAUvL,KAAKI,OAAS,EACnBkF,EAAI,EAAGA,GAAKiG,EAASjG,GAAK,EAAG,CAClC,IAAIV,EAAM5E,KAAKE,OAAOoF,GACtBV,EAAI7C,GAAK6C,EAAIoM,GAGjB,IAAIW,EAAsB3R,KAAKgB,mBAAmB0B,OAClD,GAAIiP,EAAsB,EACtB,IAAK,IAAInE,EAAI,EAAGA,EAAImE,EAAqBnE,GAAK,EAAG,CAC7C,IAAI3L,EAAe7B,KAAKgB,mBAAmBwM,GAAG3L,aAC9CA,EAAaE,GAAKF,EAAamP,GAIvC,IAAIqE,EAAiBrV,KAAKa,cAAcmQ,GACxChR,KAAKa,cAAckB,GAAKsT,EACxBrV,KAAKe,cAAcsU,GAAkBtT,EAIzC/B,KAAKa,cAAcmQ,IAAe,EAClChR,KAAKe,cAAc8C,IAAa,EAGhC7D,KAAKmB,iBAAiBnB,KAAKmB,iBAAiBuB,QAAUmB,EAEtDM,EAASC,OAAS,EAElBpE,KAAKG,OAAS,I,oBC5SJP,EAAQ,KAOdsC,UAAUoT,IAAM,SAAUC,EAASC,GAKvC3N,QAAQyN,IAAI,OAAQC,EAAS,QAC7B1N,QAAQyN,IAAI,eAAgBtV,KAAKG,MAAQ,GACzC0H,QAAQyN,IAAI,iBAAkBtV,KAAKI,OAAS,GAE5CyH,QAAQyN,IAAI,gBAAiBtV,KAAKY,eAClCiH,QAAQyN,IAAI,oBAAqBtV,KAAKa,eACtCgH,QAAQyN,IAAI,OAAQtV,KAAKc,eACzB+G,QAAQyN,IAAI,OAAQtV,KAAKe,eAEzB,IAKI2C,EACA3B,EAEAuD,EACAnB,EACAN,EACA4R,EACAC,EAEAC,EACAC,EAEAhR,EACAiR,EAfAC,EAAmB,GACnBC,EAAiB,CAAC,KAgBtB,IAAKhU,EAAI,EAAGA,EAAI/B,KAAKG,MAAO4B,GAAK,EAC7B8B,EAAW7D,KAAKa,cAAckB,GAQ9B2T,GALID,OADazS,KADjBmB,EAAWnE,KAAKO,kBAAkBsD,IAEpB,IAAMA,EAENM,EAAS4B,IAGCrD,OACdO,KAAK+S,IAAIN,EAAgB,GACnCC,EAAa,IACbC,EAAY,KAeRF,EAAgB,EAChBC,GAAc,IAEdC,GAAa,KAGjBG,EAAehU,GAAK4T,EAEpBG,GAAoBF,EAAYH,EAEpC5N,QAAQyN,IAAIQ,GAKZ,IAAIG,EAAWjW,KAAKE,OAAOF,KAAKK,cAC5B6V,EAAiB,KAerB,IAAKxS,EAAI,EAAGA,EAAI1D,KAAKG,MAAOuD,GAAK,EAE7BwS,GADY,KAEZA,GAAkBH,EAAerS,GACjCwS,GAAkBD,EAASvS,GAAGyS,QAlFb,GA2FrB,IANAD,GADY,KACkBH,EAAe,GACzCE,EAAS,GAAGE,QAtFK,GAuFrBtO,QAAQyN,IAAIY,EAAiB,OAIxB5Q,EAAI,EAAGA,EAAItF,KAAKI,OAAQkF,GAAK,EAAG,CAajC,IAZAV,EAAM5E,KAAKE,OAAOoF,GAClBuQ,EAAY,KAWP9T,EAAI,EAAGA,EAAI/B,KAAKG,MAAO4B,GAAK,EAE7B8T,GADY,KACaE,EAAehU,GAAK6C,EAAI7C,GAAGoU,QA1GvC,GA6GjBN,GADY,KACaE,EAAe,GAAKnR,EAAI,GAAGuR,QA7GnC,GAgHjBtS,EAAW7D,KAAKY,cAAc0E,GAG1BmQ,OADazS,KADjBmB,EAAWnE,KAAKO,kBAAkBsD,IAEpB,IAAMA,EAENM,EAAS4B,GAEvB8B,QAAQyN,IAAIO,EAAY,KAAOJ,GAEnC5N,QAAQyN,IAAI,IAGZ,IAAI3D,EAAsB3R,KAAKgB,mBAAmB0B,OAClD,GAAIiP,EAAsB,EAAG,CACzB9J,QAAQyN,IAAI,4BACZ,IAAK,IAAI9H,EAAI,EAAGA,EAAImE,EAAqBnE,GAAK,EAAG,CAC7C,IAAI3L,EAAe7B,KAAKgB,mBAAmBwM,GAAG3L,aAC1CuU,EAAqB,GACzB,IAAK1S,EAAI,EAAGA,EAAI1D,KAAKG,MAAOuD,GAAK,EAE7B0S,GADYvU,EAAa6B,GAAK,EAAI,GAAK,IAEvC0S,GAAsBL,EAAerS,GACrC0S,GAAsBvU,EAAa6B,GAAGyS,QAtI7B,GAyIbC,IADYvU,EAAa,GAAK,EAAI,GAAK,KACLkU,EAAe,GAC7ClU,EAAa,GAAGsU,QA1IP,GA2IbtO,QAAQyN,IAAIc,EAAqB,KAAO5I,IAMhD,OAHA3F,QAAQyN,IAAI,YAAatV,KAAKS,UAC9BoH,QAAQyN,IAAI,aAActV,KAAKU,YAExBV,O,oBCvKX,IAAIF,EAAUF,EAAQ,KAEtBE,EAAQoC,UAAUO,KAAO,WACrB,IAAIA,EAAO,IAAI3C,EAAQE,KAAKD,WAE5B0C,EAAKtC,MAAQH,KAAKG,MAClBsC,EAAKrC,OAASJ,KAAKI,OAEnBqC,EAAKnB,MAAQtB,KAAKsB,MAClBmB,EAAKxC,MAAQD,KAAKC,MAIlBwC,EAAKpB,UAAYrB,KAAKqB,UACtBoB,EAAKlC,kBAAoBP,KAAKO,kBAC9BkC,EAAKjC,iBAAmBR,KAAKQ,iBAC7BiC,EAAKrB,iBAAmBpB,KAAKoB,iBAG7BqB,EAAK7B,cAAgBZ,KAAKY,cAAc+B,QACxCF,EAAK5B,cAAgBb,KAAKa,cAAc8B,QAExCF,EAAK3B,cAAgBd,KAAKc,cAAc6B,QACxCF,EAAK1B,cAAgBf,KAAKe,cAAc4B,QAExCF,EAAKtB,iBAAmBnB,KAAKmB,iBAAiBwB,QAG9C,IADA,IAAI0T,EAAyB,GACrB7I,EAAI,EAAGA,EAAIxN,KAAKgB,mBAAmB0B,OAAQ8K,IAC/C6I,EAAuB7I,GAAKxN,KAAKgB,mBAAmBwM,GAAG/K,OAE3DA,EAAKzB,mBAAqBqV,EAK1B,IAFA,IAAInW,EAASF,KAAKE,OACdoW,EAAa,IAAIxU,MAAM9B,KAAKI,QACvBkF,EAAI,EAAGA,EAAItF,KAAKI,OAAQkF,IAC7BgR,EAAWhR,GAAKpF,EAAOoF,GAAG3C,QAK9B,OAFAF,EAAKvC,OAASoW,EAEP7T,GAGX3C,EAAQoC,UAAU0L,KAAO,WACrB5N,KAAKkB,WAAalB,KAAKyC,QAG3B3C,EAAQoC,UAAU+J,QAAU,WACxB,GAAwB,OAApBjM,KAAKkB,WAAT,CAIA,IAeIoE,EAAGvD,EAfH6L,EAAO5N,KAAKkB,WACZqV,EAAc3I,EAAK1N,OAevB,IAdAF,KAAKsB,MAAQsM,EAAKtM,MAClBtB,KAAKC,MAAQ2N,EAAK3N,MAGlBD,KAAKqB,UAAYuM,EAAKvM,UACtBrB,KAAKO,kBAAoBqN,EAAKrN,kBAC9BP,KAAKQ,iBAAmBoN,EAAKpN,iBAC7BR,KAAKoB,iBAAmBwM,EAAKxM,iBAE7BpB,KAAKG,MAAQyN,EAAKzN,MAClBH,KAAKI,OAASwN,EAAKxN,OAIdkF,EAAI,EAAGA,EAAItF,KAAKI,OAAQkF,GAAK,EAAG,CACjC,IAAIkR,EAAWD,EAAYjR,GACvBV,EAAM5E,KAAKE,OAAOoF,GACtB,IAAKvD,EAAI,EAAGA,EAAI/B,KAAKG,MAAO4B,GAAK,EAC7B6C,EAAI7C,GAAKyU,EAASzU,GAK1B,IAAI0U,EAAoB7I,EAAKhN,cAC7B,IAAKmB,EAAI,EAAGA,EAAI/B,KAAKI,OAAQ2B,GAAK,EAC9B/B,KAAKY,cAAcmB,GAAK0U,EAAkB1U,GAG9C,KAAO/B,KAAKY,cAAc8B,OAAS1C,KAAKI,QACpCJ,KAAKY,cAAcwE,MAGvB,IAAIsR,EAAuB9I,EAAK/M,cAChC,IAAKyE,EAAI,EAAGA,EAAItF,KAAKG,MAAOmF,GAAK,EAC7BtF,KAAKa,cAAcyE,GAAKoR,EAAqBpR,GAGjD,KAAOtF,KAAKa,cAAc6B,OAAS1C,KAAKG,OACpCH,KAAKa,cAAcuE,MAKvB,IAFA,IAAIuR,EAAY/I,EAAK9M,cACjB8V,EAAYhJ,EAAK7M,cACZ6C,EAAI,EAAGA,EAAI5D,KAAKsB,MAAOsC,GAAK,EACjC5D,KAAKc,cAAc8C,GAAK+S,EAAU/S,GAClC5D,KAAKe,cAAc6C,GAAKgT,EAAUhT,GAItC,GAAIgK,EAAK5M,mBAAmB0B,OAAS,GAAK1C,KAAKgB,mBAAmB0B,OAAS,EAAG,CAC1E1C,KAAKgB,mBAAqB,GAC1BhB,KAAK6W,6BAA+B,GACpC,IAAI,IAAIrJ,EAAI,EAAGA,EAAII,EAAK5M,mBAAmB0B,OAAQ8K,IAAI,CACnD,IAAIsJ,EAAwBlJ,EAAK5M,mBAAmBwM,GAAG/K,OACvDzC,KAAKgB,mBAAmBwM,GAAKsJ,EAC7B9W,KAAK6W,6BAA6BC,EAAsBnV,UAAYmV,O,oBC/GhF,IAAIhX,EAAUF,EAAQ,KAEtB,SAASmX,EAAa3S,EAAO4B,GACzBhG,KAAKoE,MAAQA,EACbpE,KAAKgG,MAAQA,EAKjBlG,EAAQoC,UAAU2L,qBAAuB,WAQrC,IAPA,IAAImJ,EAAkB,EAClBC,EAAmB,KACnBC,EAAmB,KAGnBC,EAAmBnX,KAAKC,MAAMkX,iBAC9BC,EAAeD,EAAiBzU,OAC3BkB,EAAI,EAAGA,EAAIwT,EAAcxT,IAAK,CACnC,IAAIC,EAAWsT,EAAiBvT,GAAGQ,MAC/BwP,EAAS5T,KAAKc,cAAc+C,GAChC,IAAgB,IAAZ+P,EAAJ,CAIA,IAAIpI,EAAWxL,KAAKE,OAAO0T,GAAQ5T,KAAKM,WACpC+W,EAAWpU,KAAK+S,IAAIxK,EAAWvI,KAAKwC,MAAM+F,IAC1CwL,EAAkBK,IAClBL,EAAkBK,EAClBJ,EAAmBpT,EACnBqT,EAAmB1L,IAI3B,OAAO,IAAIuL,EAAaE,EAAkBC,IAK9CpX,EAAQoC,UAAUoV,+BAAiC,WAO/C,IANA,IAAIC,EAActK,IACdgK,EAAmB,KACnBC,EAAmB,KAEnBC,EAAmBnX,KAAKC,MAAMkX,iBAC9BC,EAAeD,EAAiBzU,OAC3BkB,EAAI,EAAGA,EAAIwT,EAAcxT,IAAK,CACnC,IAAIO,EAAWgT,EAAiBvT,GAC5BC,EAAWM,EAASC,MACpBwP,EAAS5T,KAAKc,cAAc+C,GAChC,IAAgB,IAAZ+P,EAAJ,CAMA,IAAIpI,EAAWxL,KAAKE,OAAO0T,GAAQ5T,KAAKM,WACxC,GAAI2C,KAAK+S,IAAIxK,EAAWvI,KAAKwC,MAAM+F,IAAaxL,KAAKD,UAAW,CAC5D,IAAI+C,EAAOqB,EAASrB,KAChByU,EAAczU,IACdyU,EAAczU,EACdmU,EAAmBpT,EACnBqT,EAAmB1L,KAK/B,OAAO,IAAIuL,EAAaE,EAAkBC,K,oBClE9C,IAAIpX,EAAUF,EAAQ,KAEtBE,EAAQoC,UAAUsV,mBAAqB,WAEnC,IADA,IAAIC,EAAQ,EACHnS,EAAI,EAAGA,EAAItF,KAAKI,OAAQkF,GAAK,EAClC,GAAItF,KAAKO,kBAAkBP,KAAKY,cAAc0E,IAAI4B,UAAW,CACzD,IAAIwQ,EAAc1X,KAAKE,OAAOoF,GAAGtF,KAAKM,YACtCoX,GAA4BzU,KAAKmL,MAAMsJ,IACrB1X,KAAKD,YAAc2X,EAAc1X,KAAKD,YACpD0X,GAAS,GAKrB,OAAOA,GAKX3X,EAAQoC,UAAUuL,WAAa,WAG3B,IAFA,IAAI0J,EAAmBnX,KAAKC,MAAMkX,iBAC9BC,EAAeD,EAAiBzU,OAC3BkB,EAAI,EAAGA,EAAIwT,EAAcxT,IAAK,CACnC,IAAIgQ,EAAS5T,KAAKc,cAAcqW,EAAiBvT,GAAGQ,OACpD,IAAgB,IAAZwP,EAAJ,CAIA,IAAIpI,EAAWxL,KAAKE,OAAO0T,GAAQ5T,KAAKM,WACxC,GAAI2C,KAAK+S,IAAIxK,EAAWvI,KAAKwC,MAAM+F,IAAaxL,KAAKD,UACjD,OAAO,GAGf,OAAO,GAIXD,EAAQoC,UAAUoK,wBAA0B,SAASqL,GAyBjD,IAxBA,IAAIC,GAAU,EAwBLtS,EAAI,EAAGA,EAAItF,KAAKI,OAAQkF,GAAK,EAClC,GAAItF,KAAKO,kBAAkBP,KAAKY,cAAc0E,IAAI4B,UAAW,CACzD,IAAInC,EAAM/E,KAAKE,OAAOoF,GAAGtF,KAAKM,WAG9B,GAFAyE,EAAM9B,KAAK+S,IAAIjR,GACG9B,KAAKiL,IAAInJ,EAAM9B,KAAKmL,MAAMrJ,GAAM9B,KAAKmL,MAAMrJ,EAAM,IACjD/E,KAAKD,WACnB,IAAK4X,EACD,OAAO,OAGK,IAAZC,EACAA,EAAS7S,EAET6S,GAAU7S,EAM1B,OAAgB,IAAZ6S,EACO,EAEJA,I,oBC9EX,IAAI9X,EAAUF,EAAQ,KAElBgQ,GADehQ,EAAQ,KACTA,EAAQ,MACtB6G,EAAamJ,EAAYnJ,WACzBI,EAAW+I,EAAY/I,SACvBf,EAAW8J,EAAY9J,SACvBG,EAAkB2J,EAAY3J,gBACvB2J,EAAYxJ,KAMvB,SAASuJ,EAAM5P,EAAW8X,GACtB7X,KAAKmL,QAAU,IAAIrL,EAAQC,GAE3BC,KAAK6X,KAAOA,EAEZ7X,KAAKqB,UAAY,GAEjBrB,KAAKmX,iBAAmB,GAExBnX,KAAKkF,sBAAwB,GAE7BlF,KAAK8D,YAAc,GAEnB9D,KAAK+D,aAAe,EAEpB/D,KAAKiF,WAAa,EAElBjF,KAAKkE,gBAAiB,EAEtBlE,KAAK8X,oBAAqB,EAE1B9X,KAAKwG,gBAAkB,EAEvBxG,KAAKmM,YAAa,EAElBnM,KAAK8Q,gBAAiB,EAOtB9Q,KAAKwR,SAAW,GAEpBxP,EAAOC,QAAU0N,EAEjBA,EAAMzN,UAAU6V,SAAW,WAEvB,OADA/X,KAAKkE,gBAAiB,EACflE,MAGX2P,EAAMzN,UAAU8V,SAAW,WAEvB,OADAhY,KAAKkE,gBAAiB,EACflE,MAUX2P,EAAMzN,UAAU+V,oBAAsB,WAClC,GAAIjY,KAAKmB,iBAAiBuB,OAAS,EAC/B,OAAO1C,KAAKmB,iBAAiBiE,MAGjC,IAAIhB,EAAQpE,KAAKoB,iBAEjB,OADApB,KAAKoB,kBAAoB,EAClBgD,GAGXuL,EAAMzN,UAAUgW,eAAiB,SAAU1T,GACvC,IAAI2T,EAAgB3T,EAAWkC,MAC/B1G,KAAKmL,QAAQ5K,kBAAkB4X,EAAc/T,OAAS+T,EACtDnY,KAAK8D,YAAYX,KAAKqB,GACtBxE,KAAK+D,cAAgB,GACW,IAA5B/D,KAAK8X,oBACL9X,KAAKmL,QAAQ8J,cAAczQ,IAInCmL,EAAMzN,UAAUkW,YAAc,SAAUrT,GACpC,IAAIP,EAAa,IAAIiC,EAAW1B,GAAK,EAAM/E,KAAKmL,QAAQhG,qBAAsBnF,MAE9E,OADAA,KAAKkY,eAAe1T,GACbA,GAGXmL,EAAMzN,UAAUmW,YAAc,SAAUtT,GACpC,IAAIP,EAAa,IAAIiC,EAAW1B,GAAK,EAAO/E,KAAKmL,QAAQhG,qBAAsBnF,MAE/E,OADAA,KAAKkY,eAAe1T,GACbA,GAGXmL,EAAMzN,UAAUoW,MAAQ,SAAUvT,GAC9B,IAAI+B,EAAkB,IAAIL,EAAW1B,GAAK,EAAM/E,KAAKmL,QAAQhG,qBAAsBnF,MACnFA,KAAKkY,eAAepR,GAEpB,IAAIC,EAAkB,IAAIN,EAAW1B,GAAK,EAAO/E,KAAKmL,QAAQhG,qBAAsBnF,MAGpF,OAFAA,KAAKkY,eAAenR,GAEb,IAAIF,EAASC,EAAiBC,IAGzC4I,EAAMzN,UAAUqE,YAAc,SAAUzD,EAAMiD,EAAImB,EAAWqR,EAAgB5W,GACzE,GAAwB,kBAAbA,EACP,OAAQA,GACR,IAAK,WACDA,EAAW,EACX,MACJ,IAAK,SACDA,EAAW,EACX,MACJ,IAAK,SACDA,EAAW,EACX,MACJ,IAAK,OACDA,EAAW,EACX,MACJ,QACIA,EAAW,EAKnB,IAaIwC,EAbAN,EAAW7D,KAAKmL,QAAQhG,qBAkC5B,OAjCW,OAAPY,QAAsB/C,IAAP+C,IACfA,EAAK,IAAMlC,GAGF,OAATf,QAA0BE,IAATF,IACjBA,EAAO,GAGM,OAAbnB,QAAkCqB,IAAbrB,IACrBA,EAAW,GAIXuF,GACA/C,EAAW,IAAI8B,EAAgBF,EAAIjD,EAAMe,EAAUlC,GACnD3B,KAAKmX,iBAAiBhU,KAAKgB,IAE3BA,EAAW,IAAI2B,EAASC,EAAIjD,EAAMe,EAAUlC,GAGhD3B,KAAKqB,UAAU8B,KAAKgB,GACpBnE,KAAKmL,QAAQ5K,kBAAkBsD,GAAYM,EAEvCoU,IACAvY,KAAKkF,sBAAsBrB,IAAY,GAG3C7D,KAAKiF,YAAc,GAEa,IAA5BjF,KAAK8X,oBACL9X,KAAKmL,QAAQ5E,YAAYpC,GAGtBA,GAGXwL,EAAMzN,UAAUsW,kBAAoB,SAAUhU,GAC1C,IAAIiU,EAAMzY,KAAK8D,YAAYkG,QAAQxF,IACtB,IAATiU,GAKJzY,KAAK8D,YAAY4U,OAAOD,EAAK,GAC7BzY,KAAK+D,cAAgB,GAEW,IAA5B/D,KAAK8X,oBACL9X,KAAKmL,QAAQgK,iBAAiB3Q,GAG9BA,EAAWoC,YACX5G,KAAKoV,eAAe5Q,EAAWoC,aAZ/BiB,QAAQC,KAAK,6DAmBrB6H,EAAMzN,UAAUiT,iBAAmB,SAAU3Q,GAQzC,OAPIA,EAAW0D,YACXlI,KAAKwY,kBAAkBhU,EAAWwC,YAClChH,KAAKwY,kBAAkBhU,EAAWyC,aAElCjH,KAAKwY,kBAAkBhU,GAGpBxE,MAGX2P,EAAMzN,UAAUkT,eAAiB,SAAUjR,GACvC,IAAIsU,EAAMzY,KAAKqB,UAAU2I,QAAQ7F,GACjC,IAAa,IAATsU,EAUJ,OANAzY,KAAKqB,UAAUqX,OAAOD,EAAK,IAEK,IAA5BzY,KAAK8X,oBACL9X,KAAKmL,QAAQiK,eAAejR,GAGzBnE,KATH6H,QAAQC,KAAK,yDAYrB6H,EAAMzN,UAAU0F,oBAAsB,SAAUpD,EAAYmD,GAIxD,OAHgC,IAA5B3H,KAAK8X,oBACL9X,KAAKmL,QAAQvD,oBAAoBpD,EAAYmD,GAE1C3H,MAGX2P,EAAMzN,UAAUmF,4BAA8B,SAAU7C,EAAYL,EAAUwD,GAI1E,OAHgC,IAA5B3H,KAAK8X,oBACL9X,KAAKmL,QAAQ9D,4BAA4B7C,EAAYL,EAAUwD,GAE5D3H,MAIX2P,EAAMzN,UAAUyW,QAAU,SAAU7V,EAAMqB,GACtC,IAAIwD,EAAa7E,EAAOqB,EAASrB,KAOjC,OAN4B,IAAxB9C,KAAKkE,iBACLyD,GAAcA,GAGlBxD,EAASrB,KAAOA,EAChB9C,KAAKmL,QAAQ2J,WAAW3Q,EAAUwD,GAC3B3H,MAKX2P,EAAMzN,UAAUoO,SAAW,SAAUsI,GACjC5Y,KAAKkE,eAAuC,QAArB0U,EAAUhQ,OAYjC,IAVA,IAAIvH,EAAYuX,EAAUvX,UACtByC,EAAc8U,EAAU9U,YAExB+U,EAAiB,GACjBC,EAAiB,GAGjBC,EAAgBjK,OAAOD,KAAK/K,GAC5BkV,EAAiBD,EAAcrW,OAE1BX,EAAI,EAAGA,EAAIiX,EAAgBjX,GAAK,EAAG,CACxC,IAQIkF,EAAYD,EARZiS,EAAeF,EAAchX,GAC7ByC,EAAaV,EAAYmV,GACzBX,EAAQ9T,EAAW8T,MAEnBhS,EAAS9B,EAAW8B,OACpB3E,EAAW6C,EAAW7C,SACtBuX,OAAqBlW,IAAXsD,QAAqCtD,IAAbrB,EAGtC,QAAcqB,IAAVsV,EAAqB,CACrB,IAAIpK,EAAM1J,EAAW0J,SACTlL,IAARkL,IACAjH,EAAajH,KAAKqY,YAAYnK,GAC9B2K,EAAeI,GAAgBhS,EAC3BiS,GAAWjS,EAAWc,MAAMzB,EAAQ3E,IAG5C,IAAIuB,EAAMsB,EAAWtB,SACTF,IAARE,IACA8D,EAAahH,KAAKoY,YAAYlV,GAC9B4V,EAAeG,GAAgBjS,EAC3BkS,GAAWlS,EAAWe,MAAMzB,EAAQ3E,QAEzC,CACHsF,EAAajH,KAAKqY,YAAYC,GAC9BO,EAAeI,GAAgBhS,EAE/BD,EAAahH,KAAKoY,YAAYE,GAC9BQ,EAAeG,GAAgBjS,EAE/B,IAAImS,EAAW,IAAItS,EAASI,EAAYD,GACpCkS,GAAWC,EAASpR,MAAMzB,EAAQ3E,IAI9C,IAAIyX,EAActK,OAAOD,KAAKxN,GAC1B4D,EAAamU,EAAY1W,OAU7B1C,KAAK0M,UAAYkM,EAAUlM,WAAa,EAErCkM,EAAU/L,UACT7M,KAAK6M,QAAU+L,EAAU/L,SAa1B+L,EAAUS,UAKNT,EAAUS,QAAQxM,UACjB7M,KAAK6M,QAAU+L,EAAUS,QAAQxM,SAMf,IAAnB7M,KAAK0M,YACJ1M,KAAK0M,UAAYkM,EAAUS,QAAQ3M,WAAa,GAMjDkM,EAAUS,QAAQlN,aACjBnM,KAAKmM,WAAayM,EAAUS,QAAQlN,YASK,qBAAnCyM,EAAUS,QAAQC,aACxBtZ,KAAK8Q,gBAAiB,EAEtB9Q,KAAK8Q,eAAiB8H,EAAUS,QAAQC,cAmBhD,IANA,IAAIC,EAAgBX,EAAUlP,MAAQ,GAClC8P,EAAeZ,EAAU/O,UAAY,GACrC4P,EAAqBb,EAAUxO,cAAgB,GAG/CsP,EAAgBd,EAAUhO,SACrBhH,EAAI,EAAGA,EAAIqB,EAAYrB,GAAK,EAAG,CAEpC,IAAI+V,EAAaP,EAAYxV,GACzBgW,EAAsBvY,EAAUsY,GAChC7W,EAAO8W,EAAoBF,IAAkB,EAC7CG,IAAaL,EAAaG,GAC1BzS,IAAcqS,EAAcI,IAAeE,EAC3CtB,IAAmBkB,EAAmBE,GACtCxV,EAAWnE,KAAKuG,YAAYzD,EAAM6W,EAAYzS,EAAWqR,GAEzDsB,GAEA7Z,KAAKoY,YAAY,GAAGhR,QAAQ,EAAGjD,GAGnC,IAAI2V,EAAkBhL,OAAOD,KAAK+K,GAClC,IAAK7X,EAAI,EAAGA,EAAI+X,EAAgBpX,OAAQX,GAAK,EAAG,CAC5C,IAAIgY,EAAiBD,EAAgB/X,GACrC,GAAIgY,IAAmBL,EAAvB,CAIA,IAAI5U,EAAc8U,EAAoBG,GAElCC,EAAgBnB,EAAekB,QACb/W,IAAlBgX,GACAA,EAAc5S,QAAQtC,EAAaX,GAGvC,IAAI8V,EAAgBnB,EAAeiB,QACb/W,IAAlBiX,GACAA,EAAc7S,QAAQtC,EAAaX,KAK/C,OAAOnE,MAKX2P,EAAMzN,UAAUE,4BAA8B,WAC1C,OAAOpC,KAAKmX,iBAAiBzU,QAGjCiN,EAAMzN,UAAUC,MAAQ,WAOpB,OALgC,IAA5BnC,KAAK8X,qBACL9X,KAAKmL,QAAQnG,SAAShF,MACtBA,KAAK8X,oBAAqB,GAGvB9X,KAAKmL,QAAQhJ,SAGxBwN,EAAMzN,UAAUgY,WAAa,WACzB,OAAOla,KAAKmL,QAAQ1K,UAGxBkP,EAAMzN,UAAU0L,KAAO,WACnB,OAAO5N,KAAKmL,QAAQyC,QAGxB+B,EAAMzN,UAAU+J,QAAU,WACtB,OAAOjM,KAAKmL,QAAQc,WAGxB0D,EAAMzN,UAAUiY,gBAAkB,SAAUhO,GACxCnM,KAAKmM,WAAaA,GAGtBwD,EAAMzN,UAAUkY,MAAQ,SAAUvJ,GAC9B7Q,KAAK8Q,eAAiBD,GAG1BlB,EAAMzN,UAAUoT,IAAM,SAAUC,GAC5B,OAAOvV,KAAKmL,QAAQmK,IAAIC,K,kBCtb5BtT,EAAQoY,yBAA2B,SAASpa,GAMxC,IAAIqa,EACA3P,EAAGI,EAEP,GAA6B,kBAAnB9K,EAAM2K,SAAsB,CAClC,GAAG3K,EAAM6D,YAAY7D,EAAM2K,UAAU,CAKjC,IAAID,KAHJ2P,EAAWrX,KAAKqM,SAGPrP,EAAMoB,UAERpB,EAAMoB,UAAUsJ,GAAG1K,EAAM2K,YACxB3K,EAAMoB,UAAUsJ,GAAG2P,GAAYra,EAAMoB,UAAUsJ,GAAG1K,EAAM2K,WAQhE,OAFA3K,EAAM6D,YAAYwW,GAAYra,EAAM6D,YAAY7D,EAAM2K,iBAC/C3K,EAAM6D,YAAY7D,EAAM2K,UACxB3K,EAEP,OAAOA,EAIX,IAAI8K,KAAK9K,EAAM2K,SACX,GAAG3K,EAAM6D,YAAYiH,GAIjB,GAA4B,UAAzB9K,EAAM6D,YAAYiH,UAGV9K,EAAM2K,SAASG,OAEnB,CAKH,IAAIJ,KAHJ2P,EAAWrX,KAAKqM,SAGPrP,EAAMoB,UAERpB,EAAMoB,UAAUsJ,GAAGI,KAClB9K,EAAMoB,UAAUsJ,GAAG2P,GAAYra,EAAMoB,UAAUsJ,GAAGI,IAK1D9K,EAAM6D,YAAYwW,GAAYra,EAAM6D,YAAYiH,UACzC9K,EAAM6D,YAAYiH,GAIrC,OAAO9K,I,oBCjEf+B,EAAOC,QAAU,CACb,QAAWrC,EAAQ,O,oBCQvB,SAAS2a,EAAWC,GAuChB,OA7BAA,GADAA,GAHAA,EAAOA,EAAKvR,QAAQ,SAAS,SAGjBR,MAAM,SACNgS,QAAO,SAAS9P,GAOxB,OAAkB,IADb,IAAID,OAAO,MAAM,MAChB/B,KAAKgC,KAOO,IADb,IAAID,OAAO,OAAO,MACjB/B,KAAKgC,MAOd5B,KAAI,SAAS4B,GACV,OAAOA,EAAElC,MAAM,sBAElBiS,QAAO,SAASlN,EAAEmN,EAAElX,GAEjB,OADA+J,EAAEmN,EAAE,IAAMA,EAAE,GACLnN,IACT,IAvCNvL,EAAQ2Y,SAAWhb,EAAQ,KAgD3BqC,EAAQE,MAAQ,SAASlC,GAErB,OAAO,IAAI4a,SAAQ,SAASC,EAAKC,GAIR,qBAAXC,QACND,EAAI,qCAKR,IAAIP,EAAO5a,EAAQ,IAARA,CAAyBK,GAGhCA,EAAMmQ,UACN2K,EAAI,oGAOJ9a,EAAMmQ,SAAS6K,SACfF,EAAI,kEAMJ9a,EAAMmQ,SAAS8K,MACfH,EAAI,kEAOJ9a,EAAMmQ,SAAS+K,UACfJ,EAAI,iGAkBCnb,EAAQ,KAEdwb,UAAUnb,EAAMmQ,SAAS+K,SAAUX,GAAM,SAASa,EAAIC,GACrD,GAAGD,EACCN,EAAIM,OACD,CAMH,IAAIE,EAAO3b,EAAQ,KAAiB4b,SAKpCvb,EAAMmQ,SAAS8K,KAAK/X,KAAKlD,EAAMmQ,SAAS+K,UAExCI,EAAKtb,EAAMmQ,SAAS6K,QAAShb,EAAMmQ,SAAS8K,MAAM,SAASO,EAAEjB,GACzD,GAAGiB,EAEC,GAAc,IAAXA,EAAEC,KACDZ,EAAIP,EAAWC,QACZ,CAEH,IAcImB,EAAU,CACV,KAAQF,EAAEC,KACV,QAhBQ,CACR,KAAM,gBACN,EAAK,aACL,EAAK,aACL,EAAK,YACL,EAAK,aACL,EAAK,aACL,EAAK,aACL,EAAK,UACL,EAAK,YACL,GAAM,iBACN,IAAO,cAKUD,EAAEC,MACnB,KAAQlB,GAGZO,EAAIY,QAKRb,EAAIP,EAAWC,gB,iCC1KvC,IAAIoB,EAAY5b,MAAQA,KAAK4b,UAAa,WAStC,OARAA,EAAW9M,OAAO+M,QAAU,SAASvX,GACjC,IAAK,IAAIwX,EAAGrY,EAAI,EAAGsY,EAAIC,UAAUtZ,OAAQe,EAAIsY,EAAGtY,IAE5C,IAAK,IAAIwY,KADTH,EAAIE,UAAUvY,GACOqL,OAAO5M,UAAUga,eAAehW,KAAK4V,EAAGG,KACzD3X,EAAE2X,GAAKH,EAAEG,IAEjB,OAAO3X,IAEK6X,MAAMnc,KAAMgc,YAE5BI,EAAUpc,MAAQA,KAAKoc,QAAW,SAAUN,EAAGL,GAC/C,IAAInX,EAAI,GACR,IAAK,IAAI2X,KAAKH,EAAOhN,OAAO5M,UAAUga,eAAehW,KAAK4V,EAAGG,IAAMR,EAAEzR,QAAQiS,GAAK,IAC9E3X,EAAE2X,GAAKH,EAAEG,IACb,GAAS,MAALH,GAAqD,oBAAjChN,OAAOuN,sBACtB,KAAI5Y,EAAI,EAAb,IAAgBwY,EAAInN,OAAOuN,sBAAsBP,GAAIrY,EAAIwY,EAAEvZ,OAAQe,IAC3DgY,EAAEzR,QAAQiS,EAAExY,IAAM,GAAKqL,OAAO5M,UAAUoa,qBAAqBpW,KAAK4V,EAAGG,EAAExY,MACvEa,EAAE2X,EAAExY,IAAMqY,EAAEG,EAAExY,KAE1B,OAAOa,GAEPiY,EAAmBvc,MAAQA,KAAKuc,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,IAExD1N,OAAO4N,eAAeza,EAAS,aAAc,CAAE+D,OAAO,IACtD,IAAI2W,EAAgB/c,EAAQ,IACxBgd,EAAWL,EAAgB3c,EAAQ,IACnCid,EAAyBjd,EAAQ,KAsHrC,SAASkd,EAAaC,EAAInZ,EAAG4P,GACzB,IAAI7I,EAAIoS,EAAGpS,EAAGG,EAAIiS,EAAGjS,EAAG3K,EAAQ4c,EAAG5c,MAAOC,EAAS2c,EAAG3c,OACtD,MAAO,CACHgE,MAFkE2Y,EAAG3Y,MAGrEuG,EAAGA,EACHG,EAAGA,EACHlH,EAAGA,EACH4P,EAAGA,EACHwJ,IAAM/Z,KAAKC,IAAI9C,EAAQD,GAAS,EAAK8C,KAAKga,OA7HlDhb,EAAQib,gBAAkB,SAAUC,EAAO9D,QACvB,IAAZA,IAAsBA,EAAU,CAAE+D,QAAS,IAChCR,EAASS,QAAQtU,IAAIoU,EAAMG,MAAOR,GACjD,MAAO,CAAEK,MAAOA,IAEpBlb,EAAQsb,qBAAuB,SAAUJ,EAAO9D,QAC5B,IAAZA,IAAsBA,EAAU,CAAE+D,QAAS,IAC/CD,EAAMG,MAAMla,MAAK,SAAUC,EAAGC,GAAK,OAAOD,EAAEe,MAAQd,EAAEc,SACtD,IAAIoZ,EAAeZ,EAASS,QAAQtU,IAAIoU,EAAMG,OAAO,SAAUvB,GAC3D,IAAI0B,EAAQd,EAAce,QAAQ3B,GAClC0B,EAAME,OAAS1a,KAAK2a,GAAK,EACzB,IAAIC,EAAOlB,EAAcmB,YAAYL,GACrC,OAAO7B,EAASA,EAAS,GAAIG,GAAI8B,MAEjCE,EAAKnB,EAASS,QAAQW,OAAOR,EAAc,KAC3CS,EAAKrB,EAASS,QAAQW,OAAOR,EAAc,KAC3CU,EAAWtB,EAASS,QAAQtU,IAAIyU,GAAc,SAAUzB,GACxD,OAAOe,EAAaf,EAAGa,EAASS,QAAQc,UAAUJ,EAAI,CAAC,QAAShC,EAAE3X,QAClEwY,EAASS,QAAQc,UAAUF,EAAI,CAAC,QAASlC,EAAE3X,YAG3CN,EAAc,GAEdiU,EAAW6E,EAASS,QAAQa,GAC3BnV,KAAI,SAAUgU,GACf,IAAI3Y,EAAQ2Y,EAAG3Y,MACf,MAAO,IAAMA,EAAQ,MADK2Y,EAAGpS,EACI,OAASvG,EAAQ,MADd2Y,EAAGjS,KAGtCsT,KAAK,OACVta,EAAYX,KAAK,QAAU4U,EAAW,KAEtCmG,EAAS9a,MAAK,SAAUC,EAAGC,GAAK,OAAOD,EAAEe,MAAQd,EAAEc,SAEnD,IAAK,IAAIX,EAAI,EAAGA,EAAIya,EAASxb,OAAQe,IAAK,CACtC,IAAIsZ,EAAKmB,EAASza,GAAIW,EAAQ2Y,EAAG3Y,MAAOR,EAAImZ,EAAGnZ,EAAG4P,EAAIuJ,EAAGvJ,EACrD5P,EAAI,EAAIma,EAAGrb,QAGXoB,EAAYX,KAAK,IAAMiB,EAAQ,OAAS2Z,EAAGna,EAAI,GAAGQ,MAAQ,UAE1DoP,EAAI,EAAIyK,EAAGvb,QAGXoB,EAAYX,KAAK,IAAMiB,EAAQ,OAAS6Z,EAAGzK,EAAI,GAAGpP,MAAQ,UAIlE8Z,EAAS9a,MAAK,SAAUC,EAAGC,GAAK,OAAOD,EAAEsH,EAAIrH,EAAEqH,KAC/C,IAAK,IAAI0T,EAAO,EAAGA,EAAOH,EAASxb,OAAQ2b,IAIvC,IAHA,IAAIC,EAAKJ,EAASG,GAAqBE,GAAd9a,EAAI6a,EAAGla,MAAYka,EAAGxT,GAAG0T,EAAKF,EAAGtB,IACtDyB,EAAO,KACPC,EAAO,KACFC,EAAON,EAAO,EAAGM,EAAOT,EAASxb,OAAQic,IAAQ,CACtD,IAAIC,EAAKV,EAASS,GAAOjb,EAAIkb,EAAGxa,MAAOya,EAAKD,EAAG9T,EAAGgU,EAAKF,EAAG5B,IAEtDuB,GAAMM,IAAgB,OAATJ,GAAiBI,GAAMJ,KAEpC3a,EAAYX,KAAK,IAAMO,EAAI,OAASD,EAAI,OAASC,EAAI,OAASD,EAAI,QAAU+a,EAAKM,GAAM,KACvFL,EAAOI,GAEPN,GAAMM,IAAgB,OAATH,GAAiBG,GAAMH,KACpC5a,EAAYX,KAAK,IAAMO,EAAI,OAASD,EAAI,OAASC,EAAI,OAASD,EAAI,QAAU+a,EAAKM,GAAM,KACvFJ,EAAOG,GAKnB,IAASza,EAAQ,EAAGA,EAAQ8Z,EAASxb,OAAQ0B,IAAS,CAClD,IAAI2a,EAAKb,EAAS9Z,GAAsBuG,GAAdlH,EAAIsb,EAAG3a,MAAW2a,EAAGpU,GAAGG,EAAIiU,EAAGjU,EACzDhH,EAAYX,KAAK,IAAMM,EAAI,OAASkH,EAAI,KACxC7G,EAAYX,KAAK,IAAMM,EAAI,OAASqH,EAAI,KAG5C,IAAIkU,EAAUlb,EAAYsa,KAAK,MAC3Ba,EAASpC,EAAuBpM,WAAWuO,GAE3CzQ,EAASsO,EAAuBzN,MAAM6P,GACwCC,GAAnE3Q,EAAO9N,SAAmB8N,EAAOc,OAAkBd,EAAOhN,QAAgB6a,EAAO7N,EAAQ,CAAC,WAAY,SAAU,aAE3H4Q,EAAYvC,EAASS,QAAQ+B,UAAUF,GAAM,SAAU7P,EAAQgQ,EAAKC,GACpE,IAAIC,EAAMD,EAAIlW,OAAO,EAAG,GACpBhF,EAAQkb,EAAIlW,OAAO,IACtBiG,EAAOjL,KAAWiL,EAAOjL,GAAS,KAAKmb,GAAOF,IAChD,IAECG,EAAa,GA8BjB,OA7BA5C,EAASS,QAAQnU,QAAQgV,GAAU,SAAUnB,GACzC,IAAI3Y,EAAQ2Y,EAAG3Y,MAAOuG,EAAIoS,EAAGpS,EAAGG,EAAIiS,EAAGjS,EACnC2U,EAAW,CACX9U,EAAGwU,EAAU/a,IAAU+a,EAAU/a,GAAOuG,EAAIwU,EAAU/a,GAAOuG,EAAIA,EACjEG,EAAGqU,EAAU/a,IAAU+a,EAAU/a,GAAO0G,EAAIqU,EAAU/a,GAAO0G,EAAIA,GAEjE2S,EAAQd,EAAce,QAAQ+B,GAClChC,EAAME,OAAS1a,KAAK2a,GAAK,EACzB4B,EAAWpb,GAASuY,EAAcmB,YAAYL,MAqB3C,CAAEN,MAAO,CAAEG,MAlBCV,EAASS,QAAQtU,IAAIoU,EAAMG,OAAO,SAAUP,GAC3D,IAAI3Y,EAAQ2Y,EAAG3Y,MAA2B8a,GAAhBnC,EAAGpS,EAAOoS,EAAGjS,EAAUsR,EAAOW,EAAI,CAAC,QAAS,IAAK,OAC3E,OAAQnB,EAASA,EAAS,CAAExX,MAAOA,GAAS8a,GAAOM,EAAWpb,OAgB3Bsb,MAAOvC,EAAMuC","file":"static/js/3.598148c2.chunk.js","sourcesContent":["/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\nvar Solution = require(\"./Solution.js\");\r\nvar MilpSolution = require(\"./MilpSolution.js\");\r\n\r\n/*************************************************************\r\n * Class: Tableau\r\n * Description: Simplex tableau, holding a the tableau matrix\r\n *              and all the information necessary to perform\r\n *              the simplex algorithm\r\n * Agruments:\r\n *        precision: If we're solving a MILP, how tight\r\n *                   do we want to define an integer, given\r\n *                   that 20.000000000000001 is not an integer.\r\n *                   (defaults to 1e-8)\r\n **************************************************************/\r\nfunction Tableau(precision) {\r\n    this.model = null;\r\n\r\n    this.matrix = null;\r\n    this.width = 0;\r\n    this.height = 0;\r\n\r\n    this.costRowIndex = 0;\r\n    this.rhsColumn = 0;\r\n\r\n    this.variablesPerIndex = [];\r\n    this.unrestrictedVars = null;\r\n\r\n    // Solution attributes\r\n    this.feasible = true; // until proven guilty\r\n    this.evaluation = 0;\r\n    this.simplexIters = 0;\r\n\r\n    this.varIndexByRow = null;\r\n    this.varIndexByCol = null;\r\n\r\n    this.rowByVarIndex = null;\r\n    this.colByVarIndex = null;\r\n\r\n    this.precision = precision || 1e-8;\r\n\r\n    this.optionalObjectives = [];\r\n    this.objectivesByPriority = {};\r\n\r\n    this.savedState = null;\r\n\r\n    this.availableIndexes = [];\r\n    this.lastElementIndex = 0;\r\n\r\n    this.variables = null;\r\n    this.nVars = 0;\r\n\r\n    this.bounded = true;\r\n    this.unboundedVarIndex = null;\r\n\r\n    this.branchAndCutIterations = 0;\r\n}\r\nmodule.exports = Tableau;\r\n\r\nTableau.prototype.solve = function () {\r\n    if (this.model.getNumberOfIntegerVariables() > 0) {\r\n        this.branchAndCut();\r\n    } else {\r\n        this.simplex();\r\n    }\r\n    this.updateVariableValues();\r\n    return this.getSolution();\r\n};\r\n\r\nfunction OptionalObjective(priority, nColumns) {\r\n    this.priority = priority;\r\n    this.reducedCosts = new Array(nColumns);\r\n    for (var c = 0; c < nColumns; c += 1) {\r\n        this.reducedCosts[c] = 0;\r\n    }\r\n}\r\n\r\nOptionalObjective.prototype.copy = function () {\r\n    var copy = new OptionalObjective(this.priority, this.reducedCosts.length);\r\n    copy.reducedCosts = this.reducedCosts.slice();\r\n    return copy;\r\n};\r\n\r\nTableau.prototype.setOptionalObjective = function (priority, column, cost) {\r\n    var objectiveForPriority = this.objectivesByPriority[priority];\r\n    if (objectiveForPriority === undefined) {\r\n        var nColumns = Math.max(this.width, column + 1);\r\n        objectiveForPriority = new OptionalObjective(priority, nColumns);\r\n        this.objectivesByPriority[priority] = objectiveForPriority;\r\n        this.optionalObjectives.push(objectiveForPriority);\r\n        this.optionalObjectives.sort(function (a, b) {\r\n            return a.priority - b.priority;\r\n        });\r\n    }\r\n\r\n    objectiveForPriority.reducedCosts[column] = cost;\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nTableau.prototype.initialize = function (width, height, variables, unrestrictedVars) {\r\n    this.variables = variables;\r\n    this.unrestrictedVars = unrestrictedVars;\r\n\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n\r\n// console.time(\"tableau_build\");\r\n    // BUILD AN EMPTY ARRAY OF THAT WIDTH\r\n    var tmpRow = new Array(width);\r\n    for (var i = 0; i < width; i++) {\r\n        tmpRow[i] = 0;\r\n    }\r\n\r\n    // BUILD AN EMPTY TABLEAU\r\n    this.matrix = new Array(height);\r\n    for (var j = 0; j < height; j++) {\r\n        this.matrix[j] = tmpRow.slice();\r\n    }\r\n\r\n//\r\n// TODO: Benchmark This\r\n//this.matrix = new Array(height).fill(0).map(() => new Array(width).fill(0));\r\n\r\n// console.timeEnd(\"tableau_build\");\r\n// console.log(\"height\",height);\r\n// console.log(\"width\",width);\r\n// console.log(\"------\");\r\n// console.log(\"\");\r\n\r\n\r\n    this.varIndexByRow = new Array(this.height);\r\n    this.varIndexByCol = new Array(this.width);\r\n\r\n    this.varIndexByRow[0] = -1;\r\n    this.varIndexByCol[0] = -1;\r\n\r\n    this.nVars = width + height - 2;\r\n    this.rowByVarIndex = new Array(this.nVars);\r\n    this.colByVarIndex = new Array(this.nVars);\r\n\r\n    this.lastElementIndex = this.nVars;\r\n};\r\n\r\nTableau.prototype._resetMatrix = function () {\r\n    var variables = this.model.variables;\r\n    var constraints = this.model.constraints;\r\n\r\n    var nVars = variables.length;\r\n    var nConstraints = constraints.length;\r\n\r\n    var v, varIndex;\r\n    var costRow = this.matrix[0];\r\n    var coeff = (this.model.isMinimization === true) ? -1 : 1;\r\n    for (v = 0; v < nVars; v += 1) {\r\n        var variable = variables[v];\r\n        var priority = variable.priority;\r\n        var cost = coeff * variable.cost;\r\n        if (priority === 0) {\r\n            costRow[v + 1] = cost;\r\n        } else {\r\n            this.setOptionalObjective(priority, v + 1, cost);\r\n        }\r\n\r\n        varIndex = variables[v].index;\r\n        this.rowByVarIndex[varIndex] = -1;\r\n        this.colByVarIndex[varIndex] = v + 1;\r\n        this.varIndexByCol[v + 1] = varIndex;\r\n    }\r\n\r\n    var rowIndex = 1;\r\n    for (var c = 0; c < nConstraints; c += 1) {\r\n        var constraint = constraints[c];\r\n\r\n        var constraintIndex = constraint.index;\r\n        this.rowByVarIndex[constraintIndex] = rowIndex;\r\n        this.colByVarIndex[constraintIndex] = -1;\r\n        this.varIndexByRow[rowIndex] = constraintIndex;\r\n\r\n        var t, term, column;\r\n        var terms = constraint.terms;\r\n        var nTerms = terms.length;\r\n        var row = this.matrix[rowIndex++];\r\n        if (constraint.isUpperBound) {\r\n            for (t = 0; t < nTerms; t += 1) {\r\n                term = terms[t];\r\n                column = this.colByVarIndex[term.variable.index];\r\n                row[column] = term.coefficient;\r\n            }\r\n\r\n            row[0] = constraint.rhs;\r\n        } else {\r\n            for (t = 0; t < nTerms; t += 1) {\r\n                term = terms[t];\r\n                column = this.colByVarIndex[term.variable.index];\r\n                row[column] = -term.coefficient;\r\n            }\r\n\r\n            row[0] = -constraint.rhs;\r\n        }\r\n    }\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nTableau.prototype.setModel = function (model) {\r\n    this.model = model;\r\n\r\n    var width = model.nVariables + 1;\r\n    var height = model.nConstraints + 1;\r\n\r\n\r\n    this.initialize(width, height, model.variables, model.unrestrictedVariables);\r\n    this._resetMatrix();\r\n    return this;\r\n};\r\n\r\nTableau.prototype.getNewElementIndex = function () {\r\n    if (this.availableIndexes.length > 0) {\r\n        return this.availableIndexes.pop();\r\n    }\r\n\r\n    var index = this.lastElementIndex;\r\n    this.lastElementIndex += 1;\r\n    return index;\r\n};\r\n\r\nTableau.prototype.density = function () {\r\n    var density = 0;\r\n\r\n    var matrix = this.matrix;\r\n    for (var r = 0; r < this.height; r++) {\r\n        var row = matrix[r];\r\n        for (var c = 0; c < this.width; c++) {\r\n            if (row[c] !== 0) {\r\n                density += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return density / (this.height * this.width);\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nTableau.prototype.setEvaluation = function () {\r\n    // Rounding objective value\r\n    var roundingCoeff = Math.round(1 / this.precision);\r\n    var evaluation = this.matrix[this.costRowIndex][this.rhsColumn];\r\n    var roundedEvaluation =\r\n        Math.round((Number.EPSILON + evaluation) * roundingCoeff) / roundingCoeff;\r\n\r\n    this.evaluation = roundedEvaluation;\r\n    if (this.simplexIters === 0) {\r\n        this.bestPossibleEval = roundedEvaluation;\r\n    }\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nTableau.prototype.getSolution = function () {\r\n    var evaluation = (this.model.isMinimization === true) ?\r\n        this.evaluation : -this.evaluation;\r\n\r\n    if (this.model.getNumberOfIntegerVariables() > 0) {\r\n        return new MilpSolution(this, evaluation, this.feasible, this.bounded, this.branchAndCutIterations);\r\n    } else {\r\n        return new Solution(this, evaluation, this.feasible, this.bounded);\r\n    }\r\n};\r\n","/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nfunction Variable(id, cost, index, priority) {\r\n    this.id = id;\r\n    this.cost = cost;\r\n    this.index = index;\r\n    this.value = 0;\r\n    this.priority = priority;\r\n}\r\n\r\nfunction IntegerVariable(id, cost, index, priority) {\r\n    Variable.call(this, id, cost, index, priority);\r\n}\r\nIntegerVariable.prototype.isInteger = true;\r\n\r\nfunction SlackVariable(id, index) {\r\n    Variable.call(this, id, 0, index, 0);\r\n}\r\nSlackVariable.prototype.isSlack = true;\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nfunction Term(variable, coefficient) {\r\n    this.variable = variable;\r\n    this.coefficient = coefficient;\r\n}\r\n\r\nfunction createRelaxationVariable(model, weight, priority) {\r\n    if (priority === 0 || priority === \"required\") {\r\n        return null;\r\n    }\r\n\r\n    weight = weight || 1;\r\n    priority = priority || 1;\r\n\r\n    if (model.isMinimization === false) {\r\n        weight = -weight;\r\n    }\r\n\r\n    return model.addVariable(weight, \"r\" + (model.relaxationIndex++), false, false, priority);\r\n}\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nfunction Constraint(rhs, isUpperBound, index, model) {\r\n    this.slack = new SlackVariable(\"s\" + index, index);\r\n    this.index = index;\r\n    this.model = model;\r\n    this.rhs = rhs;\r\n    this.isUpperBound = isUpperBound;\r\n\r\n    this.terms = [];\r\n    this.termsByVarIndex = {};\r\n\r\n    // Error variable in case the constraint is relaxed\r\n    this.relaxation = null;\r\n}\r\n\r\nConstraint.prototype.addTerm = function (coefficient, variable) {\r\n    var varIndex = variable.index;\r\n    var term = this.termsByVarIndex[varIndex];\r\n    if (term === undefined) {\r\n        // No term for given variable\r\n        term = new Term(variable, coefficient);\r\n        this.termsByVarIndex[varIndex] = term;\r\n        this.terms.push(term);\r\n        if (this.isUpperBound === true) {\r\n            coefficient = -coefficient;\r\n        }\r\n        this.model.updateConstraintCoefficient(this, variable, coefficient);\r\n    } else {\r\n        // Term for given variable already exists\r\n        // updating its coefficient\r\n        var newCoefficient = term.coefficient + coefficient;\r\n        this.setVariableCoefficient(newCoefficient, variable);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nConstraint.prototype.removeTerm = function (term) {\r\n    // TODO\r\n    return this;\r\n};\r\n\r\nConstraint.prototype.setRightHandSide = function (newRhs) {\r\n    if (newRhs !== this.rhs) {\r\n        var difference = newRhs - this.rhs;\r\n        if (this.isUpperBound === true) {\r\n            difference = -difference;\r\n        }\r\n\r\n        this.rhs = newRhs;\r\n        this.model.updateRightHandSide(this, difference);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nConstraint.prototype.setVariableCoefficient = function (newCoefficient, variable) {\r\n    var varIndex = variable.index;\r\n    if (varIndex === -1) {\r\n        console.warn(\"[Constraint.setVariableCoefficient] Trying to change coefficient of inexistant variable.\");\r\n        return;\r\n    }\r\n\r\n    var term = this.termsByVarIndex[varIndex];\r\n    if (term === undefined) {\r\n        // No term for given variable\r\n        this.addTerm(newCoefficient, variable);\r\n    } else {\r\n        // Term for given variable already exists\r\n        // updating its coefficient if changed\r\n        if (newCoefficient !== term.coefficient) {\r\n            var difference = newCoefficient - term.coefficient;\r\n            if (this.isUpperBound === true) {\r\n                difference = -difference;\r\n            }\r\n\r\n            term.coefficient = newCoefficient;\r\n            this.model.updateConstraintCoefficient(this, variable, difference);\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nConstraint.prototype.relax = function (weight, priority) {\r\n    this.relaxation = createRelaxationVariable(this.model, weight, priority);\r\n    this._relax(this.relaxation);\r\n};\r\n\r\nConstraint.prototype._relax = function (relaxationVariable) {\r\n    if (relaxationVariable === null) {\r\n        // Relaxation variable not created, priority was probably \"required\"\r\n        return;\r\n    }\r\n\r\n    if (this.isUpperBound) {\r\n        this.setVariableCoefficient(-1, relaxationVariable);\r\n    } else {\r\n        this.setVariableCoefficient(1, relaxationVariable);\r\n    }\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nfunction Equality(constraintUpper, constraintLower) {\r\n    this.upperBound = constraintUpper;\r\n    this.lowerBound = constraintLower;\r\n    this.model = constraintUpper.model;\r\n    this.rhs = constraintUpper.rhs;\r\n    this.relaxation = null;\r\n}\r\n\r\nEquality.prototype.isEquality = true;\r\n\r\nEquality.prototype.addTerm = function (coefficient, variable) {\r\n    this.upperBound.addTerm(coefficient, variable);\r\n    this.lowerBound.addTerm(coefficient, variable);\r\n    return this;\r\n};\r\n\r\nEquality.prototype.removeTerm = function (term) {\r\n    this.upperBound.removeTerm(term);\r\n    this.lowerBound.removeTerm(term);\r\n    return this;\r\n};\r\n\r\nEquality.prototype.setRightHandSide = function (rhs) {\r\n    this.upperBound.setRightHandSide(rhs);\r\n    this.lowerBound.setRightHandSide(rhs);\r\n    this.rhs = rhs;\r\n};\r\n\r\nEquality.prototype.relax = function (weight, priority) {\r\n    this.relaxation = createRelaxationVariable(this.model, weight, priority);\r\n    this.upperBound.relaxation = this.relaxation;\r\n    this.upperBound._relax(this.relaxation);\r\n    this.lowerBound.relaxation = this.relaxation;\r\n    this.lowerBound._relax(this.relaxation);\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    Constraint: Constraint,\r\n    Variable: Variable,\r\n    IntegerVariable: IntegerVariable,\r\n    SlackVariable: SlackVariable,\r\n    Equality: Equality,\r\n    Term: Term\r\n};\r\n","/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n/*jshint -W083 */\r\n\r\n /*************************************************************\r\n * Method: to_JSON\r\n * Scope: Public:\r\n * Agruments: input: Whatever the user gives us\r\n * Purpose: Convert an unfriendly formatted LP\r\n *          into something that our library can\r\n *          work with\r\n **************************************************************/\r\nfunction to_JSON(input){\r\n    var rxo = {\r\n        /* jshint ignore:start */\r\n        \"is_blank\": /^\\W{0,}$/,\r\n        \"is_objective\": /(max|min)(imize){0,}\\:/i,\r\n        \"is_int\": /^(?!\\/\\*)\\W{0,}int/i,\r\n        \"is_bin\": /^(?!\\/\\*)\\W{0,}bin/i,\r\n        \"is_constraint\": /(\\>|\\<){0,}\\=/i,\r\n        \"is_unrestricted\": /^\\S{0,}unrestricted/i,\r\n        \"parse_lhs\":  /(\\-|\\+){0,1}\\s{0,1}\\d{0,}\\.{0,}\\d{0,}\\s{0,}[A-Za-z]\\S{0,}/gi,\r\n        \"parse_rhs\": /(\\-|\\+){0,1}\\d{1,}\\.{0,}\\d{0,}\\W{0,}\\;{0,1}$/i,\r\n        \"parse_dir\": /(\\>|\\<){0,}\\=/gi,\r\n        \"parse_int\": /[^\\s|^\\,]+/gi,\r\n        \"parse_bin\": /[^\\s|^\\,]+/gi,\r\n        \"get_num\": /(\\-|\\+){0,1}(\\W|^)\\d+\\.{0,1}\\d{0,}/g,\r\n        \"get_word\": /[A-Za-z].*/\r\n        /* jshint ignore:end */\r\n    },\r\n    model = {\r\n        \"opType\": \"\",\r\n        \"optimize\": \"_obj\",\r\n        \"constraints\": {},\r\n        \"variables\": {}\r\n    },\r\n    constraints = {\r\n        \">=\": \"min\",\r\n        \"<=\": \"max\",\r\n        \"=\": \"equal\"\r\n    },\r\n    tmp = \"\", tst = 0, ary = null, hldr = \"\", hldr2 = \"\",\r\n    constraint = \"\", rhs = 0;\r\n\r\n    // Handle input if its coming\r\n    // to us as a hard string\r\n    // instead of as an array of\r\n    // strings\r\n    if(typeof input === \"string\"){\r\n        input = input.split(\"\\n\");\r\n    }\r\n\r\n    // Start iterating over the rows\r\n    // to see what all we have\r\n    for(var i = 0; i < input.length; i++){\r\n\r\n        constraint = \"__\" + i;\r\n\r\n        // Get the string we're working with\r\n        tmp = input[i];\r\n\r\n        // Set the test = 0\r\n        tst = 0;\r\n\r\n        // Reset the array\r\n        ary = null;\r\n\r\n        // Test to see if we're the objective\r\n        if(rxo.is_objective.test(tmp)){\r\n            // Set up in model the opType\r\n            model.opType = tmp.match(/(max|min)/gi)[0];\r\n\r\n            // Pull apart lhs\r\n            ary = tmp.match(rxo.parse_lhs).map(function(d){\r\n                return d.replace(/\\s+/,\"\");\r\n            }).slice(1);\r\n\r\n\r\n\r\n            // *** STEP 1 *** ///\r\n            // Get the variables out\r\n            ary.forEach(function(d){\r\n\r\n                // Get the number if its there\r\n                hldr = d.match(rxo.get_num);\r\n\r\n                // If it isn't a number, it might\r\n                // be a standalone variable\r\n                if(hldr === null){\r\n                    if(d.substr(0,1) === \"-\"){\r\n                        hldr = -1;\r\n                    } else {\r\n                        hldr = 1;\r\n                    }\r\n                } else {\r\n                    hldr = hldr[0];\r\n                }\r\n\r\n                hldr = parseFloat(hldr);\r\n\r\n                // Get the variable type\r\n                hldr2 = d.match(rxo.get_word)[0].replace(/\\;$/,\"\");\r\n\r\n                // Make sure the variable is in the model\r\n                model.variables[hldr2] = model.variables[hldr2] || {};\r\n                model.variables[hldr2]._obj = hldr;\r\n\r\n            });\r\n        ////////////////////////////////////\r\n        }else if(rxo.is_int.test(tmp)){\r\n            // Get the array of ints\r\n            ary = tmp.match(rxo.parse_int).slice(1);\r\n\r\n            // Since we have an int, our model should too\r\n            model.ints = model.ints || {};\r\n\r\n            ary.forEach(function(d){\r\n                d = d.replace(\";\",\"\");\r\n                model.ints[d] = 1;\r\n            });\r\n        ////////////////////////////////////\r\n        } else if(rxo.is_bin.test(tmp)){\r\n            // Get the array of bins\r\n            ary = tmp.match(rxo.parse_bin).slice(1);\r\n\r\n            // Since we have an binary, our model should too\r\n            model.binaries = model.binaries || {};\r\n\r\n            ary.forEach(function(d){\r\n                d = d.replace(\";\",\"\");\r\n                model.binaries[d] = 1;\r\n            });\r\n        ////////////////////////////////////\r\n        } else if(rxo.is_constraint.test(tmp)){\r\n            var separatorIndex = tmp.indexOf(\":\");\r\n            var constraintExpression = (separatorIndex === -1) ? tmp : tmp.slice(separatorIndex + 1);\r\n\r\n            // Pull apart lhs\r\n            ary = constraintExpression.match(rxo.parse_lhs).map(function(d){\r\n                return d.replace(/\\s+/,\"\");\r\n            });\r\n\r\n            // *** STEP 1 *** ///\r\n            // Get the variables out\r\n            ary.forEach(function(d){\r\n                // Get the number if its there\r\n                hldr = d.match(rxo.get_num);\r\n\r\n                if(hldr === null){\r\n                    if(d.substr(0,1) === \"-\"){\r\n                        hldr = -1;\r\n                    } else {\r\n                        hldr = 1;\r\n                    }\r\n                } else {\r\n                    hldr = hldr[0];\r\n                }\r\n\r\n                hldr = parseFloat(hldr);\r\n\r\n\r\n                // Get the variable name\r\n                hldr2 = d.match(rxo.get_word)[0];\r\n\r\n                // Make sure the variable is in the model\r\n                model.variables[hldr2] = model.variables[hldr2] || {};\r\n                model.variables[hldr2][constraint] = hldr;\r\n\r\n            });\r\n\r\n            // *** STEP 2 *** ///\r\n            // Get the RHS out\r\n            rhs = parseFloat(tmp.match(rxo.parse_rhs)[0]);\r\n\r\n            // *** STEP 3 *** ///\r\n            // Get the Constrainer out\r\n            tmp = constraints[tmp.match(rxo.parse_dir)[0]];\r\n            model.constraints[constraint] = model.constraints[constraint] || {};\r\n            model.constraints[constraint][tmp] = rhs;\r\n        ////////////////////////////////////\r\n        } else if(rxo.is_unrestricted.test(tmp)){\r\n            // Get the array of unrestricted\r\n            ary = tmp.match(rxo.parse_int).slice(1);\r\n\r\n            // Since we have an int, our model should too\r\n            model.unrestricted = model.unrestricted || {};\r\n\r\n            ary.forEach(function(d){\r\n                d = d.replace(\";\",\"\");\r\n                model.unrestricted[d] = 1;\r\n            });\r\n        }\r\n    }\r\n    return model;\r\n}\r\n\r\n\r\n /*************************************************************\r\n * Method: from_JSON\r\n * Scope: Public:\r\n * Agruments: model: The model we want solver to operate on\r\n * Purpose: Convert a friendly JSON model into a model for a\r\n *          real solving library...in this case\r\n *          lp_solver\r\n **************************************************************/\r\nfunction from_JSON(model){\r\n    // Make sure we at least have a model\r\n    if (!model) {\r\n        throw new Error(\"Solver requires a model to operate on\");\r\n    }\r\n\r\n    var output = \"\",\r\n        ary = [],\r\n        norm = 1,\r\n        lookup = {\r\n            \"max\": \"<=\",\r\n            \"min\": \">=\",\r\n            \"equal\": \"=\"\r\n        },\r\n        rxClean = new RegExp(\"[^A-Za-z0-9_\\[\\{\\}\\/\\.\\&\\#\\$\\%\\~\\'\\@\\^]\", \"gi\");\r\n\r\n    // Build the objective statement\r\n    \r\n    if(model.opType){\r\n        \r\n        output += model.opType + \":\";\r\n\r\n        // Iterate over the variables\r\n        for(var x in model.variables){\r\n            // Give each variable a self of 1 unless\r\n            // it exists already\r\n            model.variables[x][x] = model.variables[x][x] ? model.variables[x][x] : 1;\r\n\r\n            // Does our objective exist here?\r\n            if(model.variables[x][model.optimize]){\r\n                output += \" \" + model.variables[x][model.optimize] + \" \" + x.replace(rxClean,\"_\");\r\n            }\r\n        }\r\n    } else {\r\n        output += \"max:\";\r\n    }\r\n    \r\n\r\n\r\n    // Add some closure to our line thing\r\n    output += \";\\n\\n\";\r\n\r\n    // And now... to iterate over the constraints\r\n    for(var xx in model.constraints){\r\n        for(var y in model.constraints[xx]){\r\n            if(typeof lookup[y] !== \"undefined\"){\r\n                \r\n                for(var z in model.variables){\r\n\r\n                    // Does our Constraint exist here?\r\n                    if(typeof model.variables[z][xx] !== \"undefined\"){\r\n                        output += \" \" + model.variables[z][xx] + \" \" + z.replace(rxClean,\"_\");\r\n                    }\r\n                }\r\n                // Add the constraint type and value...\r\n\r\n                output += \" \" + lookup[y] + \" \" + model.constraints[xx][y];\r\n                output += \";\\n\";\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    // Are there any ints?\r\n    if(model.ints){\r\n        output += \"\\n\\n\";\r\n        for(var xxx in model.ints){\r\n            output += \"int \" + xxx.replace(rxClean,\"_\") + \";\\n\";\r\n        }\r\n    }\r\n\r\n    // Are there any unrestricted?\r\n    if(model.unrestricted){\r\n        output += \"\\n\\n\";\r\n        for(var xxxx in model.unrestricted){\r\n            output += \"unrestricted \" + xxxx.replace(rxClean,\"_\") + \";\\n\";\r\n        }\r\n    }\r\n\r\n    // And kick the string back\r\n    return output;\r\n\r\n}\r\n\r\n\r\nmodule.exports = function (model) {\r\n    // If the user is giving us an array\r\n    // or a string, convert it to a JSON Model\r\n    // otherwise, spit it out as a string\r\n    if(model.length){\r\n        return to_JSON(model);\r\n    } else {\r\n        return from_JSON(model);\r\n    }\r\n};\r\n","/*global module*/\r\n\r\nfunction Solution(tableau, evaluation, feasible, bounded) {\r\n    this.feasible = feasible;\r\n    this.evaluation = evaluation;\r\n    this.bounded = bounded;\r\n    this._tableau = tableau;\r\n}\r\nmodule.exports = Solution;\r\n\r\nSolution.prototype.generateSolutionSet = function () {\r\n    var solutionSet = {};\r\n\r\n    var tableau = this._tableau;\r\n    var varIndexByRow = tableau.varIndexByRow;\r\n    var variablesPerIndex = tableau.variablesPerIndex;\r\n    var matrix = tableau.matrix;\r\n    var rhsColumn = tableau.rhsColumn;\r\n    var lastRow = tableau.height - 1;\r\n    var roundingCoeff = Math.round(1 / tableau.precision);\r\n\r\n    for (var r = 1; r <= lastRow; r += 1) {\r\n        var varIndex = varIndexByRow[r];\r\n        var variable = variablesPerIndex[varIndex];\r\n        if (variable === undefined || variable.isSlack === true) {\r\n            continue;\r\n        }\r\n\r\n        var varValue = matrix[r][rhsColumn];\r\n        solutionSet[variable.id] =\r\n            Math.round((Number.EPSILON + varValue) * roundingCoeff) / roundingCoeff;\r\n    }\r\n\r\n    return solutionSet;\r\n};\r\n","/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\nvar Tableau = require(\"./Tableau.js\");\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nfunction Cut(type, varIndex, value) {\r\n    this.type = type;\r\n    this.varIndex = varIndex;\r\n    this.value = value;\r\n}\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nfunction Branch(relaxedEvaluation, cuts) {\r\n    this.relaxedEvaluation = relaxedEvaluation;\r\n    this.cuts = cuts;\r\n}\r\n\r\n//-------------------------------------------------------------------\r\n// Branch sorting strategies\r\n//-------------------------------------------------------------------\r\nfunction sortByEvaluation(a, b) {\r\n    return b.relaxedEvaluation - a.relaxedEvaluation;\r\n}\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// Applying cuts on a tableau and resolving\r\n//-------------------------------------------------------------------\r\nTableau.prototype.applyCuts = function (branchingCuts){\r\n    // Restoring initial solution\r\n    this.restore();\r\n\r\n    this.addCutConstraints(branchingCuts);\r\n    this.simplex();\r\n    // Adding MIR cuts\r\n    if (this.model.useMIRCuts){\r\n        var fractionalVolumeImproved = true;\r\n        while(fractionalVolumeImproved){\r\n            var fractionalVolumeBefore = this.computeFractionalVolume(true);\r\n            this.applyMIRCuts();\r\n            this.simplex();\r\n\r\n            var fractionalVolumeAfter = this.computeFractionalVolume(true);\r\n\r\n            // If the new fractional volume is bigger than 90% of the previous one\r\n            // we assume there is no improvement from the MIR cuts\r\n            if(fractionalVolumeAfter >= 0.9 * fractionalVolumeBefore){\r\n                fractionalVolumeImproved = false;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n// Function: MILP\r\n// Detail: Main function, my attempt at a mixed integer linear programming\r\n//         solver\r\n//-------------------------------------------------------------------\r\nTableau.prototype.branchAndCut = function () {\r\n    var branches = [];\r\n    var iterations = 0;\r\n    var tolerance = this.model.tolerance;\r\n    var toleranceFlag = true;\r\n    var terminalTime = 1e99;\r\n    \r\n    //\r\n    // Set Start Time on model...\r\n    // Let's build out a way to *gracefully* quit\r\n    // after {{time}} milliseconds\r\n    //\r\n    \r\n    // 1.) Check to see if there's a timeout on the model\r\n    //\r\n    if(this.model.timeout){\r\n        // 2.) Hooray! There is!\r\n        //     Calculate the final date\r\n        //\r\n        terminalTime = Date.now() + this.model.timeout;\r\n    }\r\n\r\n    // This is the default result\r\n    // If nothing is both *integral* and *feasible*\r\n    var bestEvaluation = Infinity;\r\n    var bestBranch = null;\r\n    var bestOptionalObjectivesEvaluations = [];\r\n    for (var oInit = 0; oInit < this.optionalObjectives.length; oInit += 1){\r\n        bestOptionalObjectivesEvaluations.push(Infinity);\r\n    }\r\n\r\n    // And here...we...go!\r\n\r\n    // 1.) Load a model into the queue\r\n    var branch = new Branch(-Infinity, []);\r\n    var acceptableThreshold;\r\n    \r\n    branches.push(branch);\r\n    // If all branches have been exhausted terminate the loop\r\n    while (branches.length > 0 && toleranceFlag === true && Date.now() < terminalTime) {\r\n        \r\n        if(this.model.isMinimization){\r\n            acceptableThreshold = this.bestPossibleEval * (1 + tolerance);\r\n        } else {\r\n            acceptableThreshold = this.bestPossibleEval * (1 - tolerance);\r\n        }\r\n        \r\n        // Abort while loop if termination tolerance is both specified and condition is met\r\n        if (tolerance > 0) {\r\n            if (bestEvaluation < acceptableThreshold) {\r\n                toleranceFlag = false;\r\n            }\r\n        }\r\n        \r\n        // Get a model from the queue\r\n        branch = branches.pop();\r\n        if (branch.relaxedEvaluation > bestEvaluation) {\r\n            continue;\r\n        }\r\n\r\n        // Solving from initial relaxed solution\r\n        // with additional cut constraints\r\n\r\n        // Adding cut constraints\r\n        var cuts = branch.cuts;\r\n        this.applyCuts(cuts);\r\n\r\n        iterations++;\r\n        if (this.feasible === false) {\r\n            continue;\r\n        }\r\n\r\n        var evaluation = this.evaluation;\r\n        if (evaluation > bestEvaluation) {\r\n            // This branch does not contain the optimal solution\r\n            continue;\r\n        }\r\n\r\n        // To deal with the optional objectives\r\n        if (evaluation === bestEvaluation){\r\n            var isCurrentEvaluationWorse = true;\r\n            for (var o = 0; o < this.optionalObjectives.length; o += 1){\r\n                if (this.optionalObjectives[o].reducedCosts[0] > bestOptionalObjectivesEvaluations[o]){\r\n                    break;\r\n                } else if (this.optionalObjectives[o].reducedCosts[0] < bestOptionalObjectivesEvaluations[o]) {\r\n                    isCurrentEvaluationWorse = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isCurrentEvaluationWorse){\r\n                continue;\r\n            }\r\n        }\r\n\r\n        // Is the model both integral and feasible?\r\n        if (this.isIntegral() === true) {\r\n            \r\n            //\r\n            // Store the fact that we are integral\r\n            //\r\n            this.__isIntegral = true;\r\n            \r\n            \r\n            if (iterations === 1) {\r\n                this.branchAndCutIterations = iterations;\r\n                return;\r\n            }\r\n            // Store the solution as the bestSolution\r\n            bestBranch = branch;\r\n            bestEvaluation = evaluation;\r\n            for (var oCopy = 0; oCopy < this.optionalObjectives.length; oCopy += 1){\r\n                bestOptionalObjectivesEvaluations[oCopy] = this.optionalObjectives[oCopy].reducedCosts[0];\r\n            }\r\n        } else {\r\n            if (iterations === 1) {\r\n                // Saving the first iteration\r\n                // TODO: implement a better strategy for saving the tableau?\r\n                this.save();\r\n            }\r\n\r\n            // If the solution is\r\n            //  a. Feasible\r\n            //  b. Better than the current solution\r\n            //  c. but *NOT* integral\r\n\r\n            // So the solution isn't integral? How do we solve this.\r\n            // We create 2 new models, that are mirror images of the prior\r\n            // model, with 1 exception.\r\n\r\n            // Say we're trying to solve some stupid problem requiring you get\r\n            // animals for your daughter's kindergarten petting zoo party\r\n            // and you have to choose how many ducks, goats, and lambs to get.\r\n\r\n            // Say that the optimal solution to this problem if we didn't have\r\n            // to make it integral was {duck: 8, lambs: 3.5}\r\n            //\r\n            // To keep from traumatizing your daughter and the other children\r\n            // you're going to want to have whole animals\r\n\r\n            // What we would do is find the most fractional variable (lambs)\r\n            // and create new models from the old models, but with a new constraint\r\n            // on apples. The constraints on the low model would look like:\r\n            // constraints: {...\r\n            //   lamb: {max: 3}\r\n            //   ...\r\n            // }\r\n            //\r\n            // while the constraints on the high model would look like:\r\n            //\r\n            // constraints: {...\r\n            //   lamb: {min: 4}\r\n            //   ...\r\n            // }\r\n            // If neither of these models is feasible because of this constraint,\r\n            // the model is not integral at this point, and fails.\r\n\r\n            // Find out where we want to split the solution\r\n            var variable = this.getMostFractionalVar();\r\n\r\n            var varIndex = variable.index;\r\n\r\n            var cutsHigh = [];\r\n            var cutsLow = [];\r\n\r\n            var nCuts = cuts.length;\r\n            for (var c = 0; c < nCuts; c += 1) {\r\n                var cut = cuts[c];\r\n                if (cut.varIndex === varIndex) {\r\n                    if (cut.type === \"min\") {\r\n                        cutsLow.push(cut);\r\n                    } else {\r\n                        cutsHigh.push(cut);\r\n                    }\r\n                } else {\r\n                    cutsHigh.push(cut);\r\n                    cutsLow.push(cut);\r\n                }\r\n            }\r\n\r\n            var min = Math.ceil(variable.value);\r\n            var max = Math.floor(variable.value);\r\n\r\n            var cutHigh = new Cut(\"min\", varIndex, min);\r\n            cutsHigh.push(cutHigh);\r\n\r\n            var cutLow = new Cut(\"max\", varIndex, max);\r\n            cutsLow.push(cutLow);\r\n\r\n            branches.push(new Branch(evaluation, cutsHigh));\r\n            branches.push(new Branch(evaluation, cutsLow));\r\n\r\n            // Sorting branches\r\n            // Branches with the most promising lower bounds\r\n            // will be picked first\r\n            branches.sort(sortByEvaluation);\r\n        }\r\n    }\r\n\r\n    // Adding cut constraints for the optimal solution\r\n    if (bestBranch !== null) {\r\n        // The model is feasible\r\n        this.applyCuts(bestBranch.cuts);\r\n    }\r\n    this.branchAndCutIterations = iterations;\r\n};\r\n","/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n\r\n    /***************************************************************\r\n     * Method: polyopt\r\n     * Scope: private\r\n     * Agruments:\r\n     *        model: The model we want solver to operate on.\r\n                     Because we're in here, we're assuming that\r\n                     we're solving a multi-objective optimization\r\n                     problem. Poly-Optimization. polyopt.\r\n\r\n                     This model has to be formed a little differently\r\n                     because it has multiple objective functions.\r\n                     Normally, a model has 2 attributes: opType (string,\r\n                     \"max\" or \"min\"), and optimize (string, whatever\r\n                     attribute we're optimizing.\r\n\r\n                     Now, there is no opType attribute on the model,\r\n                     and optimize is an object of attributes to be\r\n                     optimized, and how they're to be optimized.\r\n                     For example:\r\n\r\n                     ...\r\n                     \"optimize\": {\r\n                        \"pancakes\": \"max\",\r\n                        \"cost\": \"minimize\"\r\n                     }\r\n                     ...\r\n\r\n\r\n     **************************************************************/\r\n\r\nmodule.exports = function(solver, model){\r\n\r\n    // I have no idea if this is actually works, or what,\r\n    // but here is my algorithm to solve linear programs\r\n    // with multiple objective functions\r\n\r\n    // 1. Optimize for each constraint\r\n    // 2. The results for each solution is a vector\r\n    //    representing a vertex on the polytope we're creating\r\n    // 3. The results for all solutions describes the shape\r\n    //    of the polytope (would be nice to have the equation\r\n    //    representing this)\r\n    // 4. Find the mid-point between all vertices by doing the\r\n    //    following (a_1 + a_2 ... a_n) / n;\r\n    var objectives = model.optimize,\r\n        new_constraints = JSON.parse(JSON.stringify(model.optimize)),\r\n        keys = Object.keys(model.optimize),\r\n        tmp,\r\n        counter = 0,\r\n        vectors = {},\r\n        vector_key = \"\",\r\n        obj = {},\r\n        pareto = [],\r\n        i,j,x,y,z;\r\n\r\n    // Delete the optimize object from the model\r\n    delete model.optimize;\r\n\r\n    // Iterate and Clear\r\n    for(i = 0; i < keys.length; i++){\r\n        // Clean up the new_constraints\r\n        new_constraints[keys[i]] = 0;\r\n    }\r\n\r\n    // Solve and add\r\n    for(i = 0; i < keys.length; i++){\r\n\r\n        // Prep the model\r\n        model.optimize = keys[i];\r\n        model.opType = objectives[keys[i]];\r\n\r\n        // solve the model\r\n        tmp = solver.Solve(model, undefined, undefined, true);\r\n\r\n        // Only the variables make it into the solution;\r\n        // not the attributes.\r\n        //\r\n        // Because of this, we have to add the attributes\r\n        // back onto the solution so we can do math with\r\n        // them later...\r\n\r\n        // Loop over the keys\r\n        for(y in keys){\r\n            // We're only worried about attributes, not variables\r\n            if(!model.variables[keys[y]]){\r\n                // Create space for the attribute in the tmp object\r\n                tmp[keys[y]] = tmp[keys[y]] ? tmp[keys[y]] : 0;\r\n                // Go over each of the variables\r\n                for(x in model.variables){\r\n                    // Does the variable exist in tmp *and* does attribute exist in this model?\r\n                    if(model.variables[x][keys[y]] && tmp[x]){\r\n                        // Add it to tmp\r\n                        tmp[keys[y]] += tmp[x] * model.variables[x][keys[y]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // clear our key\r\n        vector_key = \"base\";\r\n        // this makes sure that if we get\r\n        // the same vector more than once,\r\n        // we only count it once when finding\r\n        // the midpoint\r\n        for(j = 0; j < keys.length; j++){\r\n            if(tmp[keys[j]]){\r\n                vector_key += \"-\" + ((tmp[keys[j]] * 1000) | 0) / 1000;\r\n            } else {\r\n                vector_key += \"-0\";\r\n            }\r\n        }\r\n\r\n        // Check here to ensure it doesn't exist\r\n        if(!vectors[vector_key]){\r\n            // Add the vector-key in\r\n            vectors[vector_key] = 1;\r\n            counter++;\r\n            \r\n            // Iterate over the keys\r\n            // and update our new constraints\r\n            for(j = 0; j < keys.length; j++){\r\n                if(tmp[keys[j]]){\r\n                    new_constraints[keys[j]] += tmp[keys[j]];\r\n                }\r\n            }\r\n            \r\n            // Push the solution into the paretos\r\n            // array after cleaning it of some\r\n            // excess data markers\r\n            \r\n            delete tmp.feasible;\r\n            delete tmp.result;            \r\n            pareto.push(tmp);\r\n        }\r\n    }\r\n\r\n    // Trying to find the mid-point\r\n    // divide each constraint by the\r\n    // number of constraints\r\n    // *midpoint formula*\r\n    // (x1 + x2 + x3) / 3\r\n    for(i = 0; i < keys.length; i++){\r\n        model.constraints[keys[i]] = {\"equal\": new_constraints[keys[i]] / counter};\r\n    }\r\n\r\n    // Give the model a fake thing to optimize on\r\n    model.optimize = \"cheater-\" + Math.random();\r\n    model.opType = \"max\";\r\n\r\n    // And add the fake attribute to the variables\r\n    // in the model\r\n    for(i in model.variables){\r\n        model.variables[i].cheater = 1;\r\n    }\r\n    \r\n    // Build out the object with all attributes\r\n    for(i in pareto){\r\n        for(x in pareto[i]){\r\n            obj[x] = obj[x] || {min: 1e99, max: -1e99};\r\n        }\r\n    }\r\n    \r\n    // Give each pareto a full attribute list\r\n    // while getting the max and min values\r\n    // for each attribute\r\n    for(i in obj){\r\n        for(x in pareto){\r\n            if(pareto[x][i]){\r\n                if(pareto[x][i] > obj[i].max){\r\n                    obj[i].max = pareto[x][i];\r\n                } \r\n                if(pareto[x][i] < obj[i].min){\r\n                    obj[i].min = pareto[x][i];\r\n                }\r\n            } else {\r\n                pareto[x][i] = 0;\r\n                obj[i].min = 0;\r\n            }\r\n        }\r\n    }\r\n    // Solve the model for the midpoints\r\n    tmp =  solver.Solve(model, undefined, undefined, true);\r\n    \r\n    return {\r\n        midpoint: tmp,\r\n        vertices: pareto,\r\n        ranges: obj\r\n    };    \r\n\r\n};\r\n","/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n/*global setTimeout*/\r\n/*global self*/\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// SimplexJS\r\n// https://github.com/\r\n// An Object-Oriented Linear Programming Solver\r\n//\r\n// By Justin Wolcott (c)\r\n// Licensed under the MIT License.\r\n//-------------------------------------------------------------------\r\n\r\nvar Tableau = require(\"./Tableau/index.js\");\r\nvar Model = require(\"./Model\");\r\nvar branchAndCut = require(\"./Tableau/branchAndCut\");\r\nvar expressions = require(\"./expressions.js\");\r\nvar validation = require(\"./Validation\");\r\nvar Constraint = expressions.Constraint;\r\nvar Variable = expressions.Variable;\r\nvar Numeral = expressions.Numeral;\r\nvar Term = expressions.Term;\r\nvar External = require(\"./External/main.js\");\r\n\r\n// Place everything under the Solver Name Space\r\nvar Solver = function () {\r\n\r\n    \"use strict\";\r\n\r\n    this.Model = Model;\r\n    this.branchAndCut = branchAndCut;\r\n    this.Constraint = Constraint;\r\n    this.Variable = Variable;\r\n    this.Numeral = Numeral;\r\n    this.Term = Term;\r\n    this.Tableau = Tableau;\r\n    this.lastSolvedModel = null;\r\n\r\n    this.External = External;\r\n\r\n    /*************************************************************\r\n     * Method: Solve\r\n     * Scope: Public:\r\n     * Agruments:\r\n     *        model: The model we want solver to operate on\r\n     *        precision: If we're solving a MILP, how tight\r\n     *                   do we want to define an integer, given\r\n     *                   that 20.000000000000001 is not an integer.\r\n     *                   (defaults to 1e-9)\r\n     *            full: *get better description*\r\n     *        validate: if left blank, it will get ignored; otherwise\r\n     *                  it will run the model through all validation\r\n     *                  functions in the *Validate* module\r\n     **************************************************************/\r\n    this.Solve = function (model, precision, full, validate) {\r\n        //\r\n        // Run our validations on the model\r\n        // if the model doesn't have a validate\r\n        // attribute set to false\r\n        //\r\n        if(validate){\r\n            for(var test in validation){\r\n                model = validation[test](model);\r\n            }\r\n        }\r\n\r\n        // Make sure we at least have a model\r\n        if (!model) {\r\n            throw new Error(\"Solver requires a model to operate on\");\r\n        }\r\n\r\n        //\r\n        // If the objective function contains multiple objectives,\r\n        // pass it to the multi-solver thing...\r\n        //\r\n        if(typeof model.optimize === \"object\"){\r\n            if(Object.keys(model.optimize > 1)){\r\n                return require(\"./Polyopt\")(this, model);\r\n            }\r\n        }\r\n\r\n// /////////////////////////////////////////////////////////////////////\r\n// *********************************************************************\r\n// START\r\n// Try our hand at handling external solvers...\r\n// START\r\n// *********************************************************************\r\n// /////////////////////////////////////////////////////////////////////\r\n        if(model.external){\r\n\r\n            var solvers = Object.keys(External);\r\n            solvers = JSON.stringify(solvers);\r\n            \r\n            //\r\n            // The model needs to have a \"solver\" attribute if nothing else\r\n            // for us to pass data into\r\n            //\r\n            if(!model.external.solver){\r\n                throw new Error(\"The model you provided has an 'external' object that doesn't have a solver attribute. Use one of the following:\" + solvers);\r\n            }\r\n            \r\n            //\r\n            // If the solver they request doesn't exist; provide them\r\n            // with a list of possible options:\r\n            //\r\n            if(!External[model.external.solver]){\r\n                throw new Error(\"No support (yet) for \" + model.external.solver + \". Please use one of these instead:\" + solvers);\r\n            }\r\n            \r\n            return External[model.external.solver].solve(model);\r\n            \r\n\r\n// /////////////////////////////////////////////////////////////////////\r\n// *********************************************************************\r\n//  END\r\n// Try our hand at handling external solvers...\r\n//  END\r\n// *********************************************************************\r\n// /////////////////////////////////////////////////////////////////////\r\n\r\n        } else {\r\n\r\n            if (model instanceof Model === false) {\r\n                model = new Model(precision).loadJson(model);\r\n            }\r\n\r\n            var solution = model.solve();\r\n            this.lastSolvedModel = model;\r\n            solution.solutionSet = solution.generateSolutionSet();\r\n\r\n            // If the user asks for a full breakdown\r\n            // of the tableau (e.g. full === true)\r\n            // this will return it\r\n            if (full) {\r\n                return solution;\r\n            } else {\r\n                // Otherwise; give the user the bare\r\n                // minimum of info necessary to carry on\r\n\r\n                var store = {};\r\n\r\n                // 1.) Add in feasibility to store;\r\n                store.feasible = solution.feasible;\r\n\r\n                // 2.) Add in the objective value\r\n                store.result = solution.evaluation;\r\n\r\n                store.bounded = solution.bounded;\r\n                \r\n                if(solution._tableau.__isIntegral){\r\n                    store.isIntegral = true;\r\n                }\r\n\r\n                // 3.) Load all of the variable values\r\n                Object.keys(solution.solutionSet)\r\n                    .forEach(function (d) {\r\n                        //\r\n                        // When returning data in standard format,\r\n                        // Remove all 0's\r\n                        //\r\n                        if(solution.solutionSet[d] !== 0){\r\n                            store[d] = solution.solutionSet[d];\r\n                        }\r\n                        \r\n                    });\r\n\r\n                return store;\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    /*************************************************************\r\n     * Method: ReformatLP\r\n     * Scope: Public:\r\n     * Agruments: model: The model we want solver to operate on\r\n     * Purpose: Convert a friendly JSON model into a model for a\r\n     *          real solving library...in this case\r\n     *          lp_solver\r\n     **************************************************************/\r\n    this.ReformatLP = require(\"./External/lpsolve/Reformat.js\");\r\n\r\n\r\n     /*************************************************************\r\n     * Method: MultiObjective\r\n     * Scope: Public:\r\n     * Agruments:\r\n     *        model: The model we want solver to operate on\r\n     *        detail: if false, or undefined; it will return the\r\n     *                result of using the mid-point formula; otherwise\r\n     *                it will return an object containing:\r\n     *\r\n     *                1. The results from the mid point formula\r\n     *                2. The solution for each objective solved\r\n     *                   in isolation (pareto)\r\n     *                3. The min and max of each variable along\r\n     *                   the frontier of the polytope (ranges)\r\n     * Purpose: Solve a model with multiple objective functions.\r\n     *          Since a potential infinite number of solutions exist\r\n     *          this naively returns the mid-point between\r\n     *\r\n     * Note: The model has to be changed a little to work with this.\r\n     *       Before an *opType* was required. No more. The objective\r\n     *       attribute of the model is now an object instead of a\r\n     *       string.\r\n     *\r\n     *  *EXAMPLE MODEL*\r\n     *\r\n     *   model = {\r\n     *       optimize: {scotch: \"max\", soda: \"max\"},\r\n     *       constraints: {fluid: {equal: 100}},\r\n     *       variables: {\r\n     *           scotch: {fluid: 1, scotch: 1},\r\n     *           soda: {fluid: 1, soda: 1}\r\n     *       }\r\n     *   }\r\n     *\r\n     **************************************************************/\r\n    this.MultiObjective = function(model){\r\n        return require(\"./Polyopt\")(this, model);\r\n    };\r\n};\r\n\r\n// var define = define || undefined;\r\n// var window = window || undefined;\r\n\r\n// If the project is loading through require.js, use `define` and exit\r\nif (typeof define === \"function\") {\r\n    define([], function () {\r\n        return new Solver();\r\n    });\r\n// If the project doesn't see define, but sees window, put solver on window\r\n} else if (typeof window === \"object\"){\r\n    window.solver = new Solver();\r\n} else if (typeof self === \"object\"){\r\n    self.solver = new Solver();\r\n}\r\n// Ensure that its available in node.js env\r\nmodule.exports = new Solver();\r\n","/*global require*/\r\n/*global module*/\r\nrequire(\"./simplex.js\");\r\nrequire(\"./cuttingStrategies.js\");\r\nrequire(\"./dynamicModification.js\");\r\nrequire(\"./log.js\");\r\nrequire(\"./backup.js\");\r\nrequire(\"./branchingStrategies.js\");\r\nrequire(\"./integerProperties.js\");\r\n\r\nmodule.exports = require(\"./Tableau.js\");\r\n","/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n\r\nvar Tableau = require(\"./Tableau.js\");\r\n\r\n//-------------------------------------------------------------------\r\n// Function: solve\r\n// Detail: Main function, linear programming solver\r\n//-------------------------------------------------------------------\r\nTableau.prototype.simplex = function () {\r\n    // Bounded until proven otherwise\r\n    this.bounded = true;\r\n\r\n    // Execute Phase 1 to obtain a Basic Feasible Solution (BFS)\r\n    this.phase1();\r\n\r\n    // Execute Phase 2\r\n    if (this.feasible === true) {\r\n        // Running simplex on Initial Basic Feasible Solution (BFS)\r\n        // N.B current solution is feasible\r\n        this.phase2();\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n// Description: Convert a non standard form tableau\r\n//              to a standard form tableau by eliminating\r\n//              all negative values in the Right Hand Side (RHS)\r\n//              This results in a Basic Feasible Solution (BFS)\r\n//\r\n//-------------------------------------------------------------------\r\nTableau.prototype.phase1 = function () {\r\n    var debugCheckForCycles = this.model.checkForCycles;\r\n    var varIndexesCycle = [];\r\n\r\n    var matrix = this.matrix;\r\n    var rhsColumn = this.rhsColumn;\r\n    var lastColumn = this.width - 1;\r\n    var lastRow = this.height - 1;\r\n\r\n    var unrestricted;\r\n    var iterations = 0;\r\n\r\n    while (true) {\r\n        // ******************************************\r\n        // ** PHASE 1 - STEP  1 : FIND PIVOT ROW **\r\n        //\r\n        // Selecting leaving variable (feasibility condition):\r\n        // Basic variable with most negative value\r\n        //\r\n        // ******************************************\r\n        var leavingRowIndex = 0;\r\n        var rhsValue = -this.precision;\r\n        for (var r = 1; r <= lastRow; r++) {\r\n            unrestricted = this.unrestrictedVars[this.varIndexByRow[r]] === true;\r\n            \r\n            //\r\n            // *Don't think this does anything...\r\n            //\r\n            //if (unrestricted) {\r\n            //    continue;\r\n            //}\r\n\r\n            var value = matrix[r][rhsColumn];\r\n            if (value < rhsValue) {\r\n                rhsValue = value;\r\n                leavingRowIndex = r;\r\n            }\r\n        }\r\n\r\n        // If nothing is strictly smaller than 0; we're done with phase 1.\r\n        if (leavingRowIndex === 0) {\r\n            // Feasible, champagne!\r\n            this.feasible = true;\r\n            return iterations;\r\n        }\r\n\r\n\r\n        // ******************************************\r\n        // ** PHASE 1 - STEP  2 : FIND PIVOT COLUMN **\r\n        //\r\n        //\r\n        // ******************************************\r\n        // Selecting entering variable\r\n        var enteringColumn = 0;\r\n        var maxQuotient = -Infinity;\r\n        var costRow = matrix[0];\r\n        var leavingRow = matrix[leavingRowIndex];\r\n        for (var c = 1; c <= lastColumn; c++) {\r\n            var coefficient = leavingRow[c];\r\n            //\r\n            // *Don't think this does anything...\r\n            //\r\n            //if (-this.precision < coefficient && coefficient < this.precision) {\r\n            //    continue;\r\n            //}\r\n            //\r\n\r\n            unrestricted = this.unrestrictedVars[this.varIndexByCol[c]] === true;\r\n            if (unrestricted || coefficient < -this.precision) {\r\n                var quotient = -costRow[c] / coefficient;\r\n                if (maxQuotient < quotient) {\r\n                    maxQuotient = quotient;\r\n                    enteringColumn = c;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (enteringColumn === 0) {\r\n            // Not feasible\r\n            this.feasible = false;\r\n            return iterations;\r\n        }\r\n\r\n        if(debugCheckForCycles){\r\n            varIndexesCycle.push([this.varIndexByRow[leavingRowIndex], this.varIndexByCol[enteringColumn]]);\r\n\r\n            var cycleData = this.checkForCycles(varIndexesCycle);\r\n            if(cycleData.length > 0){\r\n\r\n                this.model.messages.push(\"Cycle in phase 1\");\r\n                this.model.messages.push(\"Start :\"+ cycleData[0]);\r\n                this.model.messages.push(\"Length :\"+ cycleData[1]);\r\n\r\n                this.feasible = false;\r\n                return iterations;\r\n                \r\n            }\r\n        }\r\n\r\n        this.pivot(leavingRowIndex, enteringColumn);\r\n        iterations += 1;\r\n    }\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n// Description: Apply simplex to obtain optimal solution\r\n//              used as phase2 of the simplex\r\n//\r\n//-------------------------------------------------------------------\r\nTableau.prototype.phase2 = function () {\r\n    var debugCheckForCycles = this.model.checkForCycles;\r\n    var varIndexesCycle = [];\r\n\r\n    var matrix = this.matrix;\r\n    var rhsColumn = this.rhsColumn;\r\n    var lastColumn = this.width - 1;\r\n    var lastRow = this.height - 1;\r\n\r\n    var precision = this.precision;\r\n    var nOptionalObjectives = this.optionalObjectives.length;\r\n    var optionalCostsColumns = null;\r\n\r\n    var iterations = 0;\r\n    var reducedCost, unrestricted;\r\n\r\n    while (true) {\r\n        var costRow = matrix[this.costRowIndex];\r\n\r\n        // Selecting entering variable (optimality condition)\r\n        if (nOptionalObjectives > 0) {\r\n            optionalCostsColumns = [];\r\n        }\r\n\r\n        var enteringColumn = 0;\r\n        var enteringValue = precision;\r\n        var isReducedCostNegative = false;\r\n        for (var c = 1; c <= lastColumn; c++) {\r\n            reducedCost = costRow[c];\r\n            unrestricted = this.unrestrictedVars[this.varIndexByCol[c]] === true;\r\n\r\n            if (nOptionalObjectives > 0 && -precision < reducedCost && reducedCost < precision) {\r\n                optionalCostsColumns.push(c);\r\n                continue;\r\n            }\r\n\r\n            if (unrestricted && reducedCost < 0) {\r\n                if (-reducedCost > enteringValue) {\r\n                    enteringValue = -reducedCost;\r\n                    enteringColumn = c;\r\n                    isReducedCostNegative = true;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (reducedCost > enteringValue) {\r\n                enteringValue = reducedCost;\r\n                enteringColumn = c;\r\n                isReducedCostNegative = false;\r\n            }\r\n        }\r\n\r\n        if (nOptionalObjectives > 0) {\r\n            // There exist optional improvable objectives\r\n            var o = 0;\r\n            while (enteringColumn === 0 && optionalCostsColumns.length > 0 && o < nOptionalObjectives) {\r\n                var optionalCostsColumns2 = [];\r\n                var reducedCosts = this.optionalObjectives[o].reducedCosts;\r\n\r\n                enteringValue = precision;\r\n\r\n                for (var i = 0; i < optionalCostsColumns.length; i++) {\r\n                    c = optionalCostsColumns[i];\r\n\r\n                    reducedCost = reducedCosts[c];\r\n                    unrestricted = this.unrestrictedVars[this.varIndexByCol[c]] === true;\r\n\r\n                    if (-precision < reducedCost && reducedCost < precision) {\r\n                        optionalCostsColumns2.push(c);\r\n                        continue;\r\n                    }\r\n\r\n                    if (unrestricted && reducedCost < 0) {\r\n                        if (-reducedCost > enteringValue) {\r\n                            enteringValue = -reducedCost;\r\n                            enteringColumn = c;\r\n                            isReducedCostNegative = true;\r\n                        }\r\n                        continue;\r\n                    }\r\n\r\n                    if (reducedCost > enteringValue) {\r\n                        enteringValue = reducedCost;\r\n                        enteringColumn = c;\r\n                        isReducedCostNegative = false;\r\n                    }\r\n                }\r\n                optionalCostsColumns = optionalCostsColumns2;\r\n                o += 1;\r\n            }\r\n        }\r\n\r\n\r\n        // If no entering column could be found we're done with phase 2.\r\n        if (enteringColumn === 0) {\r\n            this.setEvaluation();\r\n            this.simplexIters += 1;\r\n            return iterations;\r\n        }\r\n\r\n        // Selecting leaving variable\r\n        var leavingRow = 0;\r\n        var minQuotient = Infinity;\r\n\r\n        var varIndexByRow = this.varIndexByRow;\r\n\r\n        for (var r = 1; r <= lastRow; r++) {\r\n            var row = matrix[r];\r\n            var rhsValue = row[rhsColumn];\r\n            var colValue = row[enteringColumn];\r\n\r\n            if (-precision < colValue && colValue < precision) {\r\n                continue;\r\n            }\r\n\r\n            if (colValue > 0 && precision > rhsValue && rhsValue > -precision) {\r\n                minQuotient = 0;\r\n                leavingRow = r;\r\n                break;\r\n            }\r\n\r\n            var quotient = isReducedCostNegative ? -rhsValue / colValue : rhsValue / colValue;\r\n            if (quotient > precision && minQuotient > quotient) {\r\n                minQuotient = quotient;\r\n                leavingRow = r;\r\n            }\r\n        }\r\n\r\n        if (minQuotient === Infinity) {\r\n            // optimal value is -Infinity\r\n            this.evaluation = -Infinity;\r\n            this.bounded = false;\r\n            this.unboundedVarIndex = this.varIndexByCol[enteringColumn];\r\n            return iterations;\r\n        }\r\n\r\n        if(debugCheckForCycles){\r\n            varIndexesCycle.push([this.varIndexByRow[leavingRow], this.varIndexByCol[enteringColumn]]);\r\n\r\n            var cycleData = this.checkForCycles(varIndexesCycle);\r\n            if(cycleData.length > 0){\r\n\r\n                this.model.messages.push(\"Cycle in phase 2\");\r\n                this.model.messages.push(\"Start :\"+ cycleData[0]);\r\n                this.model.messages.push(\"Length :\"+ cycleData[1]);\r\n\r\n                this.feasible = false;\r\n                return iterations;\r\n            }\r\n        }\r\n\r\n        this.pivot(leavingRow, enteringColumn, true);\r\n        iterations += 1;\r\n    }\r\n};\r\n\r\n// Array holding the column indexes for which the value is not null\r\n// on the pivot row\r\n// Shared by all tableaux for smaller overhead and lower memory usage\r\nvar nonZeroColumns = [];\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// Description: Execute pivot operations over a 2d array,\r\n//          on a given row, and column\r\n//\r\n//-------------------------------------------------------------------\r\nTableau.prototype.pivot = function (pivotRowIndex, pivotColumnIndex) {\r\n    var matrix = this.matrix;\r\n\r\n    var quotient = matrix[pivotRowIndex][pivotColumnIndex];\r\n\r\n    var lastRow = this.height - 1;\r\n    var lastColumn = this.width - 1;\r\n\r\n    var leavingBasicIndex = this.varIndexByRow[pivotRowIndex];\r\n    var enteringBasicIndex = this.varIndexByCol[pivotColumnIndex];\r\n\r\n    this.varIndexByRow[pivotRowIndex] = enteringBasicIndex;\r\n    this.varIndexByCol[pivotColumnIndex] = leavingBasicIndex;\r\n\r\n    this.rowByVarIndex[enteringBasicIndex] = pivotRowIndex;\r\n    this.rowByVarIndex[leavingBasicIndex] = -1;\r\n\r\n    this.colByVarIndex[enteringBasicIndex] = -1;\r\n    this.colByVarIndex[leavingBasicIndex] = pivotColumnIndex;\r\n\r\n    // Divide everything in the target row by the element @\r\n    // the target column\r\n    var pivotRow = matrix[pivotRowIndex];\r\n    var nNonZeroColumns = 0;\r\n    for (var c = 0; c <= lastColumn; c++) {\r\n        if (!(pivotRow[c] >= -1e-16 && pivotRow[c] <= 1e-16)) {\r\n            pivotRow[c] /= quotient;\r\n            nonZeroColumns[nNonZeroColumns] = c;\r\n            nNonZeroColumns += 1;\r\n        } else {\r\n            pivotRow[c] = 0;\r\n        }\r\n    }\r\n    pivotRow[pivotColumnIndex] = 1 / quotient;\r\n\r\n    // for every row EXCEPT the pivot row,\r\n    // set the value in the pivot column = 0 by\r\n    // multiplying the value of all elements in the objective\r\n    // row by ... yuck... just look below; better explanation later\r\n    var coefficient, i, v0;\r\n    var precision = this.precision;\r\n    \r\n    // //////////////////////////////////////\r\n    //\r\n    // This is step 2 of the pivot function.\r\n    // It is, by far, the most expensive piece of\r\n    // this whole process where the code can be optimized (faster code)\r\n    // without changing the whole algorithm (fewer cycles)\r\n    //\r\n    // 1.) For every row but the pivot row\r\n    // 2.) Update each column to \r\n    //    a.) itself\r\n    //        less\r\n    //    b.) active-row's pivot column\r\n    //        times\r\n    //    c.) whatever-the-hell this is: nonZeroColumns[i]\r\n    // \r\n    // //////////////////////////////////////\r\n    // console.time(\"step-2\");\r\n    for (var r = 0; r <= lastRow; r++) {\r\n        if (r !== pivotRowIndex) {\r\n            //if(1 === 1){\r\n            if(!(matrix[r][pivotColumnIndex] >= -1e-16 && matrix[r][pivotColumnIndex] <= 1e-16)){\r\n            //if((matrix[r][pivotColumnIndex] !== 0)){\r\n                // Set reference to the row we're working on\r\n                //\r\n                var row = matrix[r];\r\n\r\n                // Catch the coefficient that we're going to end up dividing everything by\r\n                coefficient = row[pivotColumnIndex];\r\n                \r\n                // No point Burning Cycles if\r\n                // Zero to the thing\r\n                if (!(coefficient >= -1e-16 && coefficient <= 1e-16)) {\r\n                    for (i = 0; i < nNonZeroColumns; i++) {\r\n                        c = nonZeroColumns[i];\r\n                        // No point in doing math if you're just adding\r\n                        // Zero to the thing\r\n                        v0 = pivotRow[c];\r\n                        if (!(v0 >= -1e-16 && v0 <= 1e-16)) {\r\n                            row[c] = row[c] - coefficient * v0;\r\n                        } else {\r\n                            if(v0 !== 0){\r\n                                pivotRow[c] = 0;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    row[pivotColumnIndex] = -coefficient / quotient;\r\n                } else {\r\n                    if(coefficient !== 0){\r\n                        row[pivotColumnIndex] = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // console.timeEnd(\"step-2\");\r\n\r\n    var nOptionalObjectives = this.optionalObjectives.length;\r\n    if (nOptionalObjectives > 0) {\r\n        for (var o = 0; o < nOptionalObjectives; o += 1) {\r\n            var reducedCosts = this.optionalObjectives[o].reducedCosts;\r\n            coefficient = reducedCosts[pivotColumnIndex];\r\n            if (coefficient !== 0) {\r\n                for (i = 0; i < nNonZeroColumns; i++) {\r\n                    c = nonZeroColumns[i];\r\n                    v0 = pivotRow[c];\r\n                    if (v0 !== 0) {\r\n                        reducedCosts[c] = reducedCosts[c] - coefficient * v0;\r\n                    }\r\n                }\r\n\r\n                reducedCosts[pivotColumnIndex] = -coefficient / quotient;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nTableau.prototype.checkForCycles = function (varIndexes) {\r\n    for (var e1 = 0; e1 < varIndexes.length - 1; e1++) {\r\n        for (var e2 = e1 + 1; e2 < varIndexes.length; e2++) {\r\n            var elt1 = varIndexes[e1];\r\n            var elt2 = varIndexes[e2];\r\n            if (elt1[0] === elt2[0] && elt1[1] === elt2[1]) {\r\n                if (e2 - e1 > varIndexes.length - e2) {\r\n                    break;\r\n                }\r\n                var cycleFound = true;\r\n                for (var i = 1; i < e2 - e1; i++) {\r\n                    var tmp1 = varIndexes[e1+i];\r\n                    var tmp2 = varIndexes[e2+i];\r\n                    if(tmp1[0] !== tmp2[0] || tmp1[1] !== tmp2[1]) {\r\n                        cycleFound = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (cycleFound) {\r\n                    return [e1, e2 - e1];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return [];\r\n};\r\n","/*global module*/\r\n/*global require*/\r\nvar Solution = require(\"./Solution.js\");\r\n\r\nfunction MilpSolution(tableau, evaluation, feasible, bounded, branchAndCutIterations) {\r\n    Solution.call(this, tableau, evaluation, feasible, bounded);\r\n    this.iter = branchAndCutIterations;\r\n}\r\nmodule.exports = MilpSolution;\r\nMilpSolution.prototype = Object.create(Solution.prototype);\r\nMilpSolution.constructor = MilpSolution;\r\n","/*global require*/\r\nvar Tableau = require(\"./Tableau.js\");\r\nvar SlackVariable = require(\"../expressions.js\").SlackVariable;\r\n\r\nTableau.prototype.addCutConstraints = function (cutConstraints) {\r\n    var nCutConstraints = cutConstraints.length;\r\n\r\n    var height = this.height;\r\n    var heightWithCuts = height + nCutConstraints;\r\n\r\n    // Adding rows to hold cut constraints\r\n    for (var h = height; h < heightWithCuts; h += 1) {\r\n        if (this.matrix[h] === undefined) {\r\n            this.matrix[h] = this.matrix[h - 1].slice();\r\n        }\r\n    }\r\n\r\n    // Adding cut constraints\r\n    this.height = heightWithCuts;\r\n    this.nVars = this.width + this.height - 2;\r\n\r\n    var c;\r\n    var lastColumn = this.width - 1;\r\n    for (var i = 0; i < nCutConstraints; i += 1) {\r\n        var cut = cutConstraints[i];\r\n\r\n        // Constraint row index\r\n        var r = height + i;\r\n\r\n        var sign = (cut.type === \"min\") ? -1 : 1;\r\n\r\n        // Variable on which the cut is applied\r\n        var varIndex = cut.varIndex;\r\n        var varRowIndex = this.rowByVarIndex[varIndex];\r\n        var constraintRow = this.matrix[r];\r\n        if (varRowIndex === -1) {\r\n            // Variable is non basic\r\n            constraintRow[this.rhsColumn] = sign * cut.value;\r\n            for (c = 1; c <= lastColumn; c += 1) {\r\n                constraintRow[c] = 0;\r\n            }\r\n            constraintRow[this.colByVarIndex[varIndex]] = sign;\r\n        } else {\r\n            // Variable is basic\r\n            var varRow = this.matrix[varRowIndex];\r\n            var varValue = varRow[this.rhsColumn];\r\n            constraintRow[this.rhsColumn] = sign * (cut.value - varValue);\r\n            for (c = 1; c <= lastColumn; c += 1) {\r\n                constraintRow[c] = -sign * varRow[c];\r\n            }\r\n        }\r\n\r\n        // Creating slack variable\r\n        var slackVarIndex = this.getNewElementIndex();\r\n        this.varIndexByRow[r] = slackVarIndex;\r\n        this.rowByVarIndex[slackVarIndex] = r;\r\n        this.colByVarIndex[slackVarIndex] = -1;\r\n        this.variablesPerIndex[slackVarIndex] = new SlackVariable(\"s\"+slackVarIndex, slackVarIndex);\r\n        this.nVars += 1;\r\n    }\r\n};\r\n\r\nTableau.prototype._addLowerBoundMIRCut = function(rowIndex) {\r\n\r\n\tif(rowIndex === this.costRowIndex) {\r\n\t\t//console.log(\"! IN MIR CUTS : The index of the row corresponds to the cost row. !\");\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar model = this.model;\r\n\tvar matrix = this.matrix;\r\n\r\n\tvar intVar = this.variablesPerIndex[this.varIndexByRow[rowIndex]];\r\n\tif (!intVar.isInteger) {\r\n\t\treturn false;\r\n    }\r\n\r\n\tvar d = matrix[rowIndex][this.rhsColumn];\r\n\tvar frac_d = d - Math.floor(d);\r\n\r\n\tif (frac_d < this.precision || 1 - this.precision < frac_d) {\r\n\t\treturn false;\r\n    }\r\n\r\n\t//Adding a row\r\n\tvar r = this.height;\r\n\tmatrix[r] = matrix[r - 1].slice();\r\n\tthis.height += 1;\r\n\r\n\t// Creating slack variable\r\n\tthis.nVars += 1;\r\n\tvar slackVarIndex = this.getNewElementIndex();\r\n\tthis.varIndexByRow[r] = slackVarIndex;\r\n\tthis.rowByVarIndex[slackVarIndex] = r;\r\n\tthis.colByVarIndex[slackVarIndex] = -1;\r\n\tthis.variablesPerIndex[slackVarIndex] = new SlackVariable(\"s\"+slackVarIndex, slackVarIndex);\r\n\r\n\tmatrix[r][this.rhsColumn] = Math.floor(d);\r\n\r\n\tfor (var colIndex = 1; colIndex < this.varIndexByCol.length; colIndex += 1) {\r\n\t\tvar variable = this.variablesPerIndex[this.varIndexByCol[colIndex]];\r\n\r\n\t\tif (!variable.isInteger) {\r\n\t\t\tmatrix[r][colIndex] = Math.min(0, matrix[rowIndex][colIndex] / (1 - frac_d));\r\n\t\t} else {\r\n\t\t\tvar coef = matrix[rowIndex][colIndex];\r\n\t\t\tvar termCoeff = Math.floor(coef)+Math.max(0, coef - Math.floor(coef) - frac_d) / (1 - frac_d);\r\n\t\t\tmatrix[r][colIndex] = termCoeff;\r\n\t\t}\r\n\t}\r\n\r\n\tfor(var c = 0; c < this.width; c += 1) {\r\n\t\tmatrix[r][c] -= matrix[rowIndex][c];\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\nTableau.prototype._addUpperBoundMIRCut = function(rowIndex) {\r\n\r\n\tif (rowIndex === this.costRowIndex) {\r\n\t\t//console.log(\"! IN MIR CUTS : The index of the row corresponds to the cost row. !\");\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar model = this.model;\r\n\tvar matrix = this.matrix;\r\n\r\n\tvar intVar = this.variablesPerIndex[this.varIndexByRow[rowIndex]];\r\n\tif (!intVar.isInteger) {\r\n\t\treturn false;\r\n    }\r\n\r\n\tvar b = matrix[rowIndex][this.rhsColumn];\r\n\tvar f = b - Math.floor(b);\r\n\r\n\tif (f < this.precision || 1 - this.precision < f) {\r\n\t\treturn false;\r\n    }\r\n\r\n\t//Adding a row\r\n\tvar r = this.height;\r\n\tmatrix[r] = matrix[r - 1].slice();\r\n\tthis.height += 1;\r\n\r\n\t// Creating slack variable\r\n    \r\n\tthis.nVars += 1;\r\n\tvar slackVarIndex = this.getNewElementIndex();\r\n\tthis.varIndexByRow[r] = slackVarIndex;\r\n\tthis.rowByVarIndex[slackVarIndex] = r;\r\n\tthis.colByVarIndex[slackVarIndex] = -1;\r\n\tthis.variablesPerIndex[slackVarIndex] = new SlackVariable(\"s\"+slackVarIndex, slackVarIndex);\r\n\r\n\tmatrix[r][this.rhsColumn] = -f;\r\n\r\n\r\n\tfor(var colIndex = 1; colIndex < this.varIndexByCol.length; colIndex += 1) {\r\n\t\tvar variable = this.variablesPerIndex[this.varIndexByCol[colIndex]];\r\n\r\n\t\tvar aj = matrix[rowIndex][colIndex];\r\n\t\tvar fj = aj - Math.floor(aj);\r\n\r\n\t\tif(variable.isInteger) {\r\n\t\t\tif(fj <= f) {\r\n\t\t\t\tmatrix[r][colIndex] = -fj;\r\n            } else {\r\n\t\t\t\tmatrix[r][colIndex] = -(1 - fj) * f / fj;\r\n            }\r\n\t\t} else {\r\n\t\t\tif (aj >= 0) {\r\n\t\t\t\tmatrix[r][colIndex] = -aj;\r\n            } else {\r\n\t\t\t\tmatrix[r][colIndex] = aj * f / (1 - f);\r\n            }\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\n\r\n//\r\n// THIS MAKES SOME MILP PROBLEMS PROVIDE INCORRECT\r\n// ANSWERS...\r\n//\r\n// QUICK FIX: MAKE THE FUNCTION EMPTY...\r\n//\r\nTableau.prototype.applyMIRCuts = function () {\r\n    \r\n    // var nRows = this.height;\r\n    // for (var cst = 0; cst < nRows; cst += 1) {\r\n    //    this._addUpperBoundMIRCut(cst);\r\n    // }\r\n\r\n\r\n    // // nRows = tableau.height;\r\n    // for (cst = 0; cst < nRows; cst += 1) {\r\n    //    this._addLowerBoundMIRCut(cst);\r\n    // }\r\n    \r\n};\r\n","/*global require*/\r\n/*global console*/\r\nvar Tableau = require(\"./Tableau.js\");\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nTableau.prototype._putInBase = function (varIndex) {\r\n    // Is varIndex in the base?\r\n    var r = this.rowByVarIndex[varIndex];\r\n    if (r === -1) {\r\n        // Outside the base\r\n        // pivoting to take it out\r\n        var c = this.colByVarIndex[varIndex];\r\n\r\n        // Selecting pivot row\r\n        // (Any row with coefficient different from 0)\r\n        for (var r1 = 1; r1 < this.height; r1 += 1) {\r\n            var coefficient = this.matrix[r1][c];\r\n            if (coefficient < -this.precision || this.precision < coefficient) {\r\n                r = r1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.pivot(r, c);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\nTableau.prototype._takeOutOfBase = function (varIndex) {\r\n    // Is varIndex in the base?\r\n    var c = this.colByVarIndex[varIndex];\r\n    if (c === -1) {\r\n        // Inside the base\r\n        // pivoting to take it out\r\n        var r = this.rowByVarIndex[varIndex];\r\n\r\n        // Selecting pivot column\r\n        // (Any column with coefficient different from 0)\r\n        var pivotRow = this.matrix[r];\r\n        for (var c1 = 1; c1 < this.height; c1 += 1) {\r\n            var coefficient = pivotRow[c1];\r\n            if (coefficient < -this.precision || this.precision < coefficient) {\r\n                c = c1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.pivot(r, c);\r\n    }\r\n\r\n    return c;\r\n};\r\n\r\nTableau.prototype.updateVariableValues = function () {\r\n    var nVars = this.variables.length;\r\n    var roundingCoeff = Math.round(1 / this.precision);\r\n    for (var v = 0; v < nVars; v += 1) {\r\n        var variable = this.variables[v];\r\n        var varIndex = variable.index;\r\n\r\n        var r = this.rowByVarIndex[varIndex];\r\n        if (r === -1) {\r\n            // Variable is non basic\r\n            variable.value = 0;\r\n        } else {\r\n            // Variable is basic\r\n            var varValue = this.matrix[r][this.rhsColumn];\r\n            variable.value = Math.round((varValue + Number.EPSILON) * roundingCoeff) / roundingCoeff;\r\n        }\r\n    }\r\n};\r\n\r\nTableau.prototype.updateRightHandSide = function (constraint, difference) {\r\n    // Updates RHS of given constraint\r\n    var lastRow = this.height - 1;\r\n    var constraintRow = this.rowByVarIndex[constraint.index];\r\n    if (constraintRow === -1) {\r\n        // Slack is not in base\r\n        var slackColumn = this.colByVarIndex[constraint.index];\r\n\r\n        // Upading all the RHS values\r\n        for (var r = 0; r <= lastRow; r += 1) {\r\n            var row = this.matrix[r];\r\n            row[this.rhsColumn] -= difference * row[slackColumn];\r\n        }\r\n\r\n        var nOptionalObjectives = this.optionalObjectives.length;\r\n        if (nOptionalObjectives > 0) {\r\n            for (var o = 0; o < nOptionalObjectives; o += 1) {\r\n                var reducedCosts = this.optionalObjectives[o].reducedCosts;\r\n                reducedCosts[this.rhsColumn] -= difference * reducedCosts[slackColumn];\r\n            }\r\n        }\r\n    } else {\r\n        // Slack variable of constraint is in base\r\n        // Updating RHS with the difference between the old and the new one\r\n        this.matrix[constraintRow][this.rhsColumn] -= difference;\r\n    }\r\n};\r\n\r\nTableau.prototype.updateConstraintCoefficient = function (constraint, variable, difference) {\r\n    // Updates variable coefficient within a constraint\r\n    if (constraint.index === variable.index) {\r\n        throw new Error(\"[Tableau.updateConstraintCoefficient] constraint index should not be equal to variable index !\");\r\n    }\r\n\r\n    var r = this._putInBase(constraint.index);\r\n\r\n    var colVar = this.colByVarIndex[variable.index];\r\n    if (colVar === -1) {\r\n        var rowVar = this.rowByVarIndex[variable.index];\r\n        for (var c = 0; c < this.width; c += 1){\r\n            this.matrix[r][c] += difference * this.matrix[rowVar][c];\r\n        }\r\n    } else {\r\n        this.matrix[r][colVar] -= difference;\r\n    }\r\n};\r\n\r\nTableau.prototype.updateCost = function (variable, difference) {\r\n    // Updates variable coefficient within the objective function\r\n    var varIndex = variable.index;\r\n    var lastColumn = this.width - 1;\r\n    var varColumn = this.colByVarIndex[varIndex];\r\n    if (varColumn === -1) {\r\n        // Variable is in base\r\n        var variableRow = this.matrix[this.rowByVarIndex[varIndex]];\r\n\r\n        var c;\r\n        if (variable.priority === 0) {\r\n            var costRow = this.matrix[0];\r\n\r\n            // Upading all the reduced costs\r\n            for (c = 0; c <= lastColumn; c += 1) {\r\n                costRow[c] += difference * variableRow[c];\r\n            }\r\n        } else {\r\n            var reducedCosts = this.objectivesByPriority[variable.priority].reducedCosts;\r\n            for (c = 0; c <= lastColumn; c += 1) {\r\n                reducedCosts[c] += difference * variableRow[c];\r\n            }\r\n        }\r\n    } else {\r\n        // Variable is not in the base\r\n        // Updating coefficient with difference\r\n        this.matrix[0][varColumn] -= difference;\r\n    }\r\n};\r\n\r\nTableau.prototype.addConstraint = function (constraint) {\r\n    // Adds a constraint to the tableau\r\n    var sign = constraint.isUpperBound ? 1 : -1;\r\n    var lastRow = this.height;\r\n\r\n    var constraintRow = this.matrix[lastRow];\r\n    if (constraintRow === undefined) {\r\n        constraintRow = this.matrix[0].slice();\r\n        this.matrix[lastRow] = constraintRow;\r\n    }\r\n\r\n    // Setting all row cells to 0\r\n    var lastColumn = this.width - 1;\r\n    for (var c = 0; c <= lastColumn; c += 1) {\r\n        constraintRow[c] = 0;\r\n    }\r\n\r\n    // Initializing RHS\r\n    constraintRow[this.rhsColumn] = sign * constraint.rhs;\r\n\r\n    var terms = constraint.terms;\r\n    var nTerms = terms.length;\r\n    for (var t = 0; t < nTerms; t += 1) {\r\n        var term = terms[t];\r\n        var coefficient = term.coefficient;\r\n        var varIndex = term.variable.index;\r\n\r\n        var varRowIndex = this.rowByVarIndex[varIndex];\r\n        if (varRowIndex === -1) {\r\n            // Variable is non basic\r\n            constraintRow[this.colByVarIndex[varIndex]] += sign * coefficient;\r\n        } else {\r\n            // Variable is basic\r\n            var varRow = this.matrix[varRowIndex];\r\n            var varValue = varRow[this.rhsColumn];\r\n            for (c = 0; c <= lastColumn; c += 1) {\r\n                constraintRow[c] -= sign * coefficient * varRow[c];\r\n            }\r\n        }\r\n    }\r\n    // Creating slack variable\r\n    var slackIndex = constraint.index;\r\n    this.varIndexByRow[lastRow] = slackIndex;\r\n    this.rowByVarIndex[slackIndex] = lastRow;\r\n    this.colByVarIndex[slackIndex] = -1;\r\n\r\n    this.height += 1;\r\n};\r\n\r\nTableau.prototype.removeConstraint = function (constraint) {\r\n    var slackIndex = constraint.index;\r\n    var lastRow = this.height - 1;\r\n\r\n    // Putting the constraint's slack in the base\r\n    var r = this._putInBase(slackIndex);\r\n\r\n    // Removing constraint\r\n    // by putting the corresponding row at the bottom of the matrix\r\n    // and virtually reducing the height of the matrix by 1\r\n    var tmpRow = this.matrix[lastRow];\r\n    this.matrix[lastRow] = this.matrix[r];\r\n    this.matrix[r] = tmpRow;\r\n\r\n    // Removing associated slack variable from basic variables\r\n    this.varIndexByRow[r] = this.varIndexByRow[lastRow];\r\n    this.varIndexByRow[lastRow] = -1;\r\n    this.rowByVarIndex[slackIndex] = -1;\r\n\r\n    // Putting associated slack variable index in index manager\r\n    this.availableIndexes[this.availableIndexes.length] = slackIndex;\r\n\r\n    constraint.slack.index = -1;\r\n\r\n    this.height -= 1;\r\n};\r\n\r\nTableau.prototype.addVariable = function (variable) {\r\n    // Adds a variable to the tableau\r\n    // var sign = constraint.isUpperBound ? 1 : -1;\r\n\r\n    var lastRow = this.height - 1;\r\n    var lastColumn = this.width;\r\n    var cost = this.model.isMinimization === true ? -variable.cost : variable.cost;\r\n    var priority = variable.priority;\r\n\r\n    // Setting reduced costs\r\n    var nOptionalObjectives = this.optionalObjectives.length;\r\n    if (nOptionalObjectives > 0) {\r\n        for (var o = 0; o < nOptionalObjectives; o += 1) {\r\n            this.optionalObjectives[o].reducedCosts[lastColumn] = 0;\r\n        }\r\n    }\r\n\r\n    if (priority === 0) {\r\n        this.matrix[0][lastColumn] = cost;\r\n    } else {\r\n        this.setOptionalObjective(priority, lastColumn, cost);\r\n        this.matrix[0][lastColumn] = 0;\r\n    }\r\n\r\n    // Setting all other column cells to 0\r\n    for (var r = 1; r <= lastRow; r += 1) {\r\n        this.matrix[r][lastColumn] = 0;\r\n    }\r\n\r\n    // Adding variable to trackers\r\n    var varIndex = variable.index;\r\n    this.varIndexByCol[lastColumn] = varIndex;\r\n\r\n    this.rowByVarIndex[varIndex] = -1;\r\n    this.colByVarIndex[varIndex] = lastColumn;\r\n\r\n    this.width += 1;\r\n};\r\n\r\n\r\nTableau.prototype.removeVariable = function (variable) {\r\n    var varIndex = variable.index;\r\n\r\n    // Putting the variable out of the base\r\n    var c = this._takeOutOfBase(varIndex);\r\n    var lastColumn = this.width - 1;\r\n    if (c !== lastColumn) {\r\n        var lastRow = this.height - 1;\r\n        for (var r = 0; r <= lastRow; r += 1) {\r\n            var row = this.matrix[r];\r\n            row[c] = row[lastColumn];\r\n        }\r\n\r\n        var nOptionalObjectives = this.optionalObjectives.length;\r\n        if (nOptionalObjectives > 0) {\r\n            for (var o = 0; o < nOptionalObjectives; o += 1) {\r\n                var reducedCosts = this.optionalObjectives[o].reducedCosts;\r\n                reducedCosts[c] = reducedCosts[lastColumn];\r\n            }\r\n        }\r\n\r\n        var switchVarIndex = this.varIndexByCol[lastColumn];\r\n        this.varIndexByCol[c] = switchVarIndex;\r\n        this.colByVarIndex[switchVarIndex] = c;\r\n    }\r\n\r\n    // Removing variable from non basic variables\r\n    this.varIndexByCol[lastColumn] = -1;\r\n    this.colByVarIndex[varIndex] = -1;\r\n\r\n    // Adding index into index manager\r\n    this.availableIndexes[this.availableIndexes.length] = varIndex;\r\n\r\n    variable.index = -1;\r\n\r\n    this.width -= 1;\r\n};\r\n","/*global require*/\r\n/*global console*/\r\nvar Tableau = require(\"./Tableau.js\");\r\n\r\n//-------------------------------------------------------------------\r\n// Description: Display a tableau matrix\r\n//              and additional tableau information\r\n//\r\n//-------------------------------------------------------------------\r\nTableau.prototype.log = function (message, force) {\r\n    if (false && !force) {\r\n        return;\r\n    }\r\n\r\n    console.log(\"****\", message, \"****\");\r\n    console.log(\"Nb Variables\", this.width - 1);\r\n    console.log(\"Nb Constraints\", this.height - 1);\r\n    // console.log(\"Variable Ids\", this.variablesPerIndex);\r\n    console.log(\"Basic Indexes\", this.varIndexByRow);\r\n    console.log(\"Non Basic Indexes\", this.varIndexByCol);\r\n    console.log(\"Rows\", this.rowByVarIndex);\r\n    console.log(\"Cols\", this.colByVarIndex);\r\n\r\n    var digitPrecision = 5;\r\n\r\n    // Variable declaration\r\n    var varNameRowString = \"\",\r\n        spacePerColumn = [\" \"],\r\n        j,\r\n        c,\r\n        s,\r\n        r,\r\n        variable,\r\n        varIndex,\r\n        varName,\r\n        varNameLength,\r\n        nSpaces,\r\n        valueSpace,\r\n        nameSpace;\r\n\r\n    var row,\r\n        rowString;\r\n\r\n    for (c = 1; c < this.width; c += 1) {\r\n        varIndex = this.varIndexByCol[c];\r\n        variable = this.variablesPerIndex[varIndex];\r\n        if (variable === undefined) {\r\n            varName = \"c\" + varIndex;\r\n        } else {\r\n            varName = variable.id;\r\n        }\r\n\r\n        varNameLength = varName.length;\r\n        nSpaces = Math.abs(varNameLength - 5);\r\n        valueSpace = \" \";\r\n        nameSpace = \"\\t\";\r\n\r\n        ///////////\r\n        /*valueSpace = \" \";\r\n        nameSpace = \" \";\r\n\r\n        for (s = 0; s < nSpaces; s += 1) {\r\n            if (varNameLength > 5) {\r\n                valueSpace += \" \";\r\n            } else {\r\n                nameSpace += \" \";\r\n            }\r\n        }*/\r\n\r\n        ///////////\r\n        if (varNameLength > 5) {\r\n            valueSpace += \" \";\r\n        } else {\r\n            nameSpace += \"\\t\";\r\n        }\r\n\r\n        spacePerColumn[c] = valueSpace;\r\n\r\n        varNameRowString += nameSpace + varName;\r\n    }\r\n    console.log(varNameRowString);\r\n\r\n    var signSpace;\r\n\r\n    // Displaying reduced costs\r\n    var firstRow = this.matrix[this.costRowIndex];\r\n    var firstRowString = \"\\t\";\r\n\r\n    ///////////\r\n    /*for (j = 1; j < this.width; j += 1) {\r\n        signSpace = firstRow[j] < 0 ? \"\" : \" \";\r\n        firstRowString += signSpace;\r\n        firstRowString += spacePerColumn[j];\r\n        firstRowString += firstRow[j].toFixed(2);\r\n    }\r\n    signSpace = firstRow[0] < 0 ? \"\" : \" \";\r\n    firstRowString += signSpace + spacePerColumn[0] +\r\n        firstRow[0].toFixed(2);\r\n    console.log(firstRowString + \" Z\");*/\r\n\r\n    ///////////\r\n    for (j = 1; j < this.width; j += 1) {\r\n        signSpace = \"\\t\";\r\n        firstRowString += signSpace;\r\n        firstRowString += spacePerColumn[j];\r\n        firstRowString += firstRow[j].toFixed(digitPrecision);\r\n    }\r\n    signSpace = \"\\t\";\r\n    firstRowString += signSpace + spacePerColumn[0] +\r\n        firstRow[0].toFixed(digitPrecision);\r\n    console.log(firstRowString + \"\\tZ\");\r\n\r\n\r\n    // Then the basic variable rowByVarIndex\r\n    for (r = 1; r < this.height; r += 1) {\r\n        row = this.matrix[r];\r\n        rowString = \"\\t\";\r\n\r\n        ///////////\r\n        /*for (c = 1; c < this.width; c += 1) {\r\n            signSpace = row[c] < 0 ? \"\" : \" \";\r\n            rowString += signSpace + spacePerColumn[c] + row[c].toFixed(2);\r\n        }\r\n        signSpace = row[0] < 0 ? \"\" : \" \";\r\n        rowString += signSpace + spacePerColumn[0] + row[0].toFixed(2);*/\r\n\r\n        ///////////\r\n        for (c = 1; c < this.width; c += 1) {\r\n            signSpace = \"\\t\";\r\n            rowString += signSpace + spacePerColumn[c] + row[c].toFixed(digitPrecision);\r\n        }\r\n        signSpace = \"\\t\";\r\n        rowString += signSpace + spacePerColumn[0] + row[0].toFixed(digitPrecision);\r\n\r\n\r\n        varIndex = this.varIndexByRow[r];\r\n        variable = this.variablesPerIndex[varIndex];\r\n        if (variable === undefined) {\r\n            varName = \"c\" + varIndex;\r\n        } else {\r\n            varName = variable.id;\r\n        }\r\n        console.log(rowString + \"\\t\" + varName);\r\n    }\r\n    console.log(\"\");\r\n\r\n    // Then reduced costs for optional objectives\r\n    var nOptionalObjectives = this.optionalObjectives.length;\r\n    if (nOptionalObjectives > 0) {\r\n        console.log(\"    Optional objectives:\");\r\n        for (var o = 0; o < nOptionalObjectives; o += 1) {\r\n            var reducedCosts = this.optionalObjectives[o].reducedCosts;\r\n            var reducedCostsString = \"\";\r\n            for (j = 1; j < this.width; j += 1) {\r\n                signSpace = reducedCosts[j] < 0 ? \"\" : \" \";\r\n                reducedCostsString += signSpace;\r\n                reducedCostsString += spacePerColumn[j];\r\n                reducedCostsString += reducedCosts[j].toFixed(digitPrecision);\r\n            }\r\n            signSpace = reducedCosts[0] < 0 ? \"\" : \" \";\r\n            reducedCostsString += signSpace + spacePerColumn[0] +\r\n                reducedCosts[0].toFixed(digitPrecision);\r\n            console.log(reducedCostsString + \" z\" + o);\r\n        }\r\n    }\r\n    console.log(\"Feasible?\", this.feasible);\r\n    console.log(\"evaluation\", this.evaluation);\r\n\r\n    return this;\r\n};\r\n","/*global require*/\r\nvar Tableau = require(\"./Tableau.js\");\r\n\r\nTableau.prototype.copy = function () {\r\n    var copy = new Tableau(this.precision);\r\n\r\n    copy.width = this.width;\r\n    copy.height = this.height;\r\n\r\n    copy.nVars = this.nVars;\r\n    copy.model = this.model;\r\n\r\n    // Making a shallow copy of integer variable indexes\r\n    // and variable ids\r\n    copy.variables = this.variables;\r\n    copy.variablesPerIndex = this.variablesPerIndex;\r\n    copy.unrestrictedVars = this.unrestrictedVars;\r\n    copy.lastElementIndex = this.lastElementIndex;\r\n\r\n    // All the other arrays are deep copied\r\n    copy.varIndexByRow = this.varIndexByRow.slice();\r\n    copy.varIndexByCol = this.varIndexByCol.slice();\r\n\r\n    copy.rowByVarIndex = this.rowByVarIndex.slice();\r\n    copy.colByVarIndex = this.colByVarIndex.slice();\r\n\r\n    copy.availableIndexes = this.availableIndexes.slice();\r\n\r\n    var optionalObjectivesCopy = [];\r\n    for(var o = 0; o < this.optionalObjectives.length; o++){\r\n        optionalObjectivesCopy[o] = this.optionalObjectives[o].copy();\r\n    }\r\n    copy.optionalObjectives = optionalObjectivesCopy;\r\n\r\n\r\n    var matrix = this.matrix;\r\n    var matrixCopy = new Array(this.height);\r\n    for (var r = 0; r < this.height; r++) {\r\n        matrixCopy[r] = matrix[r].slice();\r\n    }\r\n\r\n    copy.matrix = matrixCopy;\r\n\r\n    return copy;\r\n};\r\n\r\nTableau.prototype.save = function () {\r\n    this.savedState = this.copy();\r\n};\r\n\r\nTableau.prototype.restore = function () {\r\n    if (this.savedState === null) {\r\n        return;\r\n    }\r\n\r\n    var save = this.savedState;\r\n    var savedMatrix = save.matrix;\r\n    this.nVars = save.nVars;\r\n    this.model = save.model;\r\n\r\n    // Shallow restore\r\n    this.variables = save.variables;\r\n    this.variablesPerIndex = save.variablesPerIndex;\r\n    this.unrestrictedVars = save.unrestrictedVars;\r\n    this.lastElementIndex = save.lastElementIndex;\r\n\r\n    this.width = save.width;\r\n    this.height = save.height;\r\n\r\n    // Restoring matrix\r\n    var r, c;\r\n    for (r = 0; r < this.height; r += 1) {\r\n        var savedRow = savedMatrix[r];\r\n        var row = this.matrix[r];\r\n        for (c = 0; c < this.width; c += 1) {\r\n            row[c] = savedRow[c];\r\n        }\r\n    }\r\n\r\n    // Restoring all the other structures\r\n    var savedBasicIndexes = save.varIndexByRow;\r\n    for (c = 0; c < this.height; c += 1) {\r\n        this.varIndexByRow[c] = savedBasicIndexes[c];\r\n    }\r\n\r\n    while (this.varIndexByRow.length > this.height) {\r\n        this.varIndexByRow.pop();\r\n    }\r\n\r\n    var savedNonBasicIndexes = save.varIndexByCol;\r\n    for (r = 0; r < this.width; r += 1) {\r\n        this.varIndexByCol[r] = savedNonBasicIndexes[r];\r\n    }\r\n\r\n    while (this.varIndexByCol.length > this.width) {\r\n        this.varIndexByCol.pop();\r\n    }\r\n\r\n    var savedRows = save.rowByVarIndex;\r\n    var savedCols = save.colByVarIndex;\r\n    for (var v = 0; v < this.nVars; v += 1) {\r\n        this.rowByVarIndex[v] = savedRows[v];\r\n        this.colByVarIndex[v] = savedCols[v];\r\n    }\r\n\r\n\r\n    if (save.optionalObjectives.length > 0 && this.optionalObjectives.length > 0) {\r\n        this.optionalObjectives = [];\r\n        this.optionalObjectivePerPriority = {};\r\n        for(var o = 0; o < save.optionalObjectives.length; o++){\r\n            var optionalObjectiveCopy = save.optionalObjectives[o].copy();\r\n            this.optionalObjectives[o] = optionalObjectiveCopy;\r\n            this.optionalObjectivePerPriority[optionalObjectiveCopy.priority] = optionalObjectiveCopy;\r\n        }\r\n    }\r\n};\r\n","/*global require*/\r\nvar Tableau = require(\"./Tableau.js\");\r\n\r\nfunction VariableData(index, value) {\r\n    this.index = index;\r\n    this.value = value;\r\n}\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nTableau.prototype.getMostFractionalVar = function () {\r\n    var biggestFraction = 0;\r\n    var selectedVarIndex = null;\r\n    var selectedVarValue = null;\r\n    var mid = 0.5;\r\n\r\n    var integerVariables = this.model.integerVariables;\r\n    var nIntegerVars = integerVariables.length;\r\n    for (var v = 0; v < nIntegerVars; v++) {\r\n        var varIndex = integerVariables[v].index;\r\n        var varRow = this.rowByVarIndex[varIndex];\r\n        if (varRow === -1) {\r\n            continue;\r\n        }\r\n\r\n        var varValue = this.matrix[varRow][this.rhsColumn];\r\n        var fraction = Math.abs(varValue - Math.round(varValue));\r\n        if (biggestFraction < fraction) {\r\n            biggestFraction = fraction;\r\n            selectedVarIndex = varIndex;\r\n            selectedVarValue = varValue;\r\n        }\r\n    }\r\n\r\n    return new VariableData(selectedVarIndex, selectedVarValue);\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nTableau.prototype.getFractionalVarWithLowestCost = function () {\r\n    var highestCost = Infinity;\r\n    var selectedVarIndex = null;\r\n    var selectedVarValue = null;\r\n\r\n    var integerVariables = this.model.integerVariables;\r\n    var nIntegerVars = integerVariables.length;\r\n    for (var v = 0; v < nIntegerVars; v++) {\r\n        var variable = integerVariables[v];\r\n        var varIndex = variable.index;\r\n        var varRow = this.rowByVarIndex[varIndex];\r\n        if (varRow === -1) {\r\n            // Variable value is non basic\r\n            // its value is 0\r\n            continue;\r\n        }\r\n\r\n        var varValue = this.matrix[varRow][this.rhsColumn];\r\n        if (Math.abs(varValue - Math.round(varValue)) > this.precision) {\r\n            var cost = variable.cost;\r\n            if (highestCost > cost) {\r\n                highestCost = cost;\r\n                selectedVarIndex = varIndex;\r\n                selectedVarValue = varValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    return new VariableData(selectedVarIndex, selectedVarValue);\r\n};\r\n","/*global require*/\r\nvar Tableau = require(\"./Tableau.js\");\r\n\r\nTableau.prototype.countIntegerValues = function(){\r\n    var count = 0;\r\n    for (var r = 1; r < this.height; r += 1) {\r\n        if (this.variablesPerIndex[this.varIndexByRow[r]].isInteger) {\r\n            var decimalPart = this.matrix[r][this.rhsColumn];\r\n            decimalPart = decimalPart - Math.floor(decimalPart);\r\n            if (decimalPart < this.precision && -decimalPart < this.precision) {\r\n                count += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return count;\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nTableau.prototype.isIntegral = function () {\r\n    var integerVariables = this.model.integerVariables;\r\n    var nIntegerVars = integerVariables.length;\r\n    for (var v = 0; v < nIntegerVars; v++) {\r\n        var varRow = this.rowByVarIndex[integerVariables[v].index];\r\n        if (varRow === -1) {\r\n            continue;\r\n        }\r\n\r\n        var varValue = this.matrix[varRow][this.rhsColumn];\r\n        if (Math.abs(varValue - Math.round(varValue)) > this.precision) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\n// Multiply all the fractional parts of variables supposed to be integer\r\nTableau.prototype.computeFractionalVolume = function(ignoreIntegerValues) {\r\n    var volume = -1;\r\n    // var integerVariables = this.model.integerVariables;\r\n    // var nIntegerVars = integerVariables.length;\r\n    // for (var v = 0; v < nIntegerVars; v++) {\r\n    //     var r = this.rowByVarIndex[integerVariables[v].index];\r\n    //     if (r === -1) {\r\n    //         continue;\r\n    //     }\r\n    //     var rhs = this.matrix[r][this.rhsColumn];\r\n    //     rhs = Math.abs(rhs);\r\n    //     var decimalPart = Math.min(rhs - Math.floor(rhs), Math.floor(rhs + 1));\r\n    //     if (decimalPart < this.precision) {\r\n    //         if (!ignoreIntegerValues) {\r\n    //             return 0;\r\n    //         }\r\n    //     } else {\r\n    //         if (volume === -1) {\r\n    //             volume = rhs;\r\n    //         } else {\r\n    //             volume *= rhs;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    for (var r = 1; r < this.height; r += 1) {\r\n        if (this.variablesPerIndex[this.varIndexByRow[r]].isInteger) {\r\n            var rhs = this.matrix[r][this.rhsColumn];\r\n            rhs = Math.abs(rhs);\r\n            var decimalPart = Math.min(rhs - Math.floor(rhs), Math.floor(rhs + 1));\r\n            if (decimalPart < this.precision) {\r\n                if (!ignoreIntegerValues) {\r\n                    return 0;\r\n                }\r\n            } else {\r\n                if (volume === -1) {\r\n                    volume = rhs;\r\n                } else {\r\n                    volume *= rhs;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (volume === -1){\r\n        return 0;\r\n    }\r\n    return volume;\r\n};\r\n","/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n\r\nvar Tableau = require(\"./Tableau/Tableau.js\");\r\nvar branchAndCut = require(\"./Tableau/branchAndCut.js\");\r\nvar expressions = require(\"./expressions.js\");\r\nvar Constraint = expressions.Constraint;\r\nvar Equality = expressions.Equality;\r\nvar Variable = expressions.Variable;\r\nvar IntegerVariable = expressions.IntegerVariable;\r\nvar Term = expressions.Term;\r\n\r\n/*************************************************************\r\n * Class: Model\r\n * Description: Holds the model of a linear optimisation problem\r\n **************************************************************/\r\nfunction Model(precision, name) {\r\n    this.tableau = new Tableau(precision);\r\n\r\n    this.name = name;\r\n\r\n    this.variables = [];\r\n\r\n    this.integerVariables = [];\r\n\r\n    this.unrestrictedVariables = {};\r\n\r\n    this.constraints = [];\r\n\r\n    this.nConstraints = 0;\r\n\r\n    this.nVariables = 0;\r\n\r\n    this.isMinimization = true;\r\n\r\n    this.tableauInitialized = false;\r\n    \r\n    this.relaxationIndex = 1;\r\n\r\n    this.useMIRCuts = false;\r\n\r\n    this.checkForCycles = true;\r\n    \r\n    //\r\n    // Quick and dirty way to leave useful information\r\n    // for the end user without hitting the console\r\n    // or modifying the primary return object...\r\n    //\r\n    this.messages = [];\r\n}\r\nmodule.exports = Model;\r\n\r\nModel.prototype.minimize = function () {\r\n    this.isMinimization = true;\r\n    return this;\r\n};\r\n\r\nModel.prototype.maximize = function () {\r\n    this.isMinimization = false;\r\n    return this;\r\n};\r\n\r\n// Model.prototype.addConstraint = function (constraint) {\r\n//     // TODO: make sure that the constraint does not belong do another model\r\n//     // and make\r\n//     this.constraints.push(constraint);\r\n//     return this;\r\n// };\r\n\r\nModel.prototype._getNewElementIndex = function () {\r\n    if (this.availableIndexes.length > 0) {\r\n        return this.availableIndexes.pop();\r\n    }\r\n\r\n    var index = this.lastElementIndex;\r\n    this.lastElementIndex += 1;\r\n    return index;\r\n};\r\n\r\nModel.prototype._addConstraint = function (constraint) {\r\n    var slackVariable = constraint.slack;\r\n    this.tableau.variablesPerIndex[slackVariable.index] = slackVariable;\r\n    this.constraints.push(constraint);\r\n    this.nConstraints += 1;\r\n    if (this.tableauInitialized === true) {\r\n        this.tableau.addConstraint(constraint);\r\n    }\r\n};\r\n\r\nModel.prototype.smallerThan = function (rhs) {\r\n    var constraint = new Constraint(rhs, true, this.tableau.getNewElementIndex(), this);\r\n    this._addConstraint(constraint);\r\n    return constraint;\r\n};\r\n\r\nModel.prototype.greaterThan = function (rhs) {\r\n    var constraint = new Constraint(rhs, false, this.tableau.getNewElementIndex(), this);\r\n    this._addConstraint(constraint);\r\n    return constraint;\r\n};\r\n\r\nModel.prototype.equal = function (rhs) {\r\n    var constraintUpper = new Constraint(rhs, true, this.tableau.getNewElementIndex(), this);\r\n    this._addConstraint(constraintUpper);\r\n\r\n    var constraintLower = new Constraint(rhs, false, this.tableau.getNewElementIndex(), this);\r\n    this._addConstraint(constraintLower);\r\n\r\n    return new Equality(constraintUpper, constraintLower);\r\n};\r\n\r\nModel.prototype.addVariable = function (cost, id, isInteger, isUnrestricted, priority) {\r\n    if (typeof priority === \"string\") {\r\n        switch (priority) {\r\n        case \"required\":\r\n            priority = 0;\r\n            break;\r\n        case \"strong\":\r\n            priority = 1;\r\n            break;\r\n        case \"medium\":\r\n            priority = 2;\r\n            break;\r\n        case \"weak\":\r\n            priority = 3;\r\n            break;\r\n        default:\r\n            priority = 0;\r\n            break;\r\n        }\r\n    }\r\n\r\n    var varIndex = this.tableau.getNewElementIndex();\r\n    if (id === null || id === undefined) {\r\n        id = \"v\" + varIndex;\r\n    }\r\n\r\n    if (cost === null || cost === undefined) {\r\n        cost = 0;\r\n    }\r\n\r\n    if (priority === null || priority === undefined) {\r\n        priority = 0;\r\n    }\r\n\r\n    var variable;\r\n    if (isInteger) {\r\n        variable = new IntegerVariable(id, cost, varIndex, priority);\r\n        this.integerVariables.push(variable);\r\n    } else {\r\n        variable = new Variable(id, cost, varIndex, priority);\r\n    }\r\n\r\n    this.variables.push(variable);\r\n    this.tableau.variablesPerIndex[varIndex] = variable;\r\n\r\n    if (isUnrestricted) {\r\n        this.unrestrictedVariables[varIndex] = true;\r\n    }\r\n\r\n    this.nVariables += 1;\r\n\r\n    if (this.tableauInitialized === true) {\r\n        this.tableau.addVariable(variable);\r\n    }\r\n\r\n    return variable;\r\n};\r\n\r\nModel.prototype._removeConstraint = function (constraint) {\r\n    var idx = this.constraints.indexOf(constraint);\r\n    if (idx === -1) {\r\n        console.warn(\"[Model.removeConstraint] Constraint not present in model\");\r\n        return;\r\n    }\r\n\r\n    this.constraints.splice(idx, 1);\r\n    this.nConstraints -= 1;\r\n\r\n    if (this.tableauInitialized === true) {\r\n        this.tableau.removeConstraint(constraint);\r\n    }\r\n\r\n    if (constraint.relaxation) {\r\n        this.removeVariable(constraint.relaxation);\r\n    }\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n// For dynamic model modification\r\n//-------------------------------------------------------------------\r\nModel.prototype.removeConstraint = function (constraint) {\r\n    if (constraint.isEquality) {\r\n        this._removeConstraint(constraint.upperBound);\r\n        this._removeConstraint(constraint.lowerBound);\r\n    } else {\r\n        this._removeConstraint(constraint);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nModel.prototype.removeVariable = function (variable) {\r\n    var idx = this.variables.indexOf(variable);\r\n    if (idx === -1) {\r\n        console.warn(\"[Model.removeVariable] Variable not present in model\");\r\n        return;\r\n    }\r\n    this.variables.splice(idx, 1);\r\n\r\n    if (this.tableauInitialized === true) {\r\n        this.tableau.removeVariable(variable);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nModel.prototype.updateRightHandSide = function (constraint, difference) {\r\n    if (this.tableauInitialized === true) {\r\n        this.tableau.updateRightHandSide(constraint, difference);\r\n    }\r\n    return this;\r\n};\r\n\r\nModel.prototype.updateConstraintCoefficient = function (constraint, variable, difference) {\r\n    if (this.tableauInitialized === true) {\r\n        this.tableau.updateConstraintCoefficient(constraint, variable, difference);\r\n    }\r\n    return this;\r\n};\r\n\r\n\r\nModel.prototype.setCost = function (cost, variable) {\r\n    var difference = cost - variable.cost;\r\n    if (this.isMinimization === false) {\r\n        difference = -difference;\r\n    }\r\n\r\n    variable.cost = cost;\r\n    this.tableau.updateCost(variable, difference);\r\n    return this;\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nModel.prototype.loadJson = function (jsonModel) {\r\n    this.isMinimization = (jsonModel.opType !== \"max\");\r\n\r\n    var variables = jsonModel.variables;\r\n    var constraints = jsonModel.constraints;\r\n\r\n    var constraintsMin = {};\r\n    var constraintsMax = {};\r\n\r\n    // Instantiating constraints\r\n    var constraintIds = Object.keys(constraints);\r\n    var nConstraintIds = constraintIds.length;\r\n\r\n    for (var c = 0; c < nConstraintIds; c += 1) {\r\n        var constraintId = constraintIds[c];\r\n        var constraint = constraints[constraintId];\r\n        var equal = constraint.equal;\r\n\r\n        var weight = constraint.weight;\r\n        var priority = constraint.priority;\r\n        var relaxed = weight !== undefined || priority !== undefined;\r\n\r\n        var lowerBound, upperBound;\r\n        if (equal === undefined) {\r\n            var min = constraint.min;\r\n            if (min !== undefined) {\r\n                lowerBound = this.greaterThan(min);\r\n                constraintsMin[constraintId] = lowerBound;\r\n                if (relaxed) { lowerBound.relax(weight, priority); }\r\n            }\r\n\r\n            var max = constraint.max;\r\n            if (max !== undefined) {\r\n                upperBound = this.smallerThan(max);\r\n                constraintsMax[constraintId] = upperBound;\r\n                if (relaxed) { upperBound.relax(weight, priority); }\r\n            }\r\n        } else {\r\n            lowerBound = this.greaterThan(equal);\r\n            constraintsMin[constraintId] = lowerBound;\r\n\r\n            upperBound = this.smallerThan(equal);\r\n            constraintsMax[constraintId] = upperBound;\r\n\r\n            var equality = new Equality(lowerBound, upperBound);\r\n            if (relaxed) { equality.relax(weight, priority); }\r\n        }\r\n    }\r\n\r\n    var variableIds = Object.keys(variables);\r\n    var nVariables = variableIds.length;\r\n    \r\n    \r\n    \r\n//\r\n//\r\n// *** OPTIONS ***\r\n//\r\n//\r\n\r\n    this.tolerance = jsonModel.tolerance || 0;\r\n    \r\n    if(jsonModel.timeout){\r\n        this.timeout = jsonModel.timeout;\r\n    }\r\n    \r\n    //\r\n    //\r\n    // The model is getting too sloppy with options added to it...\r\n    // mebe it needs an \"options\" option...?\r\n    //\r\n    // YES! IT DOES!\r\n    // DO IT!\r\n    // NOW!\r\n    // HERE!!!\r\n    //\r\n    if(jsonModel.options){\r\n        \r\n        //\r\n        // TIMEOUT\r\n        //\r\n        if(jsonModel.options.timeout){\r\n            this.timeout = jsonModel.options.timeout;\r\n        }\r\n        \r\n        //\r\n        // TOLERANCE\r\n        //\r\n        if(this.tolerance === 0){\r\n            this.tolerance = jsonModel.options.tolerance || 0;\r\n        }\r\n        \r\n        //\r\n        // MIR CUTS - (NOT WORKING)\r\n        //\r\n        if(jsonModel.options.useMIRCuts){\r\n            this.useMIRCuts = jsonModel.options.useMIRCuts;\r\n        }\r\n        \r\n        //\r\n        // CYCLE CHECK...tricky because it defaults to false\r\n        //\r\n        //\r\n        // This should maybe be on by default...\r\n        //\r\n        if(typeof jsonModel.options.exitOnCycles === \"undefined\"){\r\n            this.checkForCycles = true;\r\n        } else {\r\n            this.checkForCycles = jsonModel.options.exitOnCycles;\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    \r\n//\r\n//\r\n// /// OPTIONS \\\\\\\r\n//\r\n//\r\n    \r\n    var integerVarIds = jsonModel.ints || {};\r\n    var binaryVarIds = jsonModel.binaries || {};\r\n    var unrestrictedVarIds = jsonModel.unrestricted || {};\r\n\r\n    // Instantiating variables and constraint terms\r\n    var objectiveName = jsonModel.optimize;\r\n    for (var v = 0; v < nVariables; v += 1) {\r\n        // Creation of the variables\r\n        var variableId = variableIds[v];\r\n        var variableConstraints = variables[variableId];\r\n        var cost = variableConstraints[objectiveName] || 0;\r\n        var isBinary = !!binaryVarIds[variableId];\r\n        var isInteger = !!integerVarIds[variableId] || isBinary;\r\n        var isUnrestricted = !!unrestrictedVarIds[variableId];\r\n        var variable = this.addVariable(cost, variableId, isInteger, isUnrestricted);\r\n\r\n        if (isBinary) {\r\n            // Creating an upperbound constraint for this variable\r\n            this.smallerThan(1).addTerm(1, variable);\r\n        }\r\n\r\n        var constraintNames = Object.keys(variableConstraints);\r\n        for (c = 0; c < constraintNames.length; c += 1) {\r\n            var constraintName = constraintNames[c];\r\n            if (constraintName === objectiveName) {\r\n                continue;\r\n            }\r\n\r\n            var coefficient = variableConstraints[constraintName];\r\n\r\n            var constraintMin = constraintsMin[constraintName];\r\n            if (constraintMin !== undefined) {\r\n                constraintMin.addTerm(coefficient, variable);\r\n            }\r\n\r\n            var constraintMax = constraintsMax[constraintName];\r\n            if (constraintMax !== undefined) {\r\n                constraintMax.addTerm(coefficient, variable);\r\n            }\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n//-------------------------------------------------------------------\r\n//-------------------------------------------------------------------\r\nModel.prototype.getNumberOfIntegerVariables = function () {\r\n    return this.integerVariables.length;\r\n};\r\n\r\nModel.prototype.solve = function () {\r\n    // Setting tableau if not done\r\n    if (this.tableauInitialized === false) {\r\n        this.tableau.setModel(this);\r\n        this.tableauInitialized = true;\r\n    }\r\n\r\n    return this.tableau.solve();\r\n};\r\n\r\nModel.prototype.isFeasible = function () {\r\n    return this.tableau.feasible;\r\n};\r\n\r\nModel.prototype.save = function () {\r\n    return this.tableau.save();\r\n};\r\n\r\nModel.prototype.restore = function () {\r\n    return this.tableau.restore();\r\n};\r\n\r\nModel.prototype.activateMIRCuts = function (useMIRCuts) {\r\n    this.useMIRCuts = useMIRCuts;\r\n};\r\n\r\nModel.prototype.debug = function (debugCheckForCycles) {\r\n    this.checkForCycles = debugCheckForCycles;\r\n};\r\n\r\nModel.prototype.log = function (message) {\r\n    return this.tableau.log(message);\r\n};\r\n","/*global describe*/\r\n/*global require*/\r\n/*global module*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n/*global exports*/\r\n\r\n\r\n// All functions in this module that\r\n// get exported to main ***MUST***\r\n// return a functional LPSolve JSON style\r\n// model or throw an error\r\n\r\nexports.CleanObjectiveAttributes = function(model){\r\n  // Test to see if the objective attribute\r\n  // is also used by one of the constraints\r\n  //\r\n  // If so...create a new attribute on each\r\n  // variable\r\n    var fakeAttr,\r\n        x, z;\r\n  \r\n    if(typeof model.optimize === \"string\"){\r\n        if(model.constraints[model.optimize]){\r\n            // Create the new attribute\r\n            fakeAttr = Math.random();\r\n\r\n            // Go over each variable and check\r\n            for(x in model.variables){\r\n                // Is it there?\r\n                if(model.variables[x][model.optimize]){\r\n                    model.variables[x][fakeAttr] = model.variables[x][model.optimize];\r\n                }\r\n            }\r\n\r\n        // Now that we've cleaned up the variables\r\n        // we need to clean up the constraints\r\n            model.constraints[fakeAttr] = model.constraints[model.optimize];\r\n            delete model.constraints[model.optimize];\r\n            return model;\r\n        } else {    \r\n            return model;\r\n        }  \r\n    } else {\r\n        // We're assuming its an object?\r\n        for(z in model.optimize){\r\n            if(model.constraints[z]){\r\n            // Make sure that the constraint\r\n            // being optimized isn't constrained\r\n            // by an equity collar\r\n                if(model.constraints[z] === \"equal\"){\r\n                    // Its constrained by an equal sign;\r\n                    // delete that objective and move on\r\n                    delete model.optimize[z];\r\n                \r\n                } else {\r\n                    // Create the new attribute\r\n                    fakeAttr = Math.random();\r\n\r\n                    // Go over each variable and check\r\n                    for(x in model.variables){\r\n                        // Is it there?\r\n                        if(model.variables[x][z]){\r\n                            model.variables[x][fakeAttr] = model.variables[x][z];\r\n                        }\r\n                    }\r\n                // Now that we've cleaned up the variables\r\n                // we need to clean up the constraints\r\n                    model.constraints[fakeAttr] = model.constraints[z];\r\n                    delete model.constraints[z];            \r\n                }\r\n            }    \r\n        }\r\n        return model;\r\n    }\r\n};\r\n","/*global describe*/\r\n/*global require*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n/*global exports*/\r\n/*global Promise*/\r\n/*global module*/\r\n\r\nmodule.exports = {\r\n    \"lpsolve\": require(\"./lpsolve/main.js\")\r\n};","/*global describe*/\r\n/*global require*/\r\n/*global it*/\r\n/*global console*/\r\n/*global process*/\r\n/*global exports*/\r\n/*global Promise*/\r\n\r\n\r\n// LP SOLVE CLI REFERENCE:\r\n// http://lpsolve.sourceforge.net/5.5/lp_solve.htm\r\n//\r\n//\r\n\r\n// var reformat = require(\"./Reformat.js\");\r\n\r\nexports.reformat = require(\"./Reformat.js\");\r\n\r\nfunction clean_data(data){\r\n\r\n    //\r\n    // Clean Up\r\n    // And Reformatting...\r\n    //\r\n    data = data.replace(\"\\\\r\\\\n\",\"\\r\\n\");\r\n\r\n\r\n    data = data.split(\"\\r\\n\");\r\n    data = data.filter(function(x){\r\n        \r\n        var rx;\r\n        \r\n        //\r\n        // Test 1\r\n        rx = new RegExp(\" 0$\",\"gi\");\r\n        if(rx.test(x) === true){\r\n            return false;\r\n        }\r\n\r\n        //\r\n        // Test 2\r\n        rx = new RegExp(\"\\\\d$\",\"gi\");\r\n        if(rx.test(x) === false){\r\n            return false;\r\n        }\r\n        \r\n\r\n        return true;\r\n    })\r\n    .map(function(x){\r\n        return x.split(/\\:{0,1} +(?=\\d)/);\r\n    })\r\n    .reduce(function(o,k,i){\r\n        o[k[0]] = k[1];\r\n        return o;\r\n    },{});\r\n    \r\n    return data;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexports.solve = function(model){\r\n    //\r\n    return new Promise(function(res, rej){\r\n        //\r\n        // Exit if we're in the browser...\r\n        //\r\n        if(typeof window !== \"undefined\"){\r\n            rej(\"Function Not Available in Browser\");\r\n        }\r\n        //\r\n        // Convert JSON model to lp_solve format\r\n        //\r\n        var data = require(\"./Reformat.js\")(model);\r\n        \r\n        \r\n        if(!model.external){\r\n            rej(\"Data for this function must be contained in the 'external' attribute. Not seeing anything there.\");\r\n        }\r\n        \r\n        // \r\n        // In the args, they *SHALL* have provided an executable\r\n        // path to the solver they're piping the data into\r\n        //\r\n        if(!model.external.binPath){\r\n            rej(\"No Executable | Binary path provided in arguments as 'binPath'\");\r\n        }\r\n        \r\n        //\r\n        // They also need to provide an arg_array\r\n        //\r\n        if(!model.external.args){\r\n            rej(\"No arguments array for cli | bash provided on 'args' attribute\");\r\n        }\r\n        \r\n        //\r\n        // They also need a tempName so we know where to store\r\n        // the temp file we're creating...\r\n        //\r\n        if(!model.external.tempName){\r\n            rej(\"No 'tempName' given. This is necessary to produce a staging file for the solver to operate on\");\r\n        }\r\n        \r\n        \r\n        \r\n        //\r\n        // To my knowledge, in Windows, you cannot directly pipe text into\r\n        // an exe...\r\n        //\r\n        // Thus, our process looks like this...\r\n        //\r\n        // 1.) Convert a model to something an external solver can use\r\n        // 2.) Save the results from step 1 as a temp-text file\r\n        // 3.) Pump the results into an exe | whatever-linux-uses\r\n        // 4.) \r\n        // \r\n        //\r\n        \r\n        var fs = require(\"fs\");\r\n        \r\n        fs.writeFile(model.external.tempName, data, function(fe, fd){\r\n            if(fe){\r\n                rej(fe);\r\n            } else {\r\n                //\r\n                // So it looks like we wrote to a file and closed it.\r\n                // Neat.\r\n                //\r\n                // Now we need to execute our CLI...\r\n                var exec = require(\"child_process\").execFile;\r\n                \r\n                //\r\n                // Put the temp file name in the args array...\r\n                //\r\n                model.external.args.push(model.external.tempName);\r\n                \r\n                exec(model.external.binPath, model.external.args, function(e,data){\r\n                    if(e){\r\n                        \r\n                        if(e.code === 1){\r\n                            res(clean_data(data));\r\n                        } else {\r\n                            \r\n                            var codes = {\r\n                                \"-2\": \"Out of Memory\",\r\n                                \"1\": \"SUBOPTIMAL\",\r\n                                \"2\": \"INFEASIBLE\",\r\n                                \"3\": \"UNBOUNDED\",\r\n                                \"4\": \"DEGENERATE\",\r\n                                \"5\": \"NUMFAILURE\",\r\n                                \"6\": \"USER-ABORT\",\r\n                                \"7\": \"TIMEOUT\",\r\n                                \"9\": \"PRESOLVED\",\r\n                                \"25\": \"ACCURACY ERROR\",\r\n                                \"255\": \"FILE-ERROR\"\r\n                            };\r\n                            \r\n                            var ret_obj = {\r\n                                \"code\": e.code,\r\n                                \"meaning\": codes[e.code],\r\n                                \"data\": data\r\n                            };\r\n                            \r\n                            rej(ret_obj);\r\n                        }\r\n\r\n                    } else {\r\n                        // And finally...return it.\r\n                        res(clean_data(data));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nmodel.external = {\r\n    \"binPath\": \"C:/lpsolve/lp_solve.exe\",\r\n    \"tempName\": \"C:/temp/out.txt\",\r\n    \"args\": [\r\n        \"-S2\"\r\n    ]\r\n    \r\n}\r\n\r\n*/","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar agora_graph_1 = require(\"agora-graph\");\r\nvar lodash_1 = __importDefault(require(\"lodash\"));\r\nvar javascript_lp_solver_1 = require(\"javascript-lp-solver\");\r\nexports.diamondRotation = function (graph, options) {\r\n    if (options === void 0) { options = { padding: 0 }; }\r\n    var diamonds = lodash_1.default.map(graph.nodes, node2Diamond);\r\n    return { graph: graph };\r\n};\r\nexports.diamondGraphRotation = function (graph, options) {\r\n    if (options === void 0) { options = { padding: 0 }; }\r\n    graph.nodes.sort(function (a, b) { return a.index - b.index; });\r\n    var rotatedNodes = lodash_1.default.map(graph.nodes, function (n) {\r\n        var polar = agora_graph_1.toPolar(n);\r\n        polar.theta += Math.PI / 4;\r\n        var cart = agora_graph_1.toCartesian(polar);\r\n        return __assign(__assign({}, n), cart);\r\n    });\r\n    var vs = lodash_1.default.sortBy(rotatedNodes, 'x');\r\n    var hs = lodash_1.default.sortBy(rotatedNodes, 'y');\r\n    var diamonds = lodash_1.default.map(rotatedNodes, function (n) {\r\n        return node2Diamond(n, lodash_1.default.findIndex(vs, ['index', n.index]), // i'm sure it exists\r\n        lodash_1.default.findIndex(hs, ['index', n.index]) // i'm sure it exists\r\n        );\r\n    });\r\n    var constraints = [];\r\n    // set minimize constraint\r\n    var minimize = lodash_1.default(diamonds)\r\n        .map(function (_a) {\r\n        var index = _a.index, x = _a.x, y = _a.y;\r\n        return \"x\" + index + \" - \" + x + \" + y\" + index + \" - \" + y;\r\n    })\r\n        .join(' + ');\r\n    constraints.push('min: ' + minimize + ';');\r\n    // sort by index\r\n    diamonds.sort(function (a, b) { return a.index - b.index; });\r\n    // setting up orthogonal constraints\r\n    for (var i = 0; i < diamonds.length; i++) {\r\n        var _a = diamonds[i], index = _a.index, v = _a.v, h = _a.h;\r\n        if (v + 1 < vs.length) {\r\n            // is not last\r\n            // x'_v(i) <= x'_v(i+1)\r\n            constraints.push(\"x\" + index + \" - x\" + vs[v + 1].index + \" <= 0;\");\r\n        }\r\n        if (h + 1 < hs.length) {\r\n            // is not last\r\n            // y'_h(i) <= y'_h(i+1)\r\n            constraints.push(\"y\" + index + \" - y\" + hs[h + 1].index + \" <= 0;\");\r\n        }\r\n    }\r\n    // sort by x\r\n    diamonds.sort(function (a, b) { return a.x - b.x; });\r\n    for (var iIdx = 0; iIdx < diamonds.length; iIdx++) {\r\n        var _b = diamonds[iIdx], i = _b.index, yi = _b.y, wi = _b.wii;\r\n        var ymax = null;\r\n        var ymin = null;\r\n        for (var jIdx = iIdx + 1; jIdx < diamonds.length; jIdx++) {\r\n            var _c = diamonds[jIdx], j = _c.index, yj = _c.y, wj = _c.wii;\r\n            // xj >= xi\r\n            if (yi <= yj && (ymax === null || yj <= ymax)) {\r\n                //wi is not width\r\n                constraints.push(\"x\" + j + \" - x\" + i + \" + y\" + j + \" - y\" + i + \" >= \" + (wi + wj) + \";\");\r\n                ymax = yj;\r\n            }\r\n            if (yi >= yj && (ymin === null || yj >= ymin)) {\r\n                constraints.push(\"x\" + j + \" - x\" + i + \" - y\" + j + \" + y\" + i + \" >= \" + (wi + wj) + \";\");\r\n                ymin = yj;\r\n            }\r\n        }\r\n    }\r\n    // minimal position constraint\r\n    for (var index = 0; index < diamonds.length; index++) {\r\n        var _d = diamonds[index], i = _d.index, x = _d.x, y = _d.y;\r\n        constraints.push(\"x\" + i + \" >= \" + x + \";\");\r\n        constraints.push(\"y\" + i + \" >= \" + y + \";\");\r\n    }\r\n    // transform to js constraint\r\n    var lpsolve = constraints.join('\\n');\r\n    var tmodel = javascript_lp_solver_1.ReformatLP(lpsolve);\r\n    // console.log(lpsolve);\r\n    var solver = javascript_lp_solver_1.Solve(tmodel);\r\n    var feasible = solver.feasible, result = solver.result, bounded = solver.bounded, rest = __rest(solver, [\"feasible\", \"result\", \"bounded\"]);\r\n    // index => {x?: y:?}\r\n    var positions = lodash_1.default.transform(rest, function (result, val, key) {\r\n        var tpe = key.substr(0, 1);\r\n        var index = key.substr(1);\r\n        (result[index] || (result[index] = {}))[tpe] = val;\r\n    }, {});\r\n    // rotate back to cartesian\r\n    var rotatedPos = {};\r\n    lodash_1.default.forEach(diamonds, function (_a) {\r\n        var index = _a.index, x = _a.x, y = _a.y;\r\n        var position = {\r\n            x: positions[index] && positions[index].x ? positions[index].x : x,\r\n            y: positions[index] && positions[index].y ? positions[index].y : y\r\n        };\r\n        var polar = agora_graph_1.toPolar(position);\r\n        polar.theta -= Math.PI / 4;\r\n        rotatedPos[index] = agora_graph_1.toCartesian(polar);\r\n    });\r\n    // map to nodes\r\n    var updatedNodes = lodash_1.default.map(graph.nodes, function (_a) {\r\n        var index = _a.index, x = _a.x, y = _a.y, rest = __rest(_a, [\"index\", \"x\", \"y\"]);\r\n        return (__assign(__assign({ index: index }, rest), rotatedPos[index]));\r\n    });\r\n    // console.log(JSON.stringify(graph));\r\n    // console.log(JSON.stringify(diamonds));\r\n    // console.log(\r\n    //   JSON.stringify(\r\n    //     diamonds.map(({ wii: width, height, ...d }) => {\r\n    //       const update: any = {};\r\n    //       if (positions[d.index]) {\r\n    //         if (positions[d.index].x) update.x = positions[d.index].x;\r\n    //         if (positions[d.index].y) update.y = positions[d.index].y;\r\n    //       }\r\n    //       return { ...d, ...update, width: width * 2, height: height * 2 };\r\n    //     })\r\n    //   )\r\n    // );\r\n    return { graph: { nodes: updatedNodes, edges: graph.edges } };\r\n};\r\nfunction node2Diamond(_a, v, h) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height, index = _a.index;\r\n    return {\r\n        index: index,\r\n        x: x,\r\n        y: y,\r\n        v: v,\r\n        h: h,\r\n        wii: (Math.max(height, width) / 2) * Math.SQRT2\r\n    };\r\n}\r\n"],"sourceRoot":""}