{"version":3,"sources":["../node_modules/agora-scaling/dist/index.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","lodash_1","agora_graph_1","scaling","createFunction","graph","options","padding","scaleRatio","nodes","maxOverlapRatio","overlapGroups","getAllOverlaps","default","forEach","group","i","length","u","j","v","overlap","actualDist","norm","ratio","optimalVector","getMaxOverlapRatio","n","x","y","x_origin","minX","y_origin","minY","ScalingAlgorithm","name","algorithm"],"mappings":"iGAOA,IAAIA,EAAkBC,MAAQA,KAAKD,iBAAmB,SAAUE,GAC9D,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CACnC,QAAWA,IAIfE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAGT,IAAIC,EAAWR,EAAgB,EAAQ,IAEnCS,EAAgB,EAAQ,IAU5BH,EAAQI,QAAUD,EAAcE,gBAAe,SAAUC,EAAOC,QAC9C,IAAZA,IACFA,EAAU,CACRC,QAAS,IAIb,IAAIC,EA4BN,SAA4BC,EAAOF,QACjB,IAAZA,IACFA,EAAU,GAGZ,IAAIG,EAAkB,EAClBC,EAAgBT,EAAcU,eAAeH,GAuBjD,OAtBAR,EAASY,QAAQC,QAAQH,GAAe,SAAUI,GAChD,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAGhC,IAFA,IAAIE,EAAIH,EAAMC,GAELG,EAAIH,EAAI,EAAGG,EAAIJ,EAAME,OAAQE,IAAK,CACzC,IAAIC,EAAIL,EAAMI,GAEd,GAAIjB,EAAcmB,QAAQH,EAAGE,EAAGb,GAAU,CACxC,IAAIe,EAAapB,EAAcqB,KAAKL,EAAGE,GAEvC,GAAmB,IAAfE,EAAkB,CACpB,IACIE,EADctB,EAAce,OAAOf,EAAcuB,cAAcP,EAAGE,EAAGb,IAC/Ce,EAEtBZ,EAAkBc,IACpBd,EAAkBc,SAOvBd,EAzDUgB,CAAmBrB,EAAMI,MAAOH,EAAQC,SAEzDN,EAASY,QAAQC,QAAQT,EAAMI,OAAO,SAAUkB,GAC9CA,EAAEC,IAAMpB,EACRmB,EAAEE,IAAMrB,KAEV,IAAIsB,EAAW5B,EAAc6B,KAAK7B,EAAc6B,KAAK1B,EAAMI,QACvDuB,EAAW9B,EAAc+B,KAAK/B,EAAc+B,KAAK5B,EAAMI,QAM3D,OAJAR,EAASY,QAAQC,QAAQT,EAAMI,OAAO,SAAUkB,GAC9CA,EAAEC,GAAKE,EACPH,EAAEE,GAAKG,KAEF,CACL3B,MAAOA,MAGXN,EAAQmC,iBAAmB,CACzBC,KAAM,UACNC,UAAWrC,EAAQI,SAErBJ,EAAQc,QAAUd,EAAQmC","file":"static/js/18.84da844c.chunk.js","sourcesContent":["\"use strict\";\n/**\r\n * Implementation of the Scale algorithm\r\n *\r\n * Scales up the size of the graph until there is no more overlap\r\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar agora_graph_1 = require(\"agora-graph\");\n/**\r\n * Executes the Scale algorithm for this graph\r\n *\r\n * @param {Graph} graph the graph to update\r\n * @param {object} options to pass to the algorith\r\n * @param {number} options.padding padding to add between nodes\r\n */\n\n\nexports.scaling = agora_graph_1.createFunction(function (graph, options) {\n  if (options === void 0) {\n    options = {\n      padding: 0\n    };\n  }\n\n  var scaleRatio = getMaxOverlapRatio(graph.nodes, options.padding); // scale it up\n\n  lodash_1.default.forEach(graph.nodes, function (n) {\n    n.x *= +scaleRatio;\n    n.y *= +scaleRatio;\n  });\n  var x_origin = agora_graph_1.minX(agora_graph_1.minX(graph.nodes));\n  var y_origin = agora_graph_1.minY(agora_graph_1.minY(graph.nodes)); // shift to origin\n\n  lodash_1.default.forEach(graph.nodes, function (n) {\n    n.x -= x_origin;\n    n.y -= y_origin;\n  });\n  return {\n    graph: graph\n  };\n});\nexports.ScalingAlgorithm = {\n  name: 'Scaling',\n  algorithm: exports.scaling\n};\nexports.default = exports.ScalingAlgorithm;\n/**\r\n * find the biggest ratio for overlapping nodes\r\n * @param nodes\r\n * @param [padding=0]\r\n */\n\nfunction getMaxOverlapRatio(nodes, padding) {\n  if (padding === void 0) {\n    padding = 0;\n  }\n\n  var maxOverlapRatio = 1;\n  var overlapGroups = agora_graph_1.getAllOverlaps(nodes);\n  lodash_1.default.forEach(overlapGroups, function (group) {\n    for (var i = 0; i < group.length; i++) {\n      var u = group[i];\n\n      for (var j = i + 1; j < group.length; j++) {\n        var v = group[j];\n\n        if (agora_graph_1.overlap(u, v, padding)) {\n          var actualDist = agora_graph_1.norm(u, v);\n\n          if (actualDist !== 0) {\n            var optimalDist = agora_graph_1.length(agora_graph_1.optimalVector(u, v, padding));\n            var ratio = optimalDist / actualDist;\n\n            if (maxOverlapRatio < ratio) {\n              maxOverlapRatio = ratio;\n            }\n          }\n        }\n      }\n    }\n  });\n  return maxOverlapRatio;\n}"],"sourceRoot":""}