{"version":3,"sources":["../node_modules/agora-rworldle/dist/index.js"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__importDefault","mod","__esModule","defineProperty","exports","value","lodash_1","agora_graph_1","hasOverlap","alreadyLayouted","current","_i","alreadyLayouted_1","overlap","rWordleL","createFunction","graph","options","padding","nodes","sort","a","b","x","layouted","default","forEach","cur","minSide","Math","min","width","height","spiralFactor","spiralStep","tx","sin","ty","cos","transformedArea","sum","y","push","RWordleLAlgorithm","name","algorithm"],"mappings":"iGAyBA,IAAIA,EAAWC,MAAQA,KAAKD,UAAY,WAatC,OAZAA,EAAWE,OAAOC,QAAU,SAAUC,GACpC,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAG9C,IAAK,IAAII,KAFTL,EAAIG,UAAUF,GAGRJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAI7D,OAAON,IAGOU,MAAMb,KAAMO,YAG1BO,EAAkBd,MAAQA,KAAKc,iBAAmB,SAAUC,GAC9D,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CACnC,QAAWA,IAIfd,OAAOgB,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAGT,IAAIC,EAAWN,EAAgB,EAAQ,IAEnCO,EAAgB,EAAQ,IAkD5B,SAASC,EAAWC,EAAiBC,GACnC,IAAK,IAAIC,EAAK,EAAGC,EAAoBH,EAAiBE,EAAKC,EAAkBlB,OAAQiB,IAAM,CACzF,IAAIrB,EAAIsB,EAAkBD,GAE1B,GAAIJ,EAAcM,QAAQvB,EAAGoB,GAC3B,OAAO,EAIX,OAAO,EAzDTN,EAAQU,SAAWP,EAAcQ,gBAAe,SAAUC,EAAOC,QAC/C,IAAZA,IACFA,EAAU,CACRC,QAAS,IAKbF,EAAMG,MAAMC,MAAK,SAAUC,EAAGC,GAC5B,OAAOD,EAAEE,EAAID,EAAEC,KAEjB,IAAIC,EAAW,GA2Bf,OA1BAlB,EAASmB,QAAQC,QAAQV,EAAMG,OAAO,SAAUQ,GAO9C,IANA,IAAItC,EAAI,EACJuC,EAAUC,KAAKC,IAAIH,EAAII,MAAOJ,EAAIK,QAElCC,EAAeL,EAAU,GACzBM,EAAaN,EAAU,KAEd,CACX,IAAIO,EAAKN,KAAKO,IAAI/C,GAAKA,EAAI4C,EACvBI,EAAKR,KAAKS,IAAIjD,GAAKA,EAAI4C,EAEvBM,EAAkBtD,EAASA,EAAS,GAAI0C,GAAMpB,EAAciC,IAAIb,EAAK,CACvEJ,EAAGY,EACHM,EAAGJ,KAGL,IAAK7B,EAAWgB,EAAUe,GAAkB,CAE1Cf,EAASkB,KAAKH,GACd,MAGFlD,GAAK6C,EAAa7C,MAGtB2B,EAAMG,MAAQK,EACP,CACLR,MAAOA,MAGXZ,EAAQuC,kBAAoB,CAC1BC,KAAM,WACNC,UAAWzC,EAAQU,UAErBV,EAAQqB,QAAUrB,EAAQU","file":"static/js/17.7e286354.chunk.js","sourcesContent":["\"use strict\";\n/**\r\n * Implementation of RWordle-L Algorithm\r\n *\r\n * Ported from Java, original code owned by :\r\n * Copyright by Marc Spicker\r\n * GPL License -- http://www.gnu.org/licenses/gpl.html\r\n *\r\n * based on the publication:\r\n * @article {CGF:CGF3106,\r\n *  author = {Strobelt, H. and Spicker, M. and Stoffel, A. and Keim, D. and Deussen, O.},\r\n *  title = {Rolled-out Wordles: A Heuristic Method for Overlap Removal of 2D Data Representatives},\r\n *  journal = {Computer Graphics Forum},\r\n *  volume = {31},\r\n *  number = {3pt3},\r\n *  publisher = {Blackwell Publishing Ltd},\r\n *  issn = {1467-8659},\r\n *  url = {http://dx.doi.org/10.1111/j.1467-8659.2012.03106.x},\r\n *  doi = {10.1111/j.1467-8659.2012.03106.x},\r\n *  pages = {1135--1144},\r\n *  keywords = {I.3.3 [Computer Graphics]: Picture/Image Generationâ€”Line and curve generation},\r\n *  year = {2012},\r\n * }\r\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar agora_graph_1 = require(\"agora-graph\");\n\nexports.rWordleL = agora_graph_1.createFunction(function (graph, options) {\n  if (options === void 0) {\n    options = {\n      padding: 0\n    };\n  } // Sort by Xs\n\n\n  graph.nodes.sort(function (a, b) {\n    return a.x - b.x;\n  });\n  var layouted = [];\n  lodash_1.default.forEach(graph.nodes, function (cur) {\n    var t = 3.0;\n    var minSide = Math.min(cur.width, cur.height); // spiral depending on the size of the object\n\n    var spiralFactor = minSide / 17.0;\n    var spiralStep = minSide / 10.0;\n\n    while (true) {\n      var tx = Math.sin(t) * t * spiralFactor;\n      var ty = Math.cos(t) * t * spiralFactor; // transformed object\n\n      var transformedArea = __assign(__assign({}, cur), agora_graph_1.sum(cur, {\n        x: tx,\n        y: ty\n      }));\n\n      if (!hasOverlap(layouted, transformedArea)) {\n        // found placement\n        layouted.push(transformedArea);\n        break;\n      }\n\n      t += spiralStep / t;\n    }\n  });\n  graph.nodes = layouted;\n  return {\n    graph: graph\n  };\n});\nexports.RWordleLAlgorithm = {\n  name: 'RWordleL',\n  algorithm: exports.rWordleL\n};\nexports.default = exports.rWordleL;\n\nfunction hasOverlap(alreadyLayouted, current) {\n  for (var _i = 0, alreadyLayouted_1 = alreadyLayouted; _i < alreadyLayouted_1.length; _i++) {\n    var s = alreadyLayouted_1[_i];\n\n    if (agora_graph_1.overlap(s, current)) {\n      return true;\n    }\n  }\n\n  return false;\n}"],"sourceRoot":""}