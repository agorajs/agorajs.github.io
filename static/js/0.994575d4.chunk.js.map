{"version":3,"sources":["../node_modules/agora-criteria/dist/utils.js","../node_modules/agora-criteria/dist/edge-based/relative-standard-deviation-delaunay.js"],"names":["Object","defineProperty","exports","value","criteriaWrap","_a","name","_criteria","criteria","_short","short","initial","updated","nodes","length","Error","__importDefault","this","mod","__esModule","lodash_1","agora_graph_1","utils_1","delta","edges","r","meanR","default","meanBy","Math","sqrt","sumBy","e","pow","edgeLength","initialGraph","updatedGraph","withDelaunay","initialNodes","updatedNodes","initialSorted","sortBy","updatedSorted","source","target","initLength","norm","delaunayEdges","delaunay","round","EdgeBasedRelativeStandardDeviationDelaunayCriteria","EdgeBasedRelativeStandardDeviationCriteria"],"mappings":"gGAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IA6BTD,EAAQE,aA1BR,SAAsBC,GACpB,IAAIC,EAAOD,EAAGC,KACVC,EAAYF,EAAGG,SACfC,EAASJ,EAAGK,MAChB,MAAO,CACLJ,KAAMA,EACNI,MAAOD,EACPD,SAAU,SAAkBG,EAASC,GACnC,GAAID,EAAQE,MAAMC,SAAWF,EAAQC,MAAMC,OAUzC,MAAMC,MAAM,aAAeN,GAAkBH,GAAQ,wCAGvD,OAAOC,EAAUI,EAASC,O,iCCzBhC,IAAII,EAAkBC,MAAQA,KAAKD,iBAAmB,SAAUE,GAC9D,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CACnC,QAAWA,IAIflB,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAGT,IAAIiB,EAAWJ,EAAgB,EAAQ,IAEnCK,EAAgB,EAAQ,IAExBC,EAAU,EAAQ,KA0DtB,SAASC,EAAMC,EAAOC,GACpB,IAAIC,EAAQN,EAASO,QAAQC,OAAOJ,EAAOC,GAC3C,OAAOI,KAAKC,KAAKV,EAASO,QAAQI,MAAMP,GAAO,SAAUQ,GACvD,OAAOH,KAAKI,IAAIR,EAAEO,GAAKN,EAAO,MAC3BF,EAAMV,QAAUY,EAjDvBxB,EAAQgC,WAAa,SAAUC,EAAcC,EAAcC,QACpC,IAAjBA,IACFA,GAAe,GAGjB,IAAIC,EAAeH,EAAatB,MAC5B0B,EAAeH,EAAavB,MAC5B2B,EAAgBpB,EAASO,QAAQc,OAAOH,EAAc,SACtDI,EAAgBtB,EAASO,QAAQc,OAAOF,EAAc,SAEtDd,EAAI,SAAWO,GAEjB,GAAIA,EAAEW,SAAWX,EAAEY,OAAQ,OAAO,EAClC,IAAIC,EAAaxB,EAAcyB,KAAKN,EAAcR,EAAEW,QAASH,EAAcR,EAAEY,SAE7E,OADcvB,EAAcyB,KAAKJ,EAAcV,EAAEW,QAASD,EAAcV,EAAEY,SACzDC,GAUnB,GAAIR,EAAc,CAChB,IAAIU,EAAgB1B,EAAc2B,SAASV,GAC3C,MAAO,CACLnC,MAAOkB,EAAc4B,MAAM1B,EAAMwB,EAAetB,IAAK,IAYzD,MAAO,CACLtB,MAAOkB,EAAc4B,MAAM1B,EAAMY,EAAaX,MAAOC,IAAK,KAW9DvB,EAAQgD,mDAAqD5B,EAAQlB,aAAa,CAChFI,SAAU,SAAkBG,EAASC,GACnC,OAAOV,EAAQgC,WAAWvB,EAASC,GAAS,IAE9CN,KAAM,kDACNI,MAAO,YAETR,EAAQiD,2CAA6C7B,EAAQlB,aAAa,CACxEI,SAAU,SAAkBG,EAASC,GACnC,OAAOV,EAAQgC,WAAWvB,EAASC,GAAS,IAE9CN,KAAM,yCACNI,MAAO,WAETR,EAAQyB,QAAUzB,EAAQgD","file":"static/js/0.994575d4.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction criteriaWrap(_a) {\n  var name = _a.name,\n      _criteria = _a.criteria,\n      _short = _a.short;\n  return {\n    name: name,\n    short: _short,\n    criteria: function criteria(initial, updated) {\n      if (initial.nodes.length !== updated.nodes.length) {\n        //* ignoring console because it's captured by the exception\n\n        /*\r\n        console.error(\r\n        'criteria', // family\r\n        criteria.short, // type\r\n        'abording', // action\r\n        'not the same number of nodes' // reason\r\n        ); */\n        throw Error(\"Criteria \" + (_short ? _short : name) + \" abording : not same number of nodes\");\n      }\n\n      return _criteria(initial, updated);\n    }\n  };\n}\n\nexports.criteriaWrap = criteriaWrap;","\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar agora_graph_1 = require(\"agora-graph\");\n\nvar utils_1 = require(\"../utils\");\n/**\r\n * TODO: GH10\r\n *\r\n * reference:  https://gitlab.com/graphviz/graphviz/blob/master/lib/sfdpgen/layout_similarity.c#L161-180\r\n * permalink reference : https://gitlab.com/graphviz/graphviz/blob/b0871968de2252653b001bf700ed98c240e8aad6/lib/sfdpgen/layout_similarity.c#L161-180\r\n *\r\n * Evaluates the updatedGraph\r\n * @param initialGraph the initial graph sorted by index\r\n * @param updatedGraph the updated graph sorted by index\r\n */\n\n\nexports.edgeLength = function (initialGraph, updatedGraph, withDelaunay) {\n  if (withDelaunay === void 0) {\n    withDelaunay = true;\n  }\n\n  var initialNodes = initialGraph.nodes;\n  var updatedNodes = updatedGraph.nodes;\n  var initialSorted = lodash_1.default.sortBy(initialNodes, 'index');\n  var updatedSorted = lodash_1.default.sortBy(updatedNodes, 'index');\n\n  var r = function r(e) {\n    // if source is equal to target, consider as same length\n    if (e.source === e.target) return 1;\n    var initLength = agora_graph_1.norm(initialSorted[e.source], initialSorted[e.target]);\n    var uLength = agora_graph_1.norm(updatedSorted[e.source], updatedSorted[e.target]);\n    return uLength / initLength;\n  };\n  /* not used and supposedly wrong\r\n  const r_prime = (e: Edge) => {\r\n    const initLength = norm(initialSorted[e.source], initialSorted[e.target]);\r\n    const uLength = norm(updatedSorted[e.source], updatedSorted[e.target]);\r\n    return initLength / uLength;\r\n  }; */\n\n\n  if (withDelaunay) {\n    var delaunayEdges = agora_graph_1.delaunay(initialNodes);\n    return {\n      value: agora_graph_1.round(delta(delaunayEdges, r), -6)\n    };\n    /* this is how it should be done, but it is unclear about how do we manage r_prime calculation\r\n    const delaunayEdgesPrime = delaunay(updatedNodes);\r\n    return {\r\n      value: round(\r\n        (delta(delaunayEdges, r) + delta(delaunayEdgesPrime, r_prime)) / 2,\r\n        -6\r\n      )\r\n    }; */\n  }\n\n  return {\n    value: agora_graph_1.round(delta(initialGraph.edges, r), -6)\n  };\n};\n\nfunction delta(edges, r) {\n  var meanR = lodash_1.default.meanBy(edges, r);\n  return Math.sqrt(lodash_1.default.sumBy(edges, function (e) {\n    return Math.pow(r(e) - meanR, 2);\n  }) / edges.length) / meanR;\n}\n\nexports.EdgeBasedRelativeStandardDeviationDelaunayCriteria = utils_1.criteriaWrap({\n  criteria: function criteria(initial, updated) {\n    return exports.edgeLength(initial, updated, true);\n  },\n  name: 'edge-based/relative-standard-deviation/delaunay',\n  short: 'eb_rsdd'\n});\nexports.EdgeBasedRelativeStandardDeviationCriteria = utils_1.criteriaWrap({\n  criteria: function criteria(initial, updated) {\n    return exports.edgeLength(initial, updated, false);\n  },\n  name: 'edge-based/relative-standard-deviation',\n  short: 'eb_rsd'\n});\nexports.default = exports.EdgeBasedRelativeStandardDeviationDelaunayCriteria;"],"sourceRoot":""}