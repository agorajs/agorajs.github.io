{"version":3,"sources":["../node_modules/agora-scaling/dist/index.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","lodash_1","require","agora_graph_1","scaling","createFunction","graph","options","padding","scaleRatio","nodes","maxOverlapRatio","overlapGroups","getAllOverlaps","default","forEach","group","i","length","u","j","v","overlap","actualDist","norm","ratio","optimalVector","getMaxOverlapRatio","n","x","y","x_origin","minX","y_origin","minY","ScalingAlgorithm","name","algorithm"],"mappings":"iGAMA,IAAIA,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,IAExDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,IAAIC,EAAWR,EAAgBS,EAAQ,IACnCC,EAAgBD,EAAQ,IAQ5BH,EAAQK,QAAUD,EAAcE,gBAAe,SAAUC,EAAOC,QAC5C,IAAZA,IAAsBA,EAAU,CAAEC,QAAS,IAC/C,IAAIC,EAyBR,SAA4BC,EAAOF,QACf,IAAZA,IAAsBA,EAAU,GACpC,IAAIG,EAAkB,EAClBC,EAAgBT,EAAcU,eAAeH,GAmBjD,OAlBAT,EAASa,QAAQC,QAAQH,GAAe,SAAUI,GAC9C,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAE9B,IADA,IAAIE,EAAIH,EAAMC,GACLG,EAAIH,EAAI,EAAGG,EAAIJ,EAAME,OAAQE,IAAK,CACvC,IAAIC,EAAIL,EAAMI,GACd,GAAIjB,EAAcmB,QAAQH,EAAGE,EAAGb,GAAU,CACtC,IAAIe,EAAapB,EAAcqB,KAAKL,EAAGE,GACvC,GAAmB,IAAfE,EAAkB,CAClB,IACIE,EADctB,EAAce,OAAOf,EAAcuB,cAAcP,EAAGE,EAAGb,IAC/Ce,EACtBZ,EAAkBc,IAClBd,EAAkBc,SAOnCd,EA/CUgB,CAAmBrB,EAAMI,MAAOH,EAAQC,SAEzDP,EAASa,QAAQC,QAAQT,EAAMI,OAAO,SAAUkB,GAC5CA,EAAEC,IAAMpB,EACRmB,EAAEE,IAAMrB,KAEZ,IAAIsB,EAAW5B,EAAc6B,KAAK7B,EAAc6B,KAAK1B,EAAMI,QACvDuB,EAAW9B,EAAc+B,KAAK/B,EAAc+B,KAAK5B,EAAMI,QAM3D,OAJAT,EAASa,QAAQC,QAAQT,EAAMI,OAAO,SAAUkB,GAC5CA,EAAEC,GAAKE,EACPH,EAAEE,GAAKG,KAEJ,CAAE3B,MAAOA,MAEpBP,EAAQoC,iBAAmB,CACvBC,KAAM,UACNC,UAAWtC,EAAQK,SAEvBL,EAAQe,QAAUf,EAAQoC","file":"static/js/18.c5bcb7d9.chunk.js","sourcesContent":["\"use strict\";\r\n/**\r\n * Implementation of the Scale algorithm\r\n *\r\n * Scales up the size of the graph until there is no more overlap\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lodash_1 = __importDefault(require(\"lodash\"));\r\nvar agora_graph_1 = require(\"agora-graph\");\r\n/**\r\n * Executes the Scale algorithm for this graph\r\n *\r\n * @param {Graph} graph the graph to update\r\n * @param {object} options to pass to the algorith\r\n * @param {number} options.padding padding to add between nodes\r\n */\r\nexports.scaling = agora_graph_1.createFunction(function (graph, options) {\r\n    if (options === void 0) { options = { padding: 0 }; }\r\n    var scaleRatio = getMaxOverlapRatio(graph.nodes, options.padding);\r\n    // scale it up\r\n    lodash_1.default.forEach(graph.nodes, function (n) {\r\n        n.x *= +scaleRatio;\r\n        n.y *= +scaleRatio;\r\n    });\r\n    var x_origin = agora_graph_1.minX(agora_graph_1.minX(graph.nodes));\r\n    var y_origin = agora_graph_1.minY(agora_graph_1.minY(graph.nodes));\r\n    // shift to origin\r\n    lodash_1.default.forEach(graph.nodes, function (n) {\r\n        n.x -= x_origin;\r\n        n.y -= y_origin;\r\n    });\r\n    return { graph: graph };\r\n});\r\nexports.ScalingAlgorithm = {\r\n    name: 'Scaling',\r\n    algorithm: exports.scaling\r\n};\r\nexports.default = exports.ScalingAlgorithm;\r\n/**\r\n * find the biggest ratio for overlapping nodes\r\n * @param nodes\r\n * @param [padding=0]\r\n */\r\nfunction getMaxOverlapRatio(nodes, padding) {\r\n    if (padding === void 0) { padding = 0; }\r\n    var maxOverlapRatio = 1;\r\n    var overlapGroups = agora_graph_1.getAllOverlaps(nodes);\r\n    lodash_1.default.forEach(overlapGroups, function (group) {\r\n        for (var i = 0; i < group.length; i++) {\r\n            var u = group[i];\r\n            for (var j = i + 1; j < group.length; j++) {\r\n                var v = group[j];\r\n                if (agora_graph_1.overlap(u, v, padding)) {\r\n                    var actualDist = agora_graph_1.norm(u, v);\r\n                    if (actualDist !== 0) {\r\n                        var optimalDist = agora_graph_1.length(agora_graph_1.optimalVector(u, v, padding));\r\n                        var ratio = optimalDist / actualDist;\r\n                        if (maxOverlapRatio < ratio) {\r\n                            maxOverlapRatio = ratio;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return maxOverlapRatio;\r\n}\r\n"],"sourceRoot":""}