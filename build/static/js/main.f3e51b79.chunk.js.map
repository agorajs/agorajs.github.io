{"version":3,"sources":["components/SVGEdge.tsx","components/SVGNode.tsx","components/SVGGraph.tsx","components/DownloadLink.tsx","components/Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SVGEdge","source","target","className","x1","x","y1","y","x2","y2","SVGNode","node","height","width","index","label","text","transform","SVGGraph","graph","over","svgRef","rest","scaler","initial","frame","scale","ratio","Math","min","createScale","d3max","nodes","d","_","map","sortBy","value","edges","find","xmlns","viewBox","ref","EdgeList","key","NodeList","n","DownloadLink","content","name","children","url","file","File","type","URL","createObjectURL","createURL","useEffect","revokeObjectURL","href","download","AlgorithmRepresentation","algorithm","pWidth","pHeight","useState","SVGContent","setSVGContent","setGraph","setWidth","setHeight","measuredRef","useCallback","getBoundingClientRect","copy","e","crop","serializer","XMLSerializer","serializeToString","json","JSON","stringify","svg","InitialRepresentation","title","fileContent","gml","DownloadLinks","promisingFileReader","Promise","resolve","reject","fr","FileReader","onload","result","onerror","readAsText","Algorithms","props","Scaling","PFS","PFSP","FTA","RWordleL","VPSC","App","setFile","setFileContent","error","setError","undefined","a","jsonGraph","parseGML","console","log","toGraph","message","id","onChange","currentTarget","files","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3e51b79.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Node } from 'agora-graph';\r\n\r\nexport const SVGEdge: React.FC<{ source: Node; target: Node }> = function({\r\n  source,\r\n  target\r\n}) {\r\n  return (\r\n    <line\r\n      className=\"link\"\r\n      x1={source.x}\r\n      y1={source.y}\r\n      x2={target.x}\r\n      y2={target.y}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SVGEdge;\r\n","import React from 'react';\r\nimport { Node } from 'agora-graph';\r\n\r\nexport const SVGNode: React.FC<{ node: Node }> = function({\r\n  node: { x, y, height, width, index, label }\r\n}) {\r\n  let text = label || index;\r\n  if (text === 'undefined') text = index;\r\n  return (\r\n    <g className=\"node\" transform={`translate(${x},${y})`}>\r\n      <rect\r\n        className=\"rect\"\r\n        width={width}\r\n        height={height}\r\n        transform={`translate(${-width / 2},${-height / 2})`}\r\n      />\r\n      <text className=\"label\" transform=\"translate(-5,6)\">\r\n        {label !== 'undefined' ? label || index : index}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default SVGNode;\r\n","import React, { SVGProps } from 'react';\r\nimport _ from 'lodash';\r\nimport { max as d3max } from 'd3-array';\r\nimport { Graph, Node, Box } from 'agora-graph';\r\nimport EdgeComp from './SVGEdge';\r\nimport NodeComp from './SVGNode';\r\n\r\nexport const SVGGraph: React.FC<\r\n  {\r\n    graph: Graph;\r\n    over?: boolean;\r\n    width: number;\r\n    height: number;\r\n    svgRef: any;\r\n  } & SVGProps<SVGSVGElement>\r\n> = function({ graph, over = false, width, height, svgRef, ...rest }) {\r\n  const box = {\r\n    width: d3max(graph.nodes, d => d.x + d.width / 2) || 0,\r\n    height: d3max(graph.nodes, d => d.y + d.height / 2) || 0\r\n  };\r\n\r\n  const scaler = createScale(box, { width, height });\r\n\r\n  const nodes = _(graph.nodes)\r\n    .map(({ width, height, x, y, ...rest }) => ({\r\n      ...rest,\r\n      width: scaler(width),\r\n      height: scaler(height),\r\n      x: scaler(x),\r\n      y: scaler(y)\r\n    }))\r\n    .sortBy('index')\r\n    .value();\r\n\r\n  const edges: [Node, Node][] = graph.edges.map<[Node, Node]>(\r\n    ({ source, target }) => [\r\n      _.find(nodes, { index: source }) as Node,\r\n      _.find(nodes, { index: target }) as Node\r\n    ]\r\n  );\r\n\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width={width}\r\n      height={height}\r\n      viewBox={`-5,-5,${width + 10},${height + 10}`}\r\n      {...rest}\r\n      ref={svgRef}\r\n    >\r\n      <style>{`\r\n      .edges { \r\n        stroke: #878fff;\r\n        stroke-width: 2px;\r\n      }\r\n\r\n      .rect {\r\n        stroke: #000;\r\n        fill: #eee;\r\n      }\r\n      `}</style>\r\n      {over ? (\r\n        <>\r\n          <NodeList nodes={nodes} />\r\n          <EdgeList edges={edges} />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <EdgeList edges={edges} />\r\n          <NodeList nodes={nodes} />\r\n        </>\r\n      )}\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default SVGGraph;\r\n\r\nconst EdgeList: React.FC<{ edges: [Node, Node][] }> = function({ edges }) {\r\n  return (\r\n    <g className=\"edges\">\r\n      {edges.map(([source, target]) => (\r\n        <EdgeComp\r\n          key={source.index + ':' + target.index}\r\n          source={source}\r\n          target={target}\r\n        />\r\n      ))}\r\n    </g>\r\n  );\r\n};\r\n\r\nconst NodeList: React.FC<{ nodes: Node[] }> = function({ nodes }) {\r\n  return (\r\n    <g className=\"nodes\">\r\n      {nodes.map(n => (\r\n        <NodeComp key={n.index} node={n}></NodeComp>\r\n      ))}\r\n    </g>\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n * @param initial\r\n * @param frame\r\n *\r\n * @returns function which converts the coordinate for the projection\r\n */\r\nexport function createScale(initial: Box, frame: Box): (ref: number) => number {\r\n  const scale: any = function(initial: number) {\r\n    return scale.ratio * initial;\r\n  };\r\n\r\n  scale.ratio = Math.min(\r\n    frame.width / initial.width,\r\n    frame.height / initial.height\r\n  );\r\n\r\n  return scale;\r\n}\r\n","import React, { useEffect } from 'react';\r\n\r\nexport const DownloadLink: React.FC<{\r\n  content: string;\r\n  name: string;\r\n}> = function({ content, name, children }) {\r\n  function createURL(name: string, content: string) {\r\n    var file = new File([content], name, { type: 'plain/text' });\r\n    return URL.createObjectURL(file);\r\n  }\r\n\r\n  const url = createURL(name, content);\r\n\r\n  // cleanup on unmount\r\n  useEffect(() => () => URL.revokeObjectURL(url));\r\n\r\n  // TODO suspense update\r\n  return (\r\n    <a href={url} download={name} className=\"bw1 ba ph1 mr1 no-underline\">\r\n      {children ? children : name}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default DownloadLink;\r\n","import React, {\r\n  SVGProps,\r\n  useRef,\r\n  useEffect,\r\n  useState,\r\n  useCallback\r\n} from 'react';\r\nimport SVGGraph from './SVGGraph';\r\nimport { crop, Graph, Algorithm } from 'agora-graph';\r\nimport DownloadLink from './DownloadLink';\r\n\r\nexport const AlgorithmRepresentation: React.FC<\r\n  {\r\n    algorithm: Algorithm<any>;\r\n    initial: Graph;\r\n    width?: number;\r\n    height?: number;\r\n    over?: boolean;\r\n  } & SVGProps<SVGSVGElement>\r\n> = function({\r\n  algorithm: { name, algorithm },\r\n  initial,\r\n  className,\r\n  width: pWidth,\r\n  height: pHeight\r\n}) {\r\n  const [SVGContent, setSVGContent] = useState<string | null>(null);\r\n  const [graph, setGraph] = useState<Graph | null>(null);\r\n\r\n  const [width, setWidth] = useState(pWidth);\r\n  const [height, setHeight] = useState(pHeight);\r\n\r\n  const measuredRef = useCallback(\r\n    node => {\r\n      if (node !== null) {\r\n        if (!pHeight) setHeight(node.getBoundingClientRect().height);\r\n        if (!pWidth) setWidth(node.getBoundingClientRect().width);\r\n      }\r\n    },\r\n    [pWidth, pHeight]\r\n  );\r\n\r\n  // calling async set\r\n  useEffect(() => {\r\n    const copy = {\r\n      nodes: initial.nodes.map(n => ({ ...n })),\r\n      edges: initial.edges.map(e => ({ ...e }))\r\n    };\r\n    setGraph(crop(algorithm(copy).graph));\r\n  }, [algorithm, initial]);\r\n\r\n  const svgRef = useCallback(\r\n    svgRef => {\r\n      if (svgRef) {\r\n        const serializer = new XMLSerializer();\r\n        setSVGContent(serializer.serializeToString(svgRef));\r\n      }\r\n    },\r\n    [graph]\r\n  );\r\n\r\n  return (\r\n    <div className={'graph ' + className}>\r\n      <h2 className=\"title\">{name}</h2>\r\n      <DownloadLinks\r\n        name={name}\r\n        json={JSON.stringify(graph)}\r\n        svg={SVGContent}\r\n      />\r\n      <div className=\"graph w-100 h-100 ma1\" ref={measuredRef}>\r\n        {graph && height && width ? (\r\n          <SVGGraph\r\n            graph={graph}\r\n            height={height}\r\n            width={width}\r\n            svgRef={svgRef}\r\n          />\r\n        ) : (\r\n          'loading'\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlgorithmRepresentation;\r\nexport const InitialRepresentation: React.FC<\r\n  {\r\n    title: string;\r\n    graph: Graph;\r\n    fileContent: string;\r\n    width?: number;\r\n    height?: number;\r\n    over?: boolean;\r\n  } & SVGProps<SVGSVGElement>\r\n> = function({\r\n  title,\r\n  graph,\r\n  fileContent,\r\n  className,\r\n  width: pWidth,\r\n  height: pHeight,\r\n  ...rest\r\n}) {\r\n  const svgRef = useCallback(\r\n    svgRef => {\r\n      if (svgRef) {\r\n        const serializer = new XMLSerializer();\r\n        setSVGContent(serializer.serializeToString(svgRef));\r\n      }\r\n    },\r\n    [graph]\r\n  );\r\n  const [SVGContent, setSVGContent] = useState<string | null>(null);\r\n\r\n  const [width, setWidth] = useState(pWidth);\r\n  const [height, setHeight] = useState(pHeight);\r\n\r\n  const measuredRef = useCallback(\r\n    node => {\r\n      if (node !== null) {\r\n        if (!pHeight) setHeight(node.getBoundingClientRect().height);\r\n        if (!pWidth) setWidth(node.getBoundingClientRect().width);\r\n      }\r\n    },\r\n    [pWidth, pHeight]\r\n  );\r\n\r\n  return (\r\n    <div className={'initial-graph ' + className}>\r\n      <h2 className=\"title\">{title}</h2>\r\n      <DownloadLinks\r\n        name={title}\r\n        gml={fileContent}\r\n        json={JSON.stringify(graph)}\r\n        svg={SVGContent}\r\n      />\r\n      <div className=\"graph w-100 h-100 ma1\" ref={measuredRef}>\r\n        {height && width ? (\r\n          <SVGGraph\r\n            graph={graph}\r\n            width={width}\r\n            height={height}\r\n            // {...rest}\r\n            svgRef={svgRef}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DownloadLinks: React.FC<{\r\n  name: string;\r\n  gml?: string;\r\n  json: string;\r\n  svg?: string | null;\r\n}> = function({ name, gml, json, svg }) {\r\n  return (\r\n    <div>\r\n      {gml ? (\r\n        <DownloadLink content={gml} name={name + '.gml'}>\r\n          GML\r\n        </DownloadLink>\r\n      ) : null}\r\n      <DownloadLink content={json} name={name + '.json'}>\r\n        JSON\r\n      </DownloadLink>\r\n      {svg ? (\r\n        <DownloadLink content={svg} name={name + '.svg'}>\r\n          SVG\r\n        </DownloadLink>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport './App.css';\n\nimport PFS from 'agora-pfs';\nimport PFSP from 'agora-pfsp';\nimport FTA from 'agora-fta';\nimport VPSC from 'agora-vpsc';\nimport { RWordleLAlgorithm as RWordleL } from 'agora-rworldle';\nimport Scaling from 'agora-scaling';\nimport directaccess from './directaccess';\nimport AlgorithmRepresentation, {\n  InitialRepresentation\n} from './components/Result';\nimport { parseGML, toGraph } from 'agora-gml';\nimport { crop, Graph } from 'agora-graph';\n\nconst App: React.FC = () => {\n  const [file, setFile] = useState<File | undefined>();\n  const [graph, setGraph] = useState();\n  const [fileContent, setFileContent] = useState();\n  const [error, setError] = useState();\n\n  const onFileSet = (e: FormEvent<HTMLInputElement>) => {\n    setFile(e.currentTarget.files![0]);\n    // convert from gml to json\n  };\n\n  useEffect(() => {\n    // file effect\n    if (file !== undefined) {\n      (async () => {\n        try {\n          setError(null);\n          const text: string = await promisingFileReader(file);\n          const jsonGraph = parseGML(text);\n          console.log(jsonGraph);\n          setGraph(crop(toGraph(jsonGraph)));\n          setFileContent(text);\n        } catch (error) {\n          setError(error.message || error);\n          console.log(error);\n          setFile(undefined);\n        }\n      })();\n    }\n  }, [file]);\n\n  useEffect(() => {\n    // graph effect\n    console.log(graph);\n  }, [graph]);\n\n  return (\n    // <Provider store={store}>\n    <div className=\"App ma1\">\n      {error ? error : null}\n      {!file ? (\n        <input type=\"file\" name=\"file\" id=\"file\" onChange={onFileSet} />\n      ) : graph ? (\n        <div className=\"flex flex-wrap\">\n          <InitialRepresentation\n            title=\"Initial Graph\"\n            graph={graph}\n            fileContent={fileContent}\n            height={300}\n            over={true}\n            className=\"w-25\"\n          />\n          <Algorithms initial={graph} over={true} />\n        </div>\n      ) : null}\n    </div>\n    // </Provider>\n  );\n};\n\n//eslint-disable-next-line\nfunction promisingFileReader(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const fr = new FileReader();\n    fr.onload = () => resolve(fr.result as string);\n    fr.onerror = reject;\n    fr.readAsText(file);\n  });\n}\n\nconst bypassApp: React.FC = function() {\n  const graph = crop(toGraph(parseGML(directaccess)));\n\n  return (\n    <div className=\"flex flex-wrap\">\n      <InitialRepresentation\n        title=\"Initial Graph\"\n        graph={graph}\n        fileContent={directaccess}\n        height={300}\n        over={true}\n        className=\"w-25\"\n      />\n      <Algorithms initial={graph} over={true} />\n    </div>\n  );\n};\n\nexport const Algorithms: React.FC<{\n  initial: Graph;\n  over?: boolean;\n}> = function(props) {\n  return (\n    <>\n      <AlgorithmRepresentation\n        algorithm={Scaling}\n        {...props}\n        className=\"w-25\"\n        height={300}\n      />\n      <AlgorithmRepresentation\n        algorithm={PFS}\n        {...props}\n        className=\"w-25\"\n        height={300}\n      />\n      <AlgorithmRepresentation\n        algorithm={PFSP}\n        {...props}\n        className=\"w-25\"\n        height={300}\n      />\n      <AlgorithmRepresentation\n        algorithm={FTA}\n        {...props}\n        className=\"w-25\"\n        height={300}\n      />\n      <AlgorithmRepresentation\n        algorithm={RWordleL}\n        {...props}\n        className=\"w-25\"\n        height={300}\n      />\n      <AlgorithmRepresentation\n        algorithm={VPSC}\n        {...props}\n        className=\"w-25\"\n        height={300}\n      />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}